<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="3.1.5">
  <Settings>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'experiment': 'LOCO'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="False" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="False" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="False" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="True" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[640, 435]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[1.000,1.000,1.000]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="liveUpdate" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param name="Begin Experiment" updates="constant" val="#!/usr/bin/env python&amp;#10;import csv&amp;#10;import os.path&amp;#10;import datetime&amp;#10;import time&amp;#10;import math&amp;#10;import ast #Lets you convert string representations of lists to lists&amp;#10;&amp;#10;#Get directory&amp;#10;thisdir = os.path.abspath(os.path.join(os.path.dirname(_thisDir),'.'))&amp;#10;&amp;#10;#Get Subject ID and experiment&amp;#10;participant = expInfo['participant']&amp;#10;experiment = expInfo['experiment']&amp;#10;&amp;#10;fileNum = 1&amp;#10;&amp;#10;Stimuli = np.array([])&amp;#10;studyArray = []&amp;#10;oldornewArray = []&amp;#10;currentStimuli = 0&amp;#10;&amp;#10;abortSound = sound.Sound('aborted.wav', secs=-1, stereo=True)&amp;#10;abortSound.setVolume(1)&amp;#10;completeSound = sound.Sound('complete.wav', secs=-1, stereo=True)&amp;#10;completeSound.setVolume(1)&amp;#10;oneMinSound = sound.Sound('1min.wav', secs=-1, stereo=True)&amp;#10;completeSound.setVolume(1)&amp;#10;&amp;#10;hour = ''&amp;#10;min = ''&amp;#10;sec = ''&amp;#10;ampm = ''&amp;#10;&amp;#10;slideOnCurrent = True&amp;#10;currentX = 0.083 #X position at start of open&amp;#10;currentWidth = 1 #Current width of rectangle&amp;#10;&amp;#10;def setCurrent():&amp;#10;    if experiment == 'LOCO':&amp;#10;        userOldOrNewText.setText('User: ' + Stimuli[sortedCurrentStimuli][4])&amp;#10;        correctOldOrNewText.setText('Correct: ' + Stimuli[sortedCurrentStimuli][10])&amp;#10;        if not Stimuli[sortedCurrentStimuli][7] == 'N/A':&amp;#10;            userColorCircle.setColor([float(Stimuli[sortedCurrentStimuli][7]),1,1])&amp;#10;            userLocationDot.setPos((float(Stimuli[sortedCurrentStimuli][5])/3.91, (float(Stimuli[sortedCurrentStimuli][6])/3.91)-0.248))&amp;#10;            correctColorCircle.setColor([float(Stimuli[sortedCurrentStimuli][13]),1,1])&amp;#10;            correctLocationDot.setPos((float(Stimuli[sortedCurrentStimuli][11])/3.91, (float(Stimuli[sortedCurrentStimuli][12])/3.91)-0.248))&amp;#10;        else:&amp;#10;            userColorCircle.setColor([0,0,1])&amp;#10;            userLocationDot.setPos((0.065,-0.08))&amp;#10;            correctColorCircle.setColor([0,0,1])&amp;#10;            correctLocationDot.setPos((-.15,-0.08))&amp;#10;        locationDistText.setText('Location Dist: ' + Stimuli[sortedCurrentStimuli][16])&amp;#10;        colorDistText.setText('Color Rad Dist: ' + Stimuli[sortedCurrentStimuli][17])&amp;#10;        if Stimuli[sortedCurrentStimuli][16] != 'N/A':&amp;#10;            #Location&amp;#10;            if float(Stimuli[sortedCurrentStimuli][16]) &lt;= 0.05:&amp;#10;                locationScoreText.setText('Location Score: Very Good')&amp;#10;            elif float(Stimuli[sortedCurrentStimuli][16]) &lt;= 0.15:&amp;#10;                locationScoreText.setText('Location Score: Good')&amp;#10;            elif float(Stimuli[sortedCurrentStimuli][16]) &lt;= 0.35:&amp;#10;                locationScoreText.setText('Location Score: OK')&amp;#10;            elif float(Stimuli[sortedCurrentStimuli][16]) &lt;= 0.7:&amp;#10;                locationScoreText.setText('Location Score: Bad')&amp;#10;            else:&amp;#10;                locationScoreText.setText('Location Score: Very Bad')&amp;#10;            #Color&amp;#10;            correctAproxColor = ast.literal_eval(Stimuli[sortedCurrentStimuli][15])&amp;#10;            userAproxColor = ast.literal_eval(Stimuli[sortedCurrentStimuli][9])&amp;#10;            if correctAproxColor[0] in userAproxColor:&amp;#10;                colorScoreText.setText('Color Score: OK')&amp;#10;            elif len(correctAproxColor) &gt; 1:&amp;#10;                if correctAproxColor[1] in userAproxColor:&amp;#10;                    colorScoreText.setText('Color Score: OK')&amp;#10;                else:&amp;#10;                    colorScoreText.setText('Color Score: Bad')&amp;#10;            else:&amp;#10;                colorScoreText.setText('Color Score: Bad')&amp;#10;            if int(Stimuli[sortedCurrentStimuli][17]) &lt; 3:&amp;#10;                colorScoreText.setText('Color Score: Good')&amp;#10;        else:&amp;#10;            locationScoreText.setText('Location Score: N/A')&amp;#10;            colorScoreText.setText('Color Score: N/A')&amp;#10;        OldOrNewRTText.setText('Old/New RT: ' + Stimuli[sortedCurrentStimuli][18])&amp;#10;        TestRTText.setText('Test RT: ' + Stimuli[sortedCurrentStimuli][19])&amp;#10;        StudyOnsetText.setText('Study Onset: ' + Stimuli[sortedCurrentStimuli][23])&amp;#10;        OldOrNewOnsetText.setText('Old/New Onset: ' + Stimuli[sortedCurrentStimuli][24])&amp;#10;        TestOnsetText.setText('Test Onset: ' + Stimuli[sortedCurrentStimuli][25])&amp;#10;    elif experiment == 'LO':&amp;#10;        userOldOrNewText.setText('User: ' + Stimuli[sortedCurrentStimuli][4])&amp;#10;        correctOldOrNewText.setText('Correct: ' + Stimuli[sortedCurrentStimuli][7])&amp;#10;        if not Stimuli[sortedCurrentStimuli][10] == 'N/A':&amp;#10;            userLocationDot.setPos((float(Stimuli[sortedCurrentStimuli][5])/3.91, (float(Stimuli[sortedCurrentStimuli][6])/3.91)-0.248))&amp;#10;            correctLocationDot.setPos((float(Stimuli[sortedCurrentStimuli][8])/3.91, (float(Stimuli[sortedCurrentStimuli][9])/3.91)-0.248))&amp;#10;        else:&amp;#10;            userLocationDot.setPos((0.065,-0.08))&amp;#10;            correctLocationDot.setPos((-.15,-0.08))&amp;#10;        locationDistText.setText('Location Dist: ' + Stimuli[sortedCurrentStimuli][10])&amp;#10;        colorDistText.setText('')&amp;#10;        if Stimuli[sortedCurrentStimuli][10] != 'N/A':&amp;#10;            if float(Stimuli[sortedCurrentStimuli][10]) &lt;= 0.05:&amp;#10;                locationScoreText.setText('Location Score: Very Good')&amp;#10;            elif float(Stimuli[sortedCurrentStimuli][10]) &lt;= 0.15:&amp;#10;                locationScoreText.setText('Location Score: Good')&amp;#10;            elif float(Stimuli[sortedCurrentStimuli][10]) &lt;= 0.35:&amp;#10;                locationScoreText.setText('Location Score: OK')&amp;#10;            elif float(Stimuli[sortedCurrentStimuli][10]) &lt;= 0.7:&amp;#10;                locationScoreText.setText('Location Score: Bad')&amp;#10;            else:&amp;#10;                locationScoreText.setText('Location Score: Very Bad')&amp;#10;        else:&amp;#10;            locationScoreText.setText('Location Score: N/A')&amp;#10;        colorScoreText.setText('')&amp;#10;        OldOrNewRTText.setText('Old/New RT: ' + Stimuli[sortedCurrentStimuli][11])&amp;#10;        TestRTText.setText('Test RT: ' + Stimuli[sortedCurrentStimuli][12])&amp;#10;        StudyOnsetText.setText('Study Onset: ' + Stimuli[sortedCurrentStimuli][16])&amp;#10;        OldOrNewOnsetText.setText('Old/New Onset: ' + Stimuli[sortedCurrentStimuli][17])&amp;#10;        TestOnsetText.setText('Test Onset: ' + Stimuli[sortedCurrentStimuli][18])&amp;#10;    elif experiment == 'CO':&amp;#10;        userOldOrNewText.setText('User: ' + Stimuli[sortedCurrentStimuli][4])&amp;#10;        correctOldOrNewText.setText('Correct: ' + Stimuli[sortedCurrentStimuli][8])&amp;#10;        if not Stimuli[sortedCurrentStimuli][12] == 'N/A':&amp;#10;            userColorCircle.setColor([float(Stimuli[sortedCurrentStimuli][5]),1,1])&amp;#10;            correctColorCircle.setColor([float(Stimuli[sortedCurrentStimuli][9]),1,1])&amp;#10;        else:&amp;#10;            userColorCircle.setColor([0,0,1])&amp;#10;            correctColorCircle.setColor([0,0,1])&amp;#10;        locationDistText.setText('')&amp;#10;        colorDistText.setText('Color Rad Dist: ' + Stimuli[sortedCurrentStimuli][12])&amp;#10;        locationScoreText.setText('')&amp;#10;        if Stimuli[sortedCurrentStimuli][12] != 'N/A':&amp;#10;            correctAproxColor = ast.literal_eval(Stimuli[sortedCurrentStimuli][11])&amp;#10;            userAproxColor = ast.literal_eval(Stimuli[sortedCurrentStimuli][7])&amp;#10;            if correctAproxColor[0] in userAproxColor:&amp;#10;                colorScoreText.setText('Color Score: OK')&amp;#10;            elif len(correctAproxColor) &gt; 1:&amp;#10;                if correctAproxColor[1] in userAproxColor:&amp;#10;                    colorScoreText.setText('Color Score: OK')&amp;#10;                else:&amp;#10;                    colorScoreText.setText('Color Score: Bad')&amp;#10;            else:&amp;#10;                colorScoreText.setText('Color Score: Bad')&amp;#10;            if int(Stimuli[sortedCurrentStimuli][12]) &lt; 3:&amp;#10;                colorScoreText.setText('Color Score: Good')&amp;#10;        else:&amp;#10;            colorScoreText.setText('Color Score: N/A')&amp;#10;        OldOrNewRTText.setText('Old/New RT: ' + Stimuli[sortedCurrentStimuli][13])&amp;#10;        TestRTText.setText('Test RT: ' + Stimuli[sortedCurrentStimuli][14])&amp;#10;        StudyOnsetText.setText('Study Onset: ' + Stimuli[sortedCurrentStimuli][18])&amp;#10;        OldOrNewOnsetText.setText('Old/New Onset: ' + Stimuli[sortedCurrentStimuli][19])&amp;#10;        TestOnsetText.setText('Test Onset: ' + Stimuli[sortedCurrentStimuli][20])&amp;#10;&amp;#10;def slide():&amp;#10;    global slideOnCurrent&amp;#10;    doneWithSlide = False&amp;#10;    global currentWidth&amp;#10;    global currentX&amp;#10;    aniup = True&amp;#10;    speed = 0.1&amp;#10;    while doneWithSlide == False:&amp;#10;        if slideOnCurrent:&amp;#10;            #Animation to Overview&amp;#10;            if currentWidth &lt; 2 and aniup:&amp;#10;                selector.setSize((currentWidth, 1), log=False)&amp;#10;                selector.setPos((-((currentWidth-1)/20) + currentX, -0.04))&amp;#10;                currentWidth += speed&amp;#10;            elif currentX &gt; 0.03:&amp;#10;                selector.setPos((-((currentWidth-1)/20) + currentX, -0.04))&amp;#10;                currentX -= speed/10&amp;#10;                aniup = False&amp;#10;                Current.setColor('black')&amp;#10;                Overview.setColor([-0.553,-0.553,-0.553], 'rgb')&amp;#10;                #Updates:&amp;#10;                leftArrow.setColor([0.325,0.325,0.325])&amp;#10;                doubleLeftArrow1.setColor([0.325,0.325,0.325])&amp;#10;                doubleLeftArrow2.setColor([0.325,0.325,0.325])&amp;#10;                rightArrow.setColor([0.325,0.325,0.325])&amp;#10;                doubleRightArrow1.setColor([0.325,0.325,0.325])&amp;#10;                doubleRightArrow2.setColor([0.325,0.325,0.325])&amp;#10;                if not dataFileReady:&amp;#10;                    stimuli.setAutoDraw(False)&amp;#10;                correctColorShape.setAutoDraw(False)&amp;#10;                correctColorCircle.setAutoDraw(False)&amp;#10;                userColorShape.setAutoDraw(False)&amp;#10;                userColorCircle.setAutoDraw(False)&amp;#10;                correctColorText.setAutoDraw(False)&amp;#10;                userColorText.setAutoDraw(False)&amp;#10;                sortStudyText.setAutoDraw(False)&amp;#10;                sortOldornewText.setAutoDraw(False)&amp;#10;                sortTestText.setAutoDraw(False)&amp;#10;                sortByText.setText('Average:')&amp;#10;                trayShape.setAutoDraw(False)&amp;#10;                if dataFileReady:&amp;#10;                    correctLocationText.setAutoDraw(False)&amp;#10;                    correctLocationKey.setAutoDraw(False)&amp;#10;                    userLocationText.setAutoDraw(False)&amp;#10;                    userLocationKey.setAutoDraw(False)&amp;#10;                    overviewScoreText.setAutoDraw(True)&amp;#10;                    text.setText('Data Is Ready')&amp;#10;                    stimuli.setImage(thisdir + '/live/' + finalScore + '.png')&amp;#10;                    stimuli.setColor([1,1,1])&amp;#10;                    if not skipOldOrNew:&amp;#10;                        userOldOrNewText.setText('Correct Old: ' + str(avgCorrectOld) + ' of ' + str(studyStim))&amp;#10;                        correctOldOrNewText.setText('Correct New: ' + str(avgCorrectNew) + ' of ' + str(testStim-studyStim))&amp;#10;                    else:&amp;#10;                        userOldOrNewText.setText('Correct Old: N/A')&amp;#10;                        correctOldOrNewText.setText('Correct New: N/A')&amp;#10;                    if experiment != 'CO':&amp;#10;                        locationDistText.setText('Location Dist: ' + str(avgLocationDist))&amp;#10;                        locationScoreText.setText('Location Score: ' + avgLocationScore)&amp;#10;                        OldOrNewOnsetText.setText('Location Correct: ' + str(avgLocationCorrect) + '%')&amp;#10;                        userLocationDot.setPos((-((avgLocationDist/3.91)/2), (0/3.91)-0.248))&amp;#10;                        correctLocationDot.setPos(((avgLocationDist/3.91)/2, (0/3.91)-0.248))&amp;#10;                    if experiment != 'LO':&amp;#10;                        colorDistText.setText('Color Rad Dist: ' + str(avgColorDist))&amp;#10;                        colorScoreText.setText('Color Score: ' + avgColorScore)&amp;#10;                        TestOnsetText.setText('Color Correct: ' + str(avgColorCorrect) + '%')&amp;#10;                    if not skipOldOrNew:&amp;#10;                        OldOrNewRTText.setText('Old/New RT: ' + str(avgOldNewRT))&amp;#10;                    else:&amp;#10;                        OldOrNewRTText.setText('Old/New RT: N/A')&amp;#10;                    TestRTText.setText('Test RT: ' + str(avgTestRT))&amp;#10;                    if not skipOldOrNew:&amp;#10;                        StudyOnsetText.setText('Old/New Correct: ' + str(avgOldNewCorrect) + '%')&amp;#10;                    else:&amp;#10;                        StudyOnsetText.setText('Old/New Correct: N/A')&amp;#10;                    if experiment == 'CO':&amp;#10;                        locationDistText.setText('')&amp;#10;                        locationScoreText.setText('')&amp;#10;                        OldOrNewOnsetText.setText('')&amp;#10;                    elif experiment == 'LO':&amp;#10;                        colorDistText.setText('')&amp;#10;                        colorScoreText.setText('')&amp;#10;                        TestOnsetText.setText('')&amp;#10;            elif currentWidth &gt;= 1.25:&amp;#10;                currentX = -0.07&amp;#10;                selector.setSize((currentWidth, 1), log=False)&amp;#10;                selector.setPos((((currentWidth-1)/20) + currentX, -0.04))&amp;#10;                currentWidth -= speed&amp;#10;            else:&amp;#10;                doneWithSlide = True&amp;#10;                slideOnCurrent = False&amp;#10;        else:&amp;#10;            #Animation to Current&amp;#10;            if currentWidth &lt; 2 and aniup:&amp;#10;                selector.setSize((currentWidth, 1), log=False)&amp;#10;                selector.setPos((((currentWidth-1)/20) + currentX, -0.04))&amp;#10;                currentWidth += speed&amp;#10;            elif currentX &lt; -0.02:&amp;#10;                selector.setPos((((currentWidth-1)/20) + currentX, -0.04))&amp;#10;                currentX += speed/10&amp;#10;                aniup = False&amp;#10;                Current.setColor([-0.553,-0.553,-0.553], 'rgb')&amp;#10;                Overview.setColor('black')&amp;#10;                #Updates:&amp;#10;                if dataFileReady:&amp;#10;                    stimuli.setImage(thisdir + '/Stimuli/' + str(Stimuli[sortedCurrentStimuli][0]) + '.png')&amp;#10;                    stimuli.setColor([-1,-1,-1])&amp;#10;                    overviewScoreText.setAutoDraw(False)&amp;#10;                    correctColorShape.setAutoDraw(True)&amp;#10;                    correctColorCircle.setAutoDraw(True)&amp;#10;                    userColorShape.setAutoDraw(True)&amp;#10;                    userColorCircle.setAutoDraw(True)&amp;#10;                    correctColorText.setAutoDraw(True)&amp;#10;                    userColorText.setAutoDraw(True)&amp;#10;                    sortByText.setAutoDraw(True)&amp;#10;                    correctLocationText.setAutoDraw(True)&amp;#10;                    userLocationText.setAutoDraw(True)&amp;#10;                    correctLocationKey.setAutoDraw(True)&amp;#10;                    userLocationKey.setAutoDraw(True)&amp;#10;                    setCurrent()&amp;#10;                    if sortBy == 1:&amp;#10;                        sortByText.setText('Sort By: Study')&amp;#10;                        text.setText('Stimuli ' + str(currentStimuli+1) + ' of ' + str(studyStim))&amp;#10;                    elif sortBy == 2:&amp;#10;                        sortByText.setText('Sort By: Old/New')&amp;#10;                        text.setText('Stimuli ' + str(currentStimuli+1) + ' of ' + str(testStim))&amp;#10;                    elif sortBy == 3:&amp;#10;                        sortByText.setText('Sort By: Test')&amp;#10;                        text.setText('Stimuli ' + str(currentStimuli+1) + ' of ' + str(studyStim))&amp;#10;                if enableLeft:&amp;#10;                    leftArrow.setColor([-0.624,-0.624,-0.624])&amp;#10;                if enableRight:&amp;#10;                    rightArrow.setColor([-0.624,-0.624,-0.624])&amp;#10;                if enableFarLeft:&amp;#10;                    doubleLeftArrow1.setColor([-0.624,-0.624,-0.624])&amp;#10;                    doubleLeftArrow2.setColor([-0.624,-0.624,-0.624])&amp;#10;                if enableFarRight:&amp;#10;                    doubleRightArrow1.setColor([-0.624,-0.624,-0.624])&amp;#10;                    doubleRightArrow2.setColor([-0.624,-0.624,-0.624])&amp;#10;                if isOnCurrent and thisLine[1] == 'Stimuli':&amp;#10;                    stimuli.setAutoDraw(True)&amp;#10;                    correctColorShape.setAutoDraw(True)&amp;#10;                    correctColorCircle.setAutoDraw(True)&amp;#10;                    userColorShape.setAutoDraw(True)&amp;#10;                    userColorCircle.setAutoDraw(True)&amp;#10;                    correctColorText.setAutoDraw(True)&amp;#10;                    userColorText.setAutoDraw(True)&amp;#10;            elif currentWidth &gt;= 1:&amp;#10;                currentX = 0.083&amp;#10;                selector.setSize((currentWidth, 1), log=False)&amp;#10;                selector.setPos((-((currentWidth-1)/20) + currentX, -0.04))&amp;#10;                currentWidth -= speed&amp;#10;            else:&amp;#10;                doneWithSlide = True&amp;#10;                slideOnCurrent = True&amp;#10;        if defaultKeyboard.getKeys(keyList=[&quot;escape&quot;]):&amp;#10;            core.quit()&amp;#10;        win.flip()&amp;#10;&amp;#10;def getTime():&amp;#10;    global hour&amp;#10;    global min&amp;#10;    global sec&amp;#10;    global ampm&amp;#10;    if int(thisLine[6]) &gt; 12:&amp;#10;        hour = str(int(thisLine[6]) - 12)&amp;#10;        ampm = 'pm'&amp;#10;    else:&amp;#10;        hour = str(thisLine[6])&amp;#10;        ampm = 'am'&amp;#10;    if int(thisLine[7]) &lt; 10:&amp;#10;        min = '0' + str(thisLine[7])&amp;#10;    else:&amp;#10;        min = str(thisLine[7])&amp;#10;    if int(thisLine[8]) &lt; 10:&amp;#10;        sec = '0' + str(thisLine[8])&amp;#10;    else:&amp;#10;        sec = str(thisLine[8])&amp;#10;    return hour, min, sec, ampm&amp;#10;&amp;#10;def aproxColor(num): #1 = red, 2 = orange, 3 = yellow, 4 = green, 5 = aqua, 6 = blue, 7 = purple, and 8 = pink. 2 diget numbers are a combo of both&amp;#10;    word = []&amp;#10;    if num &gt;= 93 or num &lt;= 5:&amp;#10;        word.append('Red')&amp;#10;    if num &gt;= 98 or num &lt;= 8:&amp;#10;        word.append('Orange')&amp;#10;    if num &gt;= 6 and num &lt;= 20:&amp;#10;        word.append('Yellow')&amp;#10;    if num &gt;= 16 and num &lt;= 45:&amp;#10;        word.append('Green')&amp;#10;    if num &gt;= 37 and num &lt;= 62:&amp;#10;        word.append('Aqua')&amp;#10;    if num &gt;= 50 and num &lt;= 74:&amp;#10;        word.append('Blue')&amp;#10;    if num &gt;= 72 and num &lt;= 81:&amp;#10;        word.append('Purple')&amp;#10;    if num &gt;= 77 and num &lt;= 96:&amp;#10;        word.append('Pink')&amp;#10;    return word" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="participantText.text = participant&amp;#10;experimentText.text = experiment&amp;#10;loadingpercent = 0&amp;#10;loadingpercent2 = 0&amp;#10;loadFinal = 0&amp;#10;loadFinal2 = 0&amp;#10;firstRun = True #This var turns off in top of code&amp;#10;realFirstRun = True #This one turns off at bottom&amp;#10;thisLine = [0, 0, 0]&amp;#10;lastThisLine = [] #The last version of this line&amp;#10;totalstim = 0&amp;#10;isDone = False&amp;#10;isAborted = False&amp;#10;isOnCurrent = False #If live program is on the current part of the experiment&amp;#10;soundIsPlaying = False&amp;#10;oneMinSoundIsPlaying = False&amp;#10;timeleft = 0&amp;#10;shift = False&amp;#10;mousePressed = False #If mouse is pressed in. Used for current time&amp;#10;hasDoneTimeSet = False #See if it has gone through the time set that calculates the live time&amp;#10;enableRight = False #Arrow keys&amp;#10;enableLeft = False&amp;#10;enableFarRight = False&amp;#10;enableFarLeft = False&amp;#10;isOnNewStim = True #If true, user sees newest stim without the participant's input, if false, user sees last stimuli with the participant's innput&amp;#10;dataFileReady = False #If the end data file is ready for analysation&amp;#10;trayIsOpen = False #If the tray is open or not&amp;#10;trayIsClicked = False #If tray is currently being clicked&amp;#10;sortBy = 3 #1 is study, 2 is Old/New, 3 is Test&amp;#10;sortedCurrentStimuli = 0 #The current stimuli after it's been sorted&amp;#10;scrollWaitTime = 0 #Waits a certain amount of time before scrolling fast&amp;#10;tryDataFileOnce = True #Checks if the experiment is already done when the user opens the live app&amp;#10;&amp;#10;#YOU CAN CHANGE THESE IF YOU MAKE TIME MORE IN THE EXPERIMENT&amp;#10;instr1time = 12&amp;#10;exampletime = 10&amp;#10;instr2time = 8&amp;#10;practstudytime = 5 #Per object&amp;#10;instr3time = 12&amp;#10;practoldnew = 4&amp;#10;instr4time = 15&amp;#10;practtest = 10&amp;#10;instr5time = 8&amp;#10;studytime = 5&amp;#10;instr6time = 18&amp;#10;oldnewtime = 3&amp;#10;instr7time = 10&amp;#10;testtime = 10&amp;#10;debugTime = False #Makes the time left show up as seconds instead of rounded minutes, you can also just click the time left text while running to activate&amp;#10;&amp;#10;#Overview text&amp;#10;overviewScoreText = visual.TextStim(win=win, name='text',&amp;#10;    text='Participant did ',&amp;#10;    font='Arial',&amp;#10;    pos=(-0.45,-0.4), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;&amp;#10;#Sort by tray&amp;#10;trayShape = visual.Rect(&amp;#10;    win=win, name = 'trayShape',&amp;#10;    width = (.15,.15)[0], height = (.17,.17)[1],&amp;#10;    ori=0, pos=(0.45, -0.09),&amp;#10;    lineWidth = 0, lineColor=[-1,-1,-1], lineColorSpace='rgb',&amp;#10;    fillColor=[1,1,1], fillColorSpace='rgb',&amp;#10;    opacity=1, interpolate = True, depth=-7)&amp;#10;&amp;#10;#Sort By Text&amp;#10;sortByText = visual.TextStim(win=win, name='text',&amp;#10;    text='Sort By: Test',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45, -0.03), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR', depth=-8);&amp;#10;&amp;#10;sortStudyText = visual.TextStim(win=win, name='text',&amp;#10;    text='Study',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45, -0.07), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR', depth=-8);&amp;#10;&amp;#10;sortOldornewText = visual.TextStim(win=win, name='text',&amp;#10;    text='Old/New',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45, -0.11), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR', depth=-8);&amp;#10;&amp;#10;sortTestText = visual.TextStim(win=win, name='text',&amp;#10;    text='Test',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45, -0.15), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR', depth=-8);&amp;#10;&amp;#10;#Create Color Circles&amp;#10;correctColorShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,0.6,0], pos=(-.528,-.415), size=(0.1,0.1), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 1)&amp;#10;correctColorCircle = visual.RadialStim(win, colorSpace = 'hsv', color=[180,0,1], pos=(-.528,-.415), size=(0.09,0.09), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 1)&amp;#10;userColorShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,0.6,0], pos=(-.378,-.415), size=(0.1,0.1), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 1)&amp;#10;userColorCircle = visual.RadialStim(win, colorSpace = 'hsv', color=[180,0,1], pos=(-.378,-.415), size=(0.09,0.09), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 1)&amp;#10;&amp;#10;correctColorShape.setAutoDraw(True)&amp;#10;correctColorCircle.setAutoDraw(True)&amp;#10;userColorShape.setAutoDraw(True)&amp;#10;userColorCircle.setAutoDraw(True)&amp;#10;&amp;#10;#Create Color Circle Text&amp;#10;correctColorText = visual.TextStim(win=win, name='text',&amp;#10;    text='Correct',&amp;#10;    font='Arial',&amp;#10;    pos=(-.532,-.48), height=0.025, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;userColorText = visual.TextStim(win=win, name='text',&amp;#10;    text='User',&amp;#10;    font='Arial',&amp;#10;    pos=(-.38, -.48), height=0.025, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;&amp;#10;correctColorText.setAutoDraw(True)&amp;#10;userColorText.setAutoDraw(True)&amp;#10;&amp;#10;#Create Location dots&amp;#10;correctLocationDot = visual.RadialStim(win, color='green', pos=(-.15,-0.08), size=(0.02,0.02), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 1)&amp;#10;userLocationDot = visual.RadialStim(win, color='red', pos=(0.065,-0.08), size=(0.02,0.02), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 1)&amp;#10;correctLocationKey = visual.RadialStim(win, color='green', pos=(-.15,-0.08), size=(0.02,0.02), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 1)&amp;#10;userLocationKey = visual.RadialStim(win, color='red', pos=(0.065,-0.08), size=(0.02,0.02), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 1)&amp;#10;&amp;#10;correctLocationDot.setAutoDraw(True)&amp;#10;userLocationDot.setAutoDraw(True)&amp;#10;correctLocationKey.setAutoDraw(True)&amp;#10;userLocationKey.setAutoDraw(True)&amp;#10;&amp;#10;#Create Location Key Text&amp;#10;correctLocationText = visual.TextStim(win=win, name='text',&amp;#10;    text='Correct',&amp;#10;    font='Arial',&amp;#10;    pos=(-.1,-0.08), height=0.025, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;userLocationText = visual.TextStim(win=win, name='text',&amp;#10;    text='User',&amp;#10;    font='Arial',&amp;#10;    pos=(.1,-0.08), height=0.025, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;&amp;#10;correctLocationText.setAutoDraw(True)&amp;#10;userLocationText.setAutoDraw(True)&amp;#10;&amp;#10;#Create stats text: Correct Old/New, User Old/New, Location Dist, Color Dist, Location Score, Color Score, oldnew rt, test rt, start time of trail&amp;#10;userOldOrNewText = visual.TextStim(win=win, name='text',&amp;#10;    text='User: N/A',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45,-0.08), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;correctOldOrNewText = visual.TextStim(win=win, name='text',&amp;#10;    text='Correct: N/A',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45,-0.12), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;locationDistText = visual.TextStim(win=win, name='text',&amp;#10;    text='Location Dist: N/A',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45,-0.16), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;colorDistText = visual.TextStim(win=win, name='text',&amp;#10;    text='Color Rad Dist: N/A',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45,-0.20), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;locationScoreText = visual.TextStim(win=win, name='text',&amp;#10;    text='Location Score: N/A',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45,-0.24), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;colorScoreText = visual.TextStim(win=win, name='text',&amp;#10;    text='Color Score: N/A',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45,-0.28), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;OldOrNewRTText = visual.TextStim(win=win, name='text',&amp;#10;    text='Old/New RT: N/A',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45,-0.32), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;TestRTText = visual.TextStim(win=win, name='text',&amp;#10;    text='Test RT: N/A',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45,-0.36), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;StudyOnsetText = visual.TextStim(win=win, name='text', #THESE THREE CHANGE TO ONSET TIMES AT END OF EXP&amp;#10;    text='Study Onset: N/A',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45,-0.40), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;OldOrNewOnsetText = visual.TextStim(win=win, name='text', #THESE THREE CHANGE TO ONSET TIMES AT END OF EXP&amp;#10;    text='Old/New Onset: N/A',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45,-0.44), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;TestOnsetText = visual.TextStim(win=win, name='text', #THESE THREE CHANGE TO ONSET TIMES AT END OF EXP&amp;#10;    text='Test Onset: N/A',&amp;#10;    font='Arial',&amp;#10;    pos=(0.45,-0.48), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='black', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0);&amp;#10;&amp;#10;userOldOrNewText.setAutoDraw(True)&amp;#10;correctOldOrNewText.setAutoDraw(True)&amp;#10;locationDistText.setAutoDraw(True)&amp;#10;colorDistText.setAutoDraw(True)&amp;#10;locationScoreText.setAutoDraw(True)&amp;#10;colorScoreText.setAutoDraw(True)&amp;#10;OldOrNewRTText.setAutoDraw(True)&amp;#10;TestRTText.setAutoDraw(True)&amp;#10;StudyOnsetText.setAutoDraw(False)&amp;#10;OldOrNewOnsetText.setAutoDraw(False)&amp;#10;TestOnsetText.setAutoDraw(False)&amp;#10;&amp;#10;#Create arrows&amp;#10;size = 0.05&amp;#10;rightArrow = visual.ShapeStim(&amp;#10;    win=win, name='leftArrow',&amp;#10;    vertices=[[-(size, size)[0]/2.0,-(size, size)[1]/2.0], [+(size, size)[0]/2.0,-(size, size)[1]/2.0], [0,(size, size)[1]/2.0]],&amp;#10;    ori=90, pos=(0.68, -0.22),&amp;#10;    lineWidth=1, lineColor=[1,1,1], lineColorSpace='rgb',&amp;#10;    fillColor=[-0.624,-0.624,-0.624], fillColorSpace='rgb',&amp;#10;    opacity=1, depth=-22.0, interpolate=True)&amp;#10;doubleRightArrow1 = visual.ShapeStim(&amp;#10;    win=win, name='doubleleftArrow1',&amp;#10;    vertices=[[-(size, size)[0]/2.0,-(size, size)[1]/2.0], [+(size, size)[0]/2.0,-(size, size)[1]/2.0], [0,(size, size)[1]/2.0]],&amp;#10;    ori=90, pos=(0.665, -0.3),&amp;#10;    lineWidth=1, lineColor=[1,1,1], lineColorSpace='rgb',&amp;#10;    fillColor=[-0.624,-0.624,-0.624], fillColorSpace='rgb',&amp;#10;    opacity=1, depth=-22.0, interpolate=True)&amp;#10;doubleRightArrow2 = visual.ShapeStim(&amp;#10;    win=win, name='doubleleftArrow2',&amp;#10;    vertices=[[-(size, size)[0]/2.0,-(size, size)[1]/2.0], [+(size, size)[0]/2.0,-(size, size)[1]/2.0], [0,(size, size)[1]/2.0]],&amp;#10;    ori=90, pos=(0.695, -0.3),&amp;#10;    lineWidth=1, lineColor=[1,1,1], lineColorSpace='rgb',&amp;#10;    fillColor=[-0.624,-0.624,-0.624], fillColorSpace='rgb',&amp;#10;    opacity=1, depth=-22.0, interpolate=True)&amp;#10;&amp;#10;leftArrow = visual.ShapeStim(&amp;#10;    win=win, name='rightArrow',&amp;#10;    vertices=[[-(size, size)[0]/2.0,-(size, size)[1]/2.0], [+(size, size)[0]/2.0,-(size, size)[1]/2.0], [0,(size, size)[1]/2.0]],&amp;#10;    ori=-90, pos=(-0.68, -0.22),&amp;#10;    lineWidth=1, lineColor=[1,1,1], lineColorSpace='rgb',&amp;#10;    fillColor=[-0.624,-0.624,-0.624], fillColorSpace='rgb',&amp;#10;    opacity=1, depth=-22.0, interpolate=True)&amp;#10;doubleLeftArrow1 = visual.ShapeStim(&amp;#10;    win=win, name='doublerightArrow1',&amp;#10;    vertices=[[-(size, size)[0]/2.0,-(size, size)[1]/2.0], [+(size, size)[0]/2.0,-(size, size)[1]/2.0], [0,(size, size)[1]/2.0]],&amp;#10;    ori=-90, pos=(-0.665, -0.3),&amp;#10;    lineWidth=1, lineColor=[1,1,1], lineColorSpace='rgb',&amp;#10;    fillColor=[-0.624,-0.624,-0.624], fillColorSpace='rgb',&amp;#10;    opacity=1, depth=-22.0, interpolate=True)&amp;#10;doubleLeftArrow2 = visual.ShapeStim(&amp;#10;    win=win, name='doublerightArrow2',&amp;#10;    vertices=[[-(size, size)[0]/2.0,-(size, size)[1]/2.0], [+(size, size)[0]/2.0,-(size, size)[1]/2.0], [0,(size, size)[1]/2.0]],&amp;#10;    ori=-90, pos=(-0.695, -0.3),&amp;#10;    lineWidth=1, lineColor=[1,1,1], lineColorSpace='rgb',&amp;#10;    fillColor=[-0.624,-0.624,-0.624], fillColorSpace='rgb',&amp;#10;    opacity=1, depth=-22.0, interpolate=True)&amp;#10;&amp;#10;&amp;#10;leftArrow.setAutoDraw(True)&amp;#10;doubleLeftArrow1.setAutoDraw(True)&amp;#10;doubleLeftArrow2.setAutoDraw(True)&amp;#10;&amp;#10;rightArrow.setAutoDraw(True)&amp;#10;doubleRightArrow1.setAutoDraw(True)&amp;#10;doubleRightArrow2.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if dataFileReady:&amp;#10;    if sortBy == 1:&amp;#10;        sortedCurrentStimuli = studyArray[currentStimuli]&amp;#10;    elif sortBy == 2:&amp;#10;        sortedCurrentStimuli = oldornewArray[currentStimuli]&amp;#10;    else:&amp;#10;        sortedCurrentStimuli = currentStimuli&amp;#10;    #Set Tabs Auto Draw to False&amp;#10;    if slideOnCurrent:&amp;#10;        sortByText.setAutoDraw(True)&amp;#10;        if sortBy == 1:&amp;#10;            text.setText('Stimuli ' + str(currentStimuli+1) + ' of ' + str(studyStim))&amp;#10;            if currentStimuli+1 &lt; studyStim and currentStimuli+1 &gt;= 1:&amp;#10;                enableRight = True&amp;#10;                enableFarRight = True&amp;#10;            else:&amp;#10;                enableRight = False&amp;#10;                enableFarRight = False&amp;#10;            if currentStimuli+1 &lt;= studyStim and currentStimuli+1 &gt; 1:&amp;#10;                enableLeft = True&amp;#10;                enableFarLeft = True&amp;#10;            else:&amp;#10;                enableLeft = False&amp;#10;                enableFarLeft = False&amp;#10;        elif sortBy == 2:&amp;#10;            text.setText('Stimuli ' + str(currentStimuli+1) + ' of ' + str(testStim))&amp;#10;            if currentStimuli+1 &lt; testStim and currentStimuli+1 &gt;= 1:&amp;#10;                enableRight = True&amp;#10;                enableFarRight = True&amp;#10;            else:&amp;#10;                enableRight = False&amp;#10;                enableFarRight = False&amp;#10;            if currentStimuli+1 &lt;= testStim and currentStimuli+1 &gt; 1:&amp;#10;                enableLeft = True&amp;#10;                enableFarLeft = True&amp;#10;            else:&amp;#10;                enableLeft = False&amp;#10;                enableFarLeft = False&amp;#10;        else:&amp;#10;            text.setText('Stimuli ' + str(currentStimuli+1) + ' of ' + str(studyStim))&amp;#10;            if currentStimuli+1 &lt; studyStim and currentStimuli+1 &gt;= 1:&amp;#10;                enableRight = True&amp;#10;                enableFarRight = True&amp;#10;            else:&amp;#10;                enableRight = False&amp;#10;                enableFarRight = False&amp;#10;            if currentStimuli+1 &lt;= studyStim and currentStimuli+1 &gt; 1:&amp;#10;                enableLeft = True&amp;#10;                enableFarLeft = True&amp;#10;            else:&amp;#10;                enableLeft = False&amp;#10;                enableFarLeft = False&amp;#10;    else:&amp;#10;        text.setText('Data Is Ready')&amp;#10;    Overview.setAutoDraw(True)&amp;#10;    Current.setAutoDraw(True)&amp;#10;    selector.setAutoDraw(True)&amp;#10;    if slideOnCurrent:&amp;#10;        stimuli.setImage(thisdir + '/Stimuli/' + str(Stimuli[sortedCurrentStimuli][0]) + '.png')&amp;#10;        stimuli.setAutoDraw(True)&amp;#10;        correctColorShape.setAutoDraw(True)&amp;#10;        correctColorCircle.setAutoDraw(True)&amp;#10;        userColorShape.setAutoDraw(True)&amp;#10;        userColorCircle.setAutoDraw(True)&amp;#10;        correctColorText.setAutoDraw(True)&amp;#10;        userColorText.setAutoDraw(True)&amp;#10;        correctLocationText.setAutoDraw(True)&amp;#10;        userLocationText.setAutoDraw(True)&amp;#10;        correctLocationKey.setAutoDraw(True)&amp;#10;        userLocationKey.setAutoDraw(True)&amp;#10;        setCurrent()&amp;#10;    correctLocationDot.setAutoDraw(True)&amp;#10;    userLocationDot.setAutoDraw(True)&amp;#10;elif not isDone:&amp;#10;    #Set Tabs Auto Draw to False&amp;#10;    Overview.setAutoDraw(False)&amp;#10;    Current.setAutoDraw(False)&amp;#10;    selector.setAutoDraw(False)&amp;#10;&amp;#10;keys = event.getKeys()&amp;#10;if keys:&amp;#10;    thekey = keys[0]&amp;#10;    if thekey == 'escape':&amp;#10;        core.quit()&amp;#10;    if thekey == 'left' and shift and enableFarLeft:&amp;#10;        currentStimuli = 1&amp;#10;    if thekey == 'right' and shift and enableFarRight:&amp;#10;        if sortBy == 2:&amp;#10;            currentStimuli = testStim-2&amp;#10;        else:&amp;#10;            currentStimuli = studyStim-2&amp;#10;    if thekey == 'left' and enableLeft and slideOnCurrent:&amp;#10;        if not isDone:&amp;#10;            isOnNewStim = False&amp;#10;        else:&amp;#10;            currentStimuli += -1&amp;#10;    if thekey == 'right' and enableRight and slideOnCurrent:&amp;#10;        if not isDone:&amp;#10;            isOnNewStim = True&amp;#10;        else:&amp;#10;            currentStimuli += 1&amp;#10;    if thekey == 'space' and dataFileReady:&amp;#10;        slide()&amp;#10;    if thekey == 'lshift':&amp;#10;        shift = True&amp;#10;    else:&amp;#10;        shift = False&amp;#10;&amp;#10;if mouse.isPressedIn(Current) and not slideOnCurrent and dataFileReady:&amp;#10;    slide()&amp;#10;elif mouse.isPressedIn(Overview) and slideOnCurrent and dataFileReady:&amp;#10;    slide()&amp;#10;&amp;#10;if mouse.isPressedIn(sortByText) and slideOnCurrent and dataFileReady and not trayIsOpen and not trayIsClicked:&amp;#10;    trayShape.setAutoDraw(True)&amp;#10;    sortStudyText.setAutoDraw(True)&amp;#10;    sortOldornewText.setAutoDraw(True)&amp;#10;    sortTestText.setAutoDraw(True)&amp;#10;    trayIsOpen = True&amp;#10;    trayIsClicked = True&amp;#10;elif mouse.isPressedIn(sortByText) and slideOnCurrent and dataFileReady and trayIsOpen and not trayIsClicked:&amp;#10;    sortStudyText.setAutoDraw(False)&amp;#10;    sortOldornewText.setAutoDraw(False)&amp;#10;    sortTestText.setAutoDraw(False)&amp;#10;    trayShape.setAutoDraw(False)&amp;#10;    trayIsOpen = False&amp;#10;    trayIsClicked = True&amp;#10;elif mouse.isPressedIn(sortStudyText) and not trayIsClicked and slideOnCurrent and dataFileReady and trayIsOpen:&amp;#10;    sortBy = 1&amp;#10;    sortByText.setText('Sort By: Study')&amp;#10;    sortStudyText.setAutoDraw(False)&amp;#10;    sortOldornewText.setAutoDraw(False)&amp;#10;    sortTestText.setAutoDraw(False)&amp;#10;    trayShape.setAutoDraw(False)&amp;#10;    trayIsOpen = False&amp;#10;    currentStimuli = 0&amp;#10;elif mouse.isPressedIn(sortOldornewText) and not trayIsClicked and slideOnCurrent and dataFileReady and trayIsOpen and not skipOldOrNew:&amp;#10;    sortBy = 2&amp;#10;    sortByText.setText('Sort By: Old/New')&amp;#10;    sortStudyText.setAutoDraw(False)&amp;#10;    sortOldornewText.setAutoDraw(False)&amp;#10;    sortTestText.setAutoDraw(False)&amp;#10;    trayShape.setAutoDraw(False)&amp;#10;    trayIsOpen = False&amp;#10;    currentStimuli = 0&amp;#10;elif mouse.isPressedIn(sortTestText) and not trayIsClicked and slideOnCurrent and dataFileReady and trayIsOpen:&amp;#10;    sortBy = 3&amp;#10;    sortByText.setText('Sort By: Test')&amp;#10;    sortStudyText.setAutoDraw(False)&amp;#10;    sortOldornewText.setAutoDraw(False)&amp;#10;    sortTestText.setAutoDraw(False)&amp;#10;    trayShape.setAutoDraw(False)&amp;#10;    trayIsOpen = False&amp;#10;    currentStimuli = 0&amp;#10;elif not mouse.isPressedIn(sortByText):&amp;#10;    trayIsClicked = False&amp;#10;&amp;#10;if mouse.isPressedIn(leftArrow) and enableLeft and slideOnCurrent:&amp;#10;    if not isDone:&amp;#10;        isOnNewStim = False&amp;#10;    elif scrollWaitTime == 0:&amp;#10;        currentStimuli += -1&amp;#10;    elif scrollWaitTime &gt; 15:&amp;#10;        currentStimuli += -1&amp;#10;    scrollWaitTime += 1&amp;#10;elif mouse.isPressedIn(rightArrow) and enableRight and slideOnCurrent:&amp;#10;    if not isDone:&amp;#10;        isOnNewStim = True&amp;#10;    elif scrollWaitTime == 0:&amp;#10;        currentStimuli += 1&amp;#10;    elif scrollWaitTime &gt; 15:&amp;#10;        currentStimuli += 1&amp;#10;    scrollWaitTime += 1&amp;#10;else:&amp;#10;    scrollWaitTime = 0&amp;#10;&amp;#10;if mouse.isPressedIn(doubleLeftArrow1) and mouse.isPressedIn(doubleLeftArrow2) or mouse.isPressedIn(doubleLeftArrow1) or mouse.isPressedIn(doubleLeftArrow2):&amp;#10;    if enableLeft and slideOnCurrent and dataFileReady:&amp;#10;        currentStimuli = 0&amp;#10;elif mouse.isPressedIn(doubleRightArrow1) and mouse.isPressedIn(doubleRightArrow2) or mouse.isPressedIn(doubleRightArrow1) or mouse.isPressedIn(doubleRightArrow2):&amp;#10;    if enableRight and slideOnCurrent and dataFileReady:&amp;#10;        if sortBy == 2:&amp;#10;            currentStimuli = testStim-1&amp;#10;        else:&amp;#10;            currentStimuli = studyStim-1&amp;#10;&amp;#10;if mouse.isPressedIn(timeLeft):&amp;#10;    if debugTime and not mousePressed:&amp;#10;        debugTime = False&amp;#10;    elif not debugTime and not mousePressed:&amp;#10;        debugTime = True&amp;#10;    mousePressed = True&amp;#10;else:&amp;#10;    mousePressed = False&amp;#10;&amp;#10;if firstRun == False:&amp;#10;    if not os.path.exists(thisdir + '/' + experiment + '/live/'+ participant + '/live' + str(fileNum-1) + '.csv'):&amp;#10;        #reset everything&amp;#10;        if not slideOnCurrent:&amp;#10;            slide()&amp;#10;            print('reset slide')&amp;#10;        fileNum = 1&amp;#10;        loadingpercent = 0&amp;#10;        loadingpercent2 = 0&amp;#10;        loadFinal = 0&amp;#10;        loadFinal2 = 0&amp;#10;        firstRun = True #This var turns off in top of code&amp;#10;        realFirstRun = True #This one turns off at bottom&amp;#10;        isDone = False&amp;#10;        isAborted = False&amp;#10;        isOnCurrent = True #If live program is on the current part of the experiment&amp;#10;        soundIsPlaying = False&amp;#10;        oneMinSoundIsPlaying = False&amp;#10;        LoadingBar.setColor([-0.184,0.365,1.000],'rgb')&amp;#10;        LoadingBar2.setColor([-0.184,0.365,1.000],'rgb')&amp;#10;        statusText.setText('Status: In Progress')&amp;#10;        statusText.setColor('green')&amp;#10;        Stimuli = np.array([])&amp;#10;        studyArray = []&amp;#10;        oldornewArray = []&amp;#10;        testArray = []&amp;#10;        mousePressed = False #If mouse is pressed in. Used for current time&amp;#10;        hasDoneTimeSet = False #See if it has gone through the time set that calculates the live time&amp;#10;        timeLeft.setAutoDraw(True)&amp;#10;        endTime.setAutoDraw(True)&amp;#10;        enableRight = False #Arrow keys&amp;#10;        enableLeft = False&amp;#10;        enableFarRight = False&amp;#10;        enableFarLeft = False&amp;#10;        isOnNewStim = True&amp;#10;        userOldOrNewText.setText('User: N/A')&amp;#10;        correctOldOrNewText.setText('Correct: N/A')&amp;#10;        locationDistText.setText('Location Dist: N/A')&amp;#10;        colorDistText.setText('Color Rad Dist: N/A')&amp;#10;        locationScoreText.setText('Location Score: N/A')&amp;#10;        colorScoreText.setText('Color Score: N/A')&amp;#10;        OldOrNewRTText.setText('Old/New RT: N/A')&amp;#10;        TestRTText.setText('Test RT: N/A')&amp;#10;        StudyOnsetText.setText('Study Onset: N/A')&amp;#10;        OldOrNewOnsetText.setText('Old/New Onset: N/A')&amp;#10;        TestOnsetText.setText('Test Onset: N/A')&amp;#10;        StudyOnsetText.setAutoDraw(False)&amp;#10;        OldOrNewOnsetText.setAutoDraw(False)&amp;#10;        TestOnsetText.setAutoDraw(False)&amp;#10;        correctColorCircle.setColor([0,0,1])&amp;#10;        correctLocationDot.setPos((-.15,-0.08))&amp;#10;        userColorCircle.setColor([0,0,1])&amp;#10;        userLocationDot.setPos((0.065,-0.08)) #Resets color and location for when you switch to newest&amp;#10;        stimuli.setImage('None')&amp;#10;        dataFileReady = False&amp;#10;        sortStudyText.setAutoDraw(False)&amp;#10;        sortOldornewText.setAutoDraw(False)&amp;#10;        sortTestText.setAutoDraw(False)&amp;#10;        sortByText.setAutoDraw(False)&amp;#10;        trayShape.setAutoDraw(False)&amp;#10;        Overview.setAutoDraw(False)&amp;#10;        Current.setAutoDraw(False)&amp;#10;        selector.setAutoDraw(False)&amp;#10;        trayIsOpen = False #If the tray is open or not&amp;#10;        trayIsClicked = False #If tray is currently being clicked&amp;#10;        sortBy = 3 #1 is study, 2 is Old/New, 3 is Test&amp;#10;        sortedCurrentStimuli = 0 #The current stimuli after it's been sorted&amp;#10;        scrollWaitTime = 0 #Waits a certain amount of time before scrolling fast&amp;#10;        timeLeft.setColor('black')&amp;#10;        time.sleep(2)&amp;#10;&amp;#10;if os.path.exists(thisdir + '/' + experiment + '/data/'+ participant + '/sub_' + participant + '_PACO' + experiment + '_test.csv') and isDone and not dataFileReady:&amp;#10;    with open (thisdir + '/' + experiment + '/data/'+ participant + '/sub_' + participant + '_PACO' + experiment + '_test.csv', 'r', encoding='utf-8') as csv_file:&amp;#10;        csv_reader = csv.reader(csv_file)&amp;#10;        firstTimeRun = 0&amp;#10;        for line in csv_reader:&amp;#10;            #print(line)&amp;#10;            if firstTimeRun == 0:&amp;#10;                firstTimeRun = 1&amp;#10;            elif firstTimeRun == 1:&amp;#10;                Stimuli = np.array([line])&amp;#10;                firstTimeRun = 2&amp;#10;                amountOfStim = 1&amp;#10;            else:&amp;#10;                Stimuli = np.append(Stimuli, [line], axis = 0)&amp;#10;                amountOfStim += 1&amp;#10;    print(Stimuli)&amp;#10;    #print(Stimuli[1][1]) #Start getting stimuli at row 0&amp;#10;    #Set Tabs Auto Draw to False&amp;#10;    Overview.setAutoDraw(True)&amp;#10;    Current.setAutoDraw(True)&amp;#10;    selector.setAutoDraw(True)&amp;#10;    sortByText.setAutoDraw(True)&amp;#10;    dataFileReady = True&amp;#10;    if not skipOldOrNew:&amp;#10;        for i in range(amountOfStim): #For each stimuli&amp;#10;            tempNum = 0&amp;#10;            while Stimuli[tempNum][2] != str(i): #Find the coordinate (tempNum) to the order&amp;#10;                tempNum += 1&amp;#10;            oldornewArray.append(tempNum)&amp;#10;        print(oldornewArray)&amp;#10;    for i in range(amountOfStim): #For each stimuli&amp;#10;        tempNum = 0&amp;#10;        while Stimuli[tempNum][3] != str(i) and Stimuli[tempNum][3] != 'N/A': #Find the coordinate (tempNum) to the order&amp;#10;            tempNum += 1&amp;#10;        if Stimuli[tempNum][3] != 'N/A':&amp;#10;            studyArray.append(tempNum)&amp;#10;    print(studyArray)&amp;#10;    text.setText('Data Is Ready')&amp;#10;    subText.setText('To Exit Press Esc')&amp;#10;    loadFinal = 100&amp;#10;    loadingpercent2 = 100&amp;#10;    correctLocationText.setAutoDraw(False)&amp;#10;    correctLocationKey.setAutoDraw(False)&amp;#10;    userLocationText.setAutoDraw(False)&amp;#10;    userLocationKey.setAutoDraw(False)&amp;#10;    avgCorrectOld = 0&amp;#10;    avgCorrectNew = 0&amp;#10;    allLocationDist = []&amp;#10;    allColorDist = []&amp;#10;    allOldNewRT = []&amp;#10;    allTestRT = []&amp;#10;    avgLocationNum = 0&amp;#10;    avgColorNum = 0&amp;#10;    if experiment == 'LOCO':&amp;#10;        theFinalTime = list(Stimuli[studyStim-1][22].split(&quot;:&quot;))&amp;#10;        print(theFinalTime)&amp;#10;        for i in range(amountOfStim):&amp;#10;            if Stimuli[i][10] == 'Old' and Stimuli[i][4] == 'Old':&amp;#10;                avgCorrectOld += 1&amp;#10;            if Stimuli[i][10] == 'New' and Stimuli[i][4] == 'New':&amp;#10;                avgCorrectNew += 1&amp;#10;            if Stimuli[i, 16] != 'N/A':&amp;#10;                allLocationDist.append(float(Stimuli[i, 16]))&amp;#10;                if float(Stimuli[i, 16]) &lt;= .1:&amp;#10;                    avgLocationNum += 1&amp;#10;                elif float(Stimuli[i, 16]) &lt;= .35:&amp;#10;                    avgLocationNum += 0.5&amp;#10;            if Stimuli[i, 17] != 'N/A':&amp;#10;                allColorDist.append(int(Stimuli[i, 17]))&amp;#10;                if int(Stimuli[i, 17]) &lt;= 5:&amp;#10;                    avgColorNum += 1&amp;#10;                elif int(Stimuli[i, 17]) &lt;= 10:&amp;#10;                    avgColorNum += .5&amp;#10;            if Stimuli[i, 18] != 'N/A':&amp;#10;                allOldNewRT.append(float(Stimuli[i, 18]))&amp;#10;            if Stimuli[i, 19] != 'N/A':&amp;#10;                allTestRT.append(float(Stimuli[i, 19]))&amp;#10;        avgLocationDist = round(sum(allLocationDist)/studyStim, 5)&amp;#10;        avgColorDist = round(sum(allColorDist)/studyStim, 2)&amp;#10;    elif experiment == 'LO':&amp;#10;        theFinalTime = list(Stimuli[studyStim-1][15].split(&quot;:&quot;))&amp;#10;        for i in range(amountOfStim):&amp;#10;            if Stimuli[i][7] == 'Old' and Stimuli[i][4] == 'Old':&amp;#10;                avgCorrectOld += 1&amp;#10;            if Stimuli[i][7] == 'New' and Stimuli[i][4] == 'New':&amp;#10;                avgCorrectNew += 1&amp;#10;            if Stimuli[i, 10] != 'N/A':&amp;#10;                allLocationDist.append(float(Stimuli[i, 10]))&amp;#10;                if float(Stimuli[i, 10]) &lt;= .1:&amp;#10;                    avgLocationNum += 1&amp;#10;                elif float(Stimuli[i, 10]) &lt;= .35:&amp;#10;                    avgLocationNum += 0.5&amp;#10;            if Stimuli[i, 11] != 'N/A':&amp;#10;                allOldNewRT.append(float(Stimuli[i, 11]))&amp;#10;            if Stimuli[i, 12] != 'N/A':&amp;#10;                allTestRT.append(float(Stimuli[i, 12]))&amp;#10;        avgLocationDist = round(sum(allLocationDist)/studyStim, 5)&amp;#10;    elif experiment == 'CO':&amp;#10;        theFinalTime = list(Stimuli[studyStim-1][17].split(&quot;:&quot;))&amp;#10;        for i in range(amountOfStim):&amp;#10;            if Stimuli[i][8] == 'Old' and Stimuli[i][4] == 'Old':&amp;#10;                avgCorrectOld += 1&amp;#10;            if Stimuli[i][8] == 'New' and Stimuli[i][4] == 'New':&amp;#10;                avgCorrectNew += 1 &amp;#10;            if Stimuli[i, 12] != 'N/A':&amp;#10;                allColorDist.append(int(Stimuli[i, 12 ]))&amp;#10;                if int(Stimuli[i, 12]) &lt;= 5:&amp;#10;                    avgColorNum += 1&amp;#10;                elif int(Stimuli[i, 12]) &lt;= 10:&amp;#10;                    avgColorNum += .5&amp;#10;            if Stimuli[i, 13] != 'N/A':&amp;#10;                allOldNewRT.append(float(Stimuli[i, 13]))&amp;#10;            if Stimuli[i, 14] != 'N/A':&amp;#10;                allTestRT.append(float(Stimuli[i, 14]))&amp;#10;        avgColorDist = round(sum(allColorDist)/studyStim, 2)&amp;#10;    if experiment != 'CO':&amp;#10;        if avgLocationDist &lt;= 0.05:&amp;#10;            avgLocationScore = 'Very Good'&amp;#10;        elif avgLocationDist &lt;= 0.15:&amp;#10;            avgLocationScore = 'Good'&amp;#10;        elif avgLocationDist &lt;= 0.35:&amp;#10;            avgLocationScore = 'OK'&amp;#10;        elif avgLocationDist &lt;= 0.7:&amp;#10;            avgLocationScore = 'Bad'&amp;#10;        else:&amp;#10;            avgLocationScore = 'Very Bad'&amp;#10;    if experiment != 'LO':&amp;#10;        if avgColorDist &lt;= 5:&amp;#10;            avgColorScore = 'Good'&amp;#10;        elif avgColorDist &lt;= 10:&amp;#10;            avgColorScore = 'OK'&amp;#10;        else:&amp;#10;            avgColorScore = 'Bad'&amp;#10;    avgOldNewRT = round(sum(allOldNewRT)/testStim, 2)&amp;#10;    avgTestRT = round(sum(allTestRT)/studyStim, 2)&amp;#10;    avgOldNewCorrect = round(((avgCorrectOld + avgCorrectNew)/testStim)*100)&amp;#10;    finalScoreNum = 0&amp;#10;    if avgOldNewCorrect &gt;= 90:&amp;#10;        finalScoreNum = 1&amp;#10;    elif avgOldNewCorrect &gt;= 75:&amp;#10;        finalScoreNum = 0.5&amp;#10;    if experiment != 'CO':&amp;#10;        avgLocationCorrect = round(((avgLocationNum)/studyStim)*100)&amp;#10;        if avgLocationCorrect &gt;= 70:&amp;#10;            finalScoreNum += 1&amp;#10;        elif avgLocationCorrect &gt;= 50:&amp;#10;            finalScoreNum += 0.5&amp;#10;    if experiment != 'LO':&amp;#10;        avgColorCorrect = round(((avgColorNum)/studyStim)*100)&amp;#10;        if avgColorCorrect &gt;= 70:&amp;#10;            finalScoreNum += 1&amp;#10;        elif avgColorCorrect &gt;= 50:&amp;#10;            finalScoreNum += 0.5&amp;#10;    if not skipOldOrNew:&amp;#10;        if finalScoreNum &gt;= 2 or experiment != 'LOCO' and finalScoreNum &gt;= 1.5:&amp;#10;            finalScore = 'Good'&amp;#10;        elif finalScoreNum &gt;= 1:&amp;#10;            finalScore = 'Ok'&amp;#10;        else:&amp;#10;            finalScore = 'Bad'&amp;#10;    else:&amp;#10;        if finalScoreNum &gt;= 1.25 or experiment != 'LOCO' and finalScoreNum &gt;= 0.75:&amp;#10;            finalScore = 'Good'&amp;#10;        elif finalScoreNum &gt;= 0.35:&amp;#10;            finalScore = 'Ok'&amp;#10;        else:&amp;#10;            finalScore = 'Bad'&amp;#10;    stimuli.setAutoDraw(True)&amp;#10;    overviewScoreText.setText('Participant did ' + finalScore)&amp;#10;    if float(theFinalTime[2]) &gt;= 53: #Time error correction&amp;#10;        theFinalTime[2] = '0'&amp;#10;        theFinalTime[1] = str(int(theFinalTime[1]) + 1)&amp;#10;        if theFinalTime[1] == '60':&amp;#10;            theFinalTime[1] = '0'&amp;#10;            theFinalTime[0] = str(int(theFinalTime[0]) + 1)&amp;#10;    if int(theFinalTime[0]) &gt; 12:&amp;#10;        hour = str(int(theFinalTime[0]) - 12)&amp;#10;        ampm = 'pm'&amp;#10;    else:&amp;#10;        hour = str(theFinalTime[0])&amp;#10;        ampm = 'am'&amp;#10;    if int(theFinalTime[1]) &lt; 10:&amp;#10;        min = '0' + str(theFinalTime[1])&amp;#10;    else:&amp;#10;        min = str(theFinalTime[1])&amp;#10;    statusText.setText('Status: Completed at ' + hour + ':' + min + ampm)&amp;#10;    statusText.setColor('black')&amp;#10;    slide()&amp;#10;&amp;#10;lastFileNum = fileNum&amp;#10;if os.path.exists(thisdir + '/' + experiment + '/live/'+ participant + '/live' + str(fileNum) + '.csv'):&amp;#10;    #datafile = open('/Volumes/bamlab/Experiments/PACO/' + experiment + '/live/'+ participant + '/live' + str(fileNum) + '.csv', &quot;rb&quot;)&amp;#10;    lastThisLine = thisLine&amp;#10;    with open (thisdir + '/' + experiment + '/live/'+ participant + '/live' + str(fileNum) + '.csv', 'r', encoding='utf-8') as csv_file:&amp;#10;        csv_reader = csv.reader(csv_file)&amp;#10;        for line in csv_reader:&amp;#10;            thisLine = line&amp;#10;    if fileNum == 1:&amp;#10;        studyStim = int(thisLine[9])&amp;#10;        testStim = int(thisLine[10])&amp;#10;        if thisLine[0] == 'Practice': #If practice then count those stimuli in&amp;#10;            skipPractice = False #Not skipping practice&amp;#10;            if thisLine[11] == 'False': #This line tells the program if they are skipping old or new parts of the study&amp;#10;                skipOldOrNew = False&amp;#10;                totalstim = int(testStim) + int(studyStim)*2 + int(thisLine[5]) + 3 #Number of instruction and practice phases&amp;#10;            else:&amp;#10;                skipOldOrNew = True&amp;#10;                totalstim = int(studyStim)*2 + int(thisLine[5]) + 2 #Number of instruction and practice phases&amp;#10;        else:&amp;#10;            skipPractice = True #Is skipping practice&amp;#10;            if thisLine[11] == 'False':&amp;#10;                skipOldOrNew = False&amp;#10;                totalstim = int(testStim) + int(studyStim)*2 + 3 #Number of instruction and practice phases&amp;#10;            else:&amp;#10;                skipOldOrNew = True&amp;#10;                totalstim = int(studyStim)*2 + 2 #Number of instruction and practice phases&amp;#10;        print(totalstim) #Total stim is used for lower loading bar&amp;#10;        hour, min, sec, ampm = getTime() #Get time from function as strings&amp;#10;        startTime.setText('Start Time: ' + hour + ':' + min + ampm) #Prints current time&amp;#10;    if not dataFileReady:&amp;#10;        statusText.setText('Status: In Progress')&amp;#10;        statusText.setColor('green')&amp;#10;    #Calculate Time Difference&amp;#10;    if skipPractice and skipOldOrNew:&amp;#10;        #Skip both&amp;#10;        if fileNum &gt;= 3 + studyStim:&amp;#10;            timeDiff = testtime*(studyStim-(fileNum-studyStim-3))&amp;#10;            if timeDiff &lt; 0:&amp;#10;                timeDiff = 0&amp;#10;        else:&amp;#10;            timeDiff = testtime*studyStim&amp;#10;        section = testtime&amp;#10;        if fileNum &lt;= 2 + studyStim:&amp;#10;            timeDiff += instr7time&amp;#10;            section = instr7time&amp;#10;        if fileNum &lt;= studyStim + 1 and fileNum &gt;= 2: #If it is past the first study stim&amp;#10;            timeDiff += studytime*(studyStim-(fileNum-2))&amp;#10;            section = studytime&amp;#10;        elif fileNum &lt;= studyStim + 1: #Else just use pre-calculated data&amp;#10;            timeDiff += studytime*studyStim&amp;#10;            section = studytime&amp;#10;        if fileNum &lt;= 1:&amp;#10;            timeDiff += instr5time&amp;#10;            section = instr5time&amp;#10;    elif skipPractice and not skipOldOrNew:&amp;#10;        #Skip practice&amp;#10;        if fileNum &gt;= 4 + studyStim + testStim:&amp;#10;            timeDiff = testtime*(studyStim-(fileNum-studyStim-testStim-4)) #This needs to change to how many old images have passed&amp;#10;            if timeDiff &lt; 0:&amp;#10;                timeDiff = 0&amp;#10;        else:&amp;#10;            timeDiff = testtime*studyStim&amp;#10;        section = testtime&amp;#10;        if fileNum &lt;= 3 + studyStim + testStim:&amp;#10;            timeDiff += instr7time&amp;#10;            section = instr7time&amp;#10;        if fileNum &lt;= studyStim + testStim + 2 and fileNum &gt;= studyStim + 3: #If it is past the first oldornew stim&amp;#10;            timeDiff += oldnewtime*(testStim-(fileNum-3-studyStim))&amp;#10;            section = oldnewtime&amp;#10;        elif fileNum &lt;= studyStim + testStim + 2: #Else just use pre-calculated data&amp;#10;            timeDiff += oldnewtime*testStim&amp;#10;            section = oldnewtime&amp;#10;        if fileNum &lt;= 2 + studyStim:&amp;#10;            timeDiff += instr6time&amp;#10;            section = instr6time&amp;#10;        if fileNum &lt;= studyStim + 1 and fileNum &gt;= 2: #If it is past the first study stim&amp;#10;            timeDiff += studytime*(studyStim-(fileNum-2))&amp;#10;            section = studytime&amp;#10;        elif fileNum &lt;= studyStim + 1: #Else just use pre-calculated data&amp;#10;            timeDiff += studytime*studyStim&amp;#10;            section = studytime&amp;#10;        if fileNum &lt;= 1:&amp;#10;            timeDiff += instr5time&amp;#10;            section = instr5time&amp;#10;    elif not skipPractice and skipOldOrNew:&amp;#10;        #Skip Old Or New&amp;#10;        if fileNum &gt;= 11 + studyStim:&amp;#10;            timeDiff = testtime*(studyStim-(fileNum-studyStim-11))&amp;#10;            if timeDiff &lt; 0:&amp;#10;                timeDiff = 0&amp;#10;        else:&amp;#10;            timeDiff = testtime*studyStim&amp;#10;        section = testtime&amp;#10;        if fileNum &lt;= 10 + studyStim:&amp;#10;            timeDiff += instr7time&amp;#10;            section = instr7time&amp;#10;        if fileNum &lt;= studyStim + 9 and fileNum &gt;= 10: #If it is past the first study stim&amp;#10;            timeDiff += studytime*(studyStim-(fileNum-10))&amp;#10;            section = studytime&amp;#10;        elif fileNum &lt;= studyStim + 9: #Else just use pre-calculated data&amp;#10;            timeDiff += studytime*studyStim&amp;#10;            section = studytime&amp;#10;        if fileNum &lt;= 9:&amp;#10;            timeDiff += instr5time&amp;#10;            section = instr5time&amp;#10;        if fileNum &lt;= 8:&amp;#10;            timeDiff += practtest&amp;#10;            section = practtest&amp;#10;        if fileNum &lt;= 7:&amp;#10;            timeDiff += practtest&amp;#10;            section = practtest&amp;#10;        if fileNum &lt;= 6:&amp;#10;            timeDiff += instr4time&amp;#10;            section = instr4time&amp;#10;        if fileNum &lt;= 5:&amp;#10;            timeDiff += practstudytime&amp;#10;            section = practstudytime&amp;#10;        if fileNum &lt;= 4:&amp;#10;            timeDiff += practstudytime&amp;#10;            section = practstudytime&amp;#10;        if fileNum &lt;= 3:&amp;#10;            timeDiff += instr2time&amp;#10;            section = instr2time&amp;#10;        if fileNum &lt;= 2:&amp;#10;            timeDiff += exampletime&amp;#10;            section = exampletime&amp;#10;        if fileNum &lt;= 1:&amp;#10;            timeDiff += instr1time&amp;#10;            section = instr1time&amp;#10;    elif not skipPractice and not skipOldOrNew:&amp;#10;        #Skip nothing&amp;#10;        if fileNum &gt;= 17 + studyStim + testStim:&amp;#10;            timeDiff = testtime*(studyStim-(fileNum-studyStim-testStim-17)) #This needs to change to how many old images have passed&amp;#10;            if timeDiff &lt; 0:&amp;#10;                timeDiff = 0&amp;#10;        else:&amp;#10;            timeDiff = testtime*studyStim&amp;#10;        section = testtime&amp;#10;        if fileNum &lt;= 16 + studyStim + testStim:&amp;#10;            timeDiff += instr7time&amp;#10;            section = instr7time&amp;#10;        if fileNum &lt;= studyStim + testStim + 15 and fileNum &gt;= studyStim + 16: #If it is past the first oldornew stim&amp;#10;            timeDiff += oldnewtime*(testStim-(fileNum-16-studyStim))&amp;#10;            section = oldnewtime&amp;#10;        elif fileNum &lt;= studyStim + testStim + 15: #Else just use pre-calculated data&amp;#10;            timeDiff += oldnewtime*testStim&amp;#10;            section = oldnewtime&amp;#10;        if fileNum &lt;= 15 + studyStim:&amp;#10;            timeDiff += instr6time&amp;#10;            section = instr6time&amp;#10;        if fileNum &lt;= studyStim + 14 and fileNum &gt;= 15: #If it is past the first study stim&amp;#10;            timeDiff += studytime*(studyStim-(fileNum-15))&amp;#10;            section = studytime&amp;#10;        elif fileNum &lt;= studyStim + 14: #Else just use pre-calculated data&amp;#10;            timeDiff += studytime*studyStim&amp;#10;            section = studytime&amp;#10;        if fileNum &lt;= 14:&amp;#10;            timeDiff += instr5time&amp;#10;            section = instr5time&amp;#10;        if fileNum &lt;= 13:&amp;#10;            timeDiff += practtest&amp;#10;            section = practtest&amp;#10;        if fileNum &lt;= 12:&amp;#10;            timeDiff += practtest&amp;#10;            section = practtest&amp;#10;        if fileNum &lt;= 11:&amp;#10;            timeDiff += instr4time&amp;#10;            section = instr4time&amp;#10;        if fileNum &lt;= 10:&amp;#10;            timeDiff += practoldnew&amp;#10;            section = practoldnew&amp;#10;        if fileNum &lt;= 9:&amp;#10;            timeDiff += practoldnew&amp;#10;            section = practoldnew&amp;#10;        if fileNum &lt;= 8:&amp;#10;            timeDiff += practoldnew&amp;#10;            section = practoldnew&amp;#10;        if fileNum &lt;= 7:&amp;#10;            timeDiff += practoldnew&amp;#10;            section = practoldnew&amp;#10;        if fileNum &lt;= 6:&amp;#10;            timeDiff += instr3time&amp;#10;            section = instr3time&amp;#10;        if fileNum &lt;= 5:&amp;#10;            timeDiff += practstudytime&amp;#10;            section = practstudytime&amp;#10;        if fileNum &lt;= 4:&amp;#10;            timeDiff += practstudytime&amp;#10;            section = practstudytime&amp;#10;        if fileNum &lt;= 3:&amp;#10;            timeDiff += instr2time&amp;#10;            section = instr2time&amp;#10;        if fileNum &lt;= 2:&amp;#10;            timeDiff += exampletime&amp;#10;            section = exampletime&amp;#10;        if fileNum &lt;= 1:&amp;#10;            timeDiff += instr1time&amp;#10;            section = instr1time&amp;#10;    fileNum += 1 #Increase number on end of file&amp;#10;    firstRun = False #Not first run anymore&amp;#10;elif firstRun:&amp;#10;    text.setText('Experiment has not started')&amp;#10;elif os.path.exists(thisdir + '/' + experiment + '/live/'+ participant + '/livelive.csv') and isDone == False:&amp;#10;    isAborted = True&amp;#10;    hour, min, sec, ampm = getTime()&amp;#10;    statusText.setText('Status: Aborted at ' + hour + ':' + min)&amp;#10;    statusText.setColor('red')&amp;#10;    LoadingBar.setColor('red')&amp;#10;    LoadingBar2.setColor('red')&amp;#10;    enableLeft = False&amp;#10;    enableRight = False&amp;#10;    userOldOrNewText.setText('User: N/A')&amp;#10;    correctOldOrNewText.setText('Correct: N/A')&amp;#10;    locationDistText.setText('Location Dist: N/A')&amp;#10;    colorDistText.setText('Color Rad Dist: N/A')&amp;#10;    locationScoreText.setText('Location Score: N/A')&amp;#10;    colorScoreText.setText('Color Score: N/A')&amp;#10;    OldOrNewRTText.setText('Old/New RT: N/A')&amp;#10;    TestRTText.setText('Test RT: N/A')&amp;#10;    StudyOnsetText.setText('Study Onset: N/A')&amp;#10;    OldOrNewOnsetText.setText('Old/New Onset: N/A')&amp;#10;    TestOnsetText.setText('Test Onset: N/A')&amp;#10;    if not soundIsPlaying:&amp;#10;        win.callOnFlip(abortSound.play)  # screen flip&amp;#10;        soundIsPlaying = True&amp;#10;&amp;#10;if lastFileNum == fileNum or isDone == True:&amp;#10;    isOnCurrent = True&amp;#10;&amp;#10;#Update Loading Bar&amp;#10;LoadingBar.setSize((loadingpercent/50, 1), log=False)&amp;#10;LoadingBar.setPos(((loadingpercent/200)-.5, .26))&amp;#10;percentText.text = str(round(loadingpercent)) + '% Section'&amp;#10;&amp;#10;LoadingBar2.setSize((loadingpercent2/50, 1), log=False)&amp;#10;LoadingBar2.setPos(((loadingpercent2/200)-.5, .14))&amp;#10;percentText2.text = str(round(loadingpercent2)) + '% Total'&amp;#10;&amp;#10;if thisLine[0] == 'Done':&amp;#10;    isDone = True&amp;#10;&amp;#10;if firstRun == False and isDone == False and isAborted == False:&amp;#10;    loadFinal = 100/int(thisLine[5])*(int(thisLine[4])-1) #Minus one to make it start at 0&amp;#10;    loadFinal2 = 100/int(totalstim)*(fileNum - 2) #Why -2? It works but idk why&amp;#10;    text.setText('Participant is on ' + thisLine[0] + ' Phase')&amp;#10;    subText.setText(thisLine[1] + ' ' + thisLine[2] + ' of ' + thisLine[3])&amp;#10;    currentTime = datetime.datetime.now()&amp;#10;    hourwhengotdiff = currentTime.hour&amp;#10;    minwhengotdiff = currentTime.minute&amp;#10;    secwhengotdiff = currentTime.second&amp;#10;    if hourwhengotdiff &gt;= int(thisLine[6]):&amp;#10;        hourdiff = hourwhengotdiff - int(thisLine[6])&amp;#10;    else:&amp;#10;        hourdiff = 1&amp;#10;    mindiff = minwhengotdiff - int(thisLine[7])&amp;#10;    if mindiff &lt; 0:&amp;#10;        mindiff = 60 + mindiff&amp;#10;        hourdiff = hourdiff-1&amp;#10;    mindiff += 60*hourdiff&amp;#10;    secdiff = secwhengotdiff - int(thisLine[8])&amp;#10;    if secdiff &lt; 0:&amp;#10;        secdiff = 60 + secdiff&amp;#10;        mindiff = mindiff-1&amp;#10;    secdiff += 60*mindiff&amp;#10;    if secdiff &lt; section*2 and timeleft &gt; timeDiff - secdiff: #Change 2 to change how many secs it can go over before stopping countdown temp&amp;#10;        timeleft = timeDiff - secdiff&amp;#10;        hasDoneTimeSet = True&amp;#10;    elif isOnCurrent and not hasDoneTimeSet:&amp;#10;        timeleft = timeDiff&amp;#10;    if timeleft &lt; 0:&amp;#10;        timeleft = 0&amp;#10;        timeLeft.setColor('black')&amp;#10;    timeleftmins = round(timeleft/60)&amp;#10;    if isOnCurrent: #Waits until it's on the current one to show&amp;#10;        if timeleftmins == 1 and not debugTime:&amp;#10;            timeLeft.setText('Aprox Time Left: ' + str(timeleftmins) +' min')&amp;#10;            timeLeft.setColor('red')&amp;#10;            if not oneMinSoundIsPlaying:&amp;#10;                win.callOnFlip(oneMinSound.play)&amp;#10;                oneMinSoundIsPlaying = True&amp;#10;        elif timeleftmins &lt; 1 or debugTime:&amp;#10;            if timeleft == 1:&amp;#10;                timeLeft.setText('Aprox Time Left: ' + str(timeleft) +' second')&amp;#10;            else:&amp;#10;                timeLeft.setText('Aprox Time Left: ' + str(timeleft) +' seconds')&amp;#10;        else:&amp;#10;            timeLeft.setText('Aprox Time Left: ' + str(timeleftmins) +' mins')&amp;#10;        endtimemin = (int((timeleft + secwhengotdiff)/60))+minwhengotdiff #Int makes it round the float down to a whole number always&amp;#10;        endtimehour = int((endtimemin)/60)+hourwhengotdiff #Int makes it round the float down to a whole number always&amp;#10;        endtimemin = (endtimemin)%60 #Gets leftover mins incase study is over an hour&amp;#10;        #Get human readable and str time&amp;#10;        if endtimehour &gt; 12:&amp;#10;            thehour = str(endtimehour - 12)&amp;#10;            theampm = 'pm'&amp;#10;        else:&amp;#10;            thehour = str(endtimehour)&amp;#10;            theampm = 'am'&amp;#10;        if endtimemin &lt; 10:&amp;#10;            themin = '0' + str(endtimemin)&amp;#10;        else:&amp;#10;            themin = str(endtimemin)&amp;#10;        endTime.setText('Aprox End Time: ' + thehour + ':' + themin + theampm)&amp;#10;elif isDone and not dataFileReady:&amp;#10;    text.setText('Participant is complete')&amp;#10;    subText.setText('Waiting for Data File...')&amp;#10;    hour, min, sec, ampm = getTime()&amp;#10;    statusText.setText('Status: Completed at ' + hour + ':' + min + ampm)&amp;#10;    statusText.setColor('black')&amp;#10;    timeLeft.setAutoDraw(False)&amp;#10;    endTime.setAutoDraw(False)&amp;#10;    timeLeft.setColor('black')&amp;#10;    enableLeft = False&amp;#10;    enableRight = False&amp;#10;    userOldOrNewText.setText('User: N/A')&amp;#10;    correctOldOrNewText.setText('Correct: N/A')&amp;#10;    locationDistText.setText('Location Dist: N/A')&amp;#10;    colorDistText.setText('Color Rad Dist: N/A')&amp;#10;    locationScoreText.setText('Location Score: N/A')&amp;#10;    colorScoreText.setText('Color Score: N/A')&amp;#10;    OldOrNewRTText.setText('Old/New RT: N/A')&amp;#10;    TestRTText.setText('Test RT: N/A')&amp;#10;    StudyOnsetText.setText('Study Onset: N/A')&amp;#10;    OldOrNewOnsetText.setText('Old/New Onset: N/A')&amp;#10;    TestOnsetText.setText('Test Onset: N/A')&amp;#10;    correctColorCircle.setColor([0,0,1])&amp;#10;    correctLocationDot.setPos((-.15,-0.08))&amp;#10;    userColorCircle.setColor([0,0,1])&amp;#10;    userLocationDot.setPos((0.065,-0.08)) &amp;#10;    if not soundIsPlaying and not dataFileReady:&amp;#10;        win.callOnFlip(completeSound.play)  # screen flip&amp;#10;        soundIsPlaying = True&amp;#10;    loadingpercent += loadFinal/50&amp;#10;    if loadingpercent &gt; 100:&amp;#10;        loadingpercent = 100&amp;#10;    loadingpercent2 += loadFinal2/50&amp;#10;    if loadingpercent2 &gt; 100:&amp;#10;        loadingpercent2 = 100&amp;#10;elif isDone:&amp;#10;    loadingpercent += loadFinal/50&amp;#10;    if loadingpercent &gt; 100:&amp;#10;        loadingpercent = 100&amp;#10;    loadingpercent2 += loadFinal2/50&amp;#10;    if loadingpercent2 &gt; 100:&amp;#10;        loadingpercent2 = 100&amp;#10;    StudyOnsetText.setAutoDraw(True)&amp;#10;    OldOrNewOnsetText.setAutoDraw(True)&amp;#10;    TestOnsetText.setAutoDraw(True)&amp;#10;if firstRun == False and isDone == False:&amp;#10;    realFirstRun = False&amp;#10;    if thisLine[4] == '1':&amp;#10;        loadingpercent = 0&amp;#10;    if loadingpercent &lt; loadFinal:&amp;#10;        loadingpercent += loadFinal/50&amp;#10;        if loadingpercent &gt; 100:&amp;#10;            loadingpercent = 100&amp;#10;    if loadingpercent2 &lt; loadFinal2:&amp;#10;        loadingpercent2 += loadFinal2/50&amp;#10;        if loadingpercent2 &gt; 100:&amp;#10;            loadingpercent2 = 100&amp;#10;&amp;#10;#Current stats code&amp;#10;if isOnCurrent and not isDone: #Change later to [0] == 'Study'? Also make it only run once every FileNum&amp;#10;    if isOnNewStim:&amp;#10;        if thisLine[1] == 'Stimuli':&amp;#10;            stimuli.setImage(thisdir + '/Stimuli/' + thisLine[9] + '.png')&amp;#10;        else:&amp;#10;            stimuli.setImage('None')&amp;#10;    elif lastThisLine[1] == 'Stimuli':&amp;#10;        stimuli.setImage(thisdir + '/Stimuli/' + lastThisLine[9] + '.png')&amp;#10;    else:&amp;#10;        stimuli.setImage('None')&amp;#10;    if slideOnCurrent:&amp;#10;        stimuli.setAutoDraw(True)&amp;#10;    #correctLocationDot.setPos(((.888)/3.91, ((.5)/3.91)-0.248)) #Most for reference&amp;#10;    if thisLine[0] == 'Study' and thisLine[1] == 'Stimuli':&amp;#10;        if experiment != 'LO':&amp;#10;            correctColorCircle.setColor([((3.6*int(thisLine[12]))+(3.6/2)),1,1])&amp;#10;        if experiment != 'CO':&amp;#10;            correctLocationDot.setPos((float(thisLine[10])/3.91, (float(thisLine[11])/3.91)-0.248))&amp;#10;    elif thisLine[0] == 'Old/New':&amp;#10;        if isOnNewStim and thisLine[1] == 'Stimuli':&amp;#10;            enableRight = False&amp;#10;            enableLeft = True&amp;#10;            if thisLine[10] == 'Old':&amp;#10;                if experiment != 'LO':&amp;#10;                    correctColorCircle.setColor([((3.6*int(thisLine[13]))+(3.6/2)),1,1])&amp;#10;                if experiment != 'CO':&amp;#10;                    correctLocationDot.setPos((float(thisLine[11])/3.91, (float(thisLine[12])/3.91)-0.248))&amp;#10;                correctOldOrNewText.setText('Correct: Old')&amp;#10;                userOldOrNewText.setText('User: N/A')&amp;#10;                OldOrNewRTText.setText('Old/New RT: N/A')&amp;#10;            else:&amp;#10;                correctColorCircle.setColor([0,0,1])&amp;#10;                correctLocationDot.setPos((-.15,-0.08))&amp;#10;                correctOldOrNewText.setText('Correct: New')&amp;#10;                userOldOrNewText.setText('User: N/A')&amp;#10;                OldOrNewRTText.setText('Old/New RT: N/A')&amp;#10;        elif not isOnNewStim and lastThisLine[1] == 'Stimuli':&amp;#10;            enableLeft = False&amp;#10;            enableRight = True&amp;#10;            if lastThisLine[10] == 'Old':&amp;#10;                if experiment != 'LO':&amp;#10;                    correctColorCircle.setColor([((3.6*int(lastThisLine[13]))+(3.6/2)),1,1])&amp;#10;                if experiment != 'CO':&amp;#10;                    correctLocationDot.setPos((float(lastThisLine[11])/3.91, (float(lastThisLine[12])/3.91)-0.248))&amp;#10;                correctOldOrNewText.setText('Correct: Old')&amp;#10;                userOldOrNewText.setText('User: ' + thisLine[15])&amp;#10;                OldOrNewRTText.setText('Old/New RT: ' + thisLine[14] + 'sec')&amp;#10;            else:&amp;#10;                correctColorCircle.setColor([0,0,1])&amp;#10;                correctLocationDot.setPos((-.15,-0.08))&amp;#10;                correctOldOrNewText.setText('Correct: New')&amp;#10;                userOldOrNewText.setText('User: ' + thisLine[15])&amp;#10;                OldOrNewRTText.setText('Old/New RT: ' + thisLine[14] + 'sec')&amp;#10;        else:&amp;#10;            enableLeft = False&amp;#10;            enableRight = True&amp;#10;            correctColorCircle.setColor([0,0,1])&amp;#10;            correctLocationDot.setPos((-.15,-0.08))&amp;#10;    elif thisLine[0] == 'Test' and not thisLine[1] == 'Instruction':&amp;#10;        if isOnNewStim and thisLine[1] == 'Stimuli':&amp;#10;            enableRight = False&amp;#10;            enableLeft = True&amp;#10;            if experiment != 'LO':&amp;#10;                correctColorCircle.setColor([((3.6*int(thisLine[12]))+(3.6/2)),1,1])&amp;#10;            if experiment != 'CO':&amp;#10;                correctLocationDot.setPos((float(thisLine[10])/3.91, (float(thisLine[11])/3.91)-0.248))&amp;#10;            userColorCircle.setColor([0,0,1])&amp;#10;            userLocationDot.setPos((0.065,-0.08)) #Resets color and location for when you switch to newest&amp;#10;            locationDistText.setText('Location Dist: N/A')&amp;#10;            colorDistText.setText('Color Rad Dist: N/A')&amp;#10;            correctOldOrNewText.setText('Correct: Old')&amp;#10;            userOldOrNewText.setText('User: ' + thisLine[13])&amp;#10;            locationScoreText.setText('Location Score: N/A')&amp;#10;            colorScoreText.setText('Color Score: N/A')&amp;#10;            OldOrNewRTText.setText('Old/New RT: ' + thisLine[17] + 'sec')&amp;#10;            TestRTText.setText('Test RT: N/A')&amp;#10;        elif not isOnNewStim and lastThisLine[1] == 'Stimuli':&amp;#10;            enableLeft = False&amp;#10;            enableRight = True&amp;#10;            if experiment != 'LO':&amp;#10;                correctColorCircle.setColor([((3.6*int(lastThisLine[12]))+(3.6/2)),1,1])&amp;#10;                userColorCircle.setColor([((3.6*int(thisLine[16]))+(3.6/2)),1,1])&amp;#10;                #Color&amp;#10;                testrad = int(lastThisLine[12])&amp;#10;                radNum = int(thisLine[16])&amp;#10;                if abs(testrad-radNum) &gt; 50:&amp;#10;                    if testrad&gt;radNum:&amp;#10;                        colorDist = 100-testrad+radNum&amp;#10;                    else:&amp;#10;                        colorDist = 100-radNum+testrad&amp;#10;                else:&amp;#10;                    colorDist = abs(testrad-radNum)&amp;#10;                round(colorDist)&amp;#10;                colorDistText.setText('Color Rad Dist: ' + str(colorDist))&amp;#10;                #Calculate if it's the same relative color&amp;#10;                correctAproxColor = aproxColor(testrad)&amp;#10;                userAproxColor = aproxColor(radNum)&amp;#10;                if correctAproxColor[0] in userAproxColor:&amp;#10;                    colorScoreText.setText('Color Score: OK')&amp;#10;                elif len(correctAproxColor) &gt; 1:&amp;#10;                    if correctAproxColor[1] in userAproxColor:&amp;#10;                        colorScoreText.setText('Color Score: OK')&amp;#10;                    else:&amp;#10;                        colorScoreText.setText('Color Score: Bad')&amp;#10;                else:&amp;#10;                    colorScoreText.setText('Color Score: Bad')&amp;#10;                if colorDist &lt; 3:&amp;#10;                    colorScoreText.setText('Color Score: Good')&amp;#10;            if experiment != 'CO':&amp;#10;                correctLocationDot.setPos((float(lastThisLine[10])/3.91, (float(lastThisLine[11])/3.91)-0.248))&amp;#10;                userLocationDot.setPos((float(thisLine[14])/3.91, (float(thisLine[15])/3.91)-0.248))&amp;#10;                #Location&amp;#10;                distx = abs(float(thisLine[14])-float(lastThisLine[10])) #find the distance in x between correct and user&amp;#10;                disty = abs(float(thisLine[15])-float(lastThisLine[11])) #find the distance in y between correct and user&amp;#10;                pythDist = math.sqrt((distx*distx)+(disty*disty)) #Uses pythagorean theorem to find distance&amp;#10;                pythDist = round(pythDist,5) #Round to prevent errors&amp;#10;                locationDistText.setText('Location Dist: ' + str(pythDist))&amp;#10;                if pythDist &lt;= 0.05:&amp;#10;                    locationScoreText.setText('Location Score: Very Good')&amp;#10;                elif pythDist &lt;= 0.15:&amp;#10;                    locationScoreText.setText('Location Score: Good')&amp;#10;                elif pythDist &lt;= 0.35:&amp;#10;                    locationScoreText.setText('Location Score: OK')&amp;#10;                elif pythDist &lt;= 0.7:&amp;#10;                    locationScoreText.setText('Location Score: Bad')&amp;#10;                else:&amp;#10;                    locationScoreText.setText('Location Score: Very Bad')&amp;#10;            correctOldOrNewText.setText('Correct: Old')&amp;#10;            userOldOrNewText.setText('User: ' + lastThisLine[13])&amp;#10;            OldOrNewRTText.setText('Old/New RT: ' + lastThisLine[17] + 'sec')&amp;#10;            TestRTText.setText('Test RT: ' + thisLine[18] + 'sec')&amp;#10;        else:&amp;#10;            enableLeft = False&amp;#10;            enableRight = True&amp;#10;            correctColorCircle.setColor([0,0,1])&amp;#10;            correctLocationDot.setPos((-.15,-0.08))&amp;#10;            userColorCircle.setColor([0,0,1])&amp;#10;            userLocationDot.setPos((0.065,-0.08))&amp;#10;    if thisLine[1] == 'Stimuli':&amp;#10;        if slideOnCurrent:&amp;#10;            correctColorShape.setAutoDraw(True)&amp;#10;            correctColorCircle.setAutoDraw(True)&amp;#10;            userColorShape.setAutoDraw(True)&amp;#10;            userColorCircle.setAutoDraw(True)&amp;#10;            correctColorText.setAutoDraw(True)&amp;#10;            userColorText.setAutoDraw(True)&amp;#10;        correctLocationDot.setAutoDraw(True)&amp;#10;        userLocationDot.setAutoDraw(True)&amp;#10;        correctLocationKey.setAutoDraw(True)&amp;#10;        userLocationKey.setAutoDraw(True)&amp;#10;        correctLocationText.setAutoDraw(True)&amp;#10;        userLocationText.setAutoDraw(True)&amp;#10;elif not dataFileReady:&amp;#10;    stimuli.setImage('None')&amp;#10;    correctColorShape.setAutoDraw(False)&amp;#10;    correctColorCircle.setAutoDraw(False)&amp;#10;    userColorShape.setAutoDraw(False)&amp;#10;    userColorCircle.setAutoDraw(False)&amp;#10;    correctColorText.setAutoDraw(False)&amp;#10;    userColorText.setAutoDraw(False)&amp;#10;    correctLocationDot.setAutoDraw(False)&amp;#10;    userLocationDot.setAutoDraw(False)&amp;#10;    correctLocationKey.setAutoDraw(False)&amp;#10;    userLocationKey.setAutoDraw(False)&amp;#10;    correctLocationText.setAutoDraw(False)&amp;#10;    userLocationText.setAutoDraw(False)&amp;#10;&amp;#10;if not isOnNewStim:&amp;#10;    userLocationDot.setAutoDraw(True)&amp;#10;    userLocationKey.setAutoDraw(True)&amp;#10;    userLocationText.setAutoDraw(True)&amp;#10;elif not isDone:&amp;#10;    userLocationDot.setAutoDraw(False)&amp;#10;    userLocationKey.setAutoDraw(False)&amp;#10;    userLocationText.setAutoDraw(False)&amp;#10;&amp;#10;if not enableLeft:&amp;#10;    leftArrow.setColor([0.325,0.325,0.325])&amp;#10;elif slideOnCurrent:&amp;#10;    leftArrow.setColor([-0.624,-0.624,-0.624])&amp;#10;if not enableRight:&amp;#10;    rightArrow.setColor([0.325,0.325,0.325])&amp;#10;elif slideOnCurrent:&amp;#10;    rightArrow.setColor([-0.624,-0.624,-0.624])&amp;#10;if not enableFarLeft:&amp;#10;    doubleLeftArrow1.setColor([0.325,0.325,0.325])&amp;#10;    doubleLeftArrow2.setColor([0.325,0.325,0.325])&amp;#10;elif slideOnCurrent:&amp;#10;    doubleLeftArrow1.setColor([-0.624,-0.624,-0.624])&amp;#10;    doubleLeftArrow2.setColor([-0.624,-0.624,-0.624])&amp;#10;if not enableFarRight:&amp;#10;    doubleRightArrow1.setColor([0.325,0.325,0.325])&amp;#10;    doubleRightArrow2.setColor([0.325,0.325,0.325])&amp;#10;elif slideOnCurrent:&amp;#10;    doubleRightArrow1.setColor([-0.624,-0.624,-0.624])&amp;#10;    doubleRightArrow2.setColor([-0.624,-0.624,-0.624])&amp;#10;&amp;#10;#Check if data file is ready at start&amp;#10;if os.path.exists(thisdir + '/' + experiment + '/data/'+ participant + '/sub_' + participant + '_PACO' + experiment + '_test.csv') and not isDone and not dataFileReady and tryDataFileOnce:&amp;#10;    with open (thisdir + '/' + experiment + '/data/'+ participant + '/sub_' + participant + '_PACO' + experiment + '_test.csv', 'r', encoding='utf-8') as csv_file:&amp;#10;        csv_reader = csv.reader(csv_file)&amp;#10;        firstTimeRun = 0&amp;#10;        for line in csv_reader:&amp;#10;            #print(line)&amp;#10;            if firstTimeRun == 0:&amp;#10;                firstTimeRun = 1&amp;#10;                amountOfStim = 0&amp;#10;            elif firstTimeRun == 1:&amp;#10;                firstTimeRun = 2&amp;#10;                amountOfStim = 1&amp;#10;            else:&amp;#10;                amountOfStim += 1&amp;#10;    #print(amountOfStim)&amp;#10;    #print(testStim)&amp;#10;    if amountOfStim == testStim:&amp;#10;        isDone = True&amp;#10;tryDataFileOnce = False" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <ImageComponent name="stimuli">
        <Param name="color" updates="constant" val="$[-1.000,-1.000,-1.000]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="stimuli" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.45, -.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.3, 0.3)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="computer">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="computer.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="computer" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.35)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="text">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.07" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Participant is on practice phase" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="subText">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="subText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .333)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="statusText">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="statusText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .46)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Status: Ready" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="participantText">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="participantText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.66, .45)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="000" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="experimentText">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="experimentText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.63, .45)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="000" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="percentText">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="percentText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .21)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="0% Section" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="LoadingBackground">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[0.278,0.278,0.278]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="LoadingBackground" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .26)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(1, 0.05)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="LoadingBar">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[-0.184,0.365,1.000]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="LoadingBar" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .26)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(.5, 0.05)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="percentText2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="percentText2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.09)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="0% Total" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="LoadingBackground2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[0.278,0.278,0.278]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="LoadingBackground2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .14)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(1, 0.05)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="LoadingBar2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[-0.184,0.365,1.000]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="LoadingBar2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .14)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(.5, 0.05)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="separator">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[-0.012,-0.012,-0.012]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="separator" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(1.2, 0.005)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="startTime">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.035" valType="code"/>
        <Param name="name" updates="None" val="startTime" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.025)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="endTime">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.035" valType="code"/>
        <Param name="name" updates="None" val="endTime" valType="code"/>
        <Param name="opacity" updates="set every frame" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.42, 0.025)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="timeLeft">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.035" valType="code"/>
        <Param name="name" updates="None" val="timeLeft" valType="code"/>
        <Param name="opacity" updates="set every frame" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.42, 0.025)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Overview">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="Overview" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.06, -0.02)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Overview" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="Current">
        <Param name="color" updates="constant" val="$[-0.553,-0.553,-0.553]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="Current" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.08, -0.02)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Current" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="selector">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[-1.000,-1.000,-1.000]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="selector" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.083, -0.04)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.1, 0.005)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <MouseComponent name="mouse">
        <Param name="clickable" updates="constant" val="" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="never" valType="str"/>
        <Param name="name" updates="None" val="mouse" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="False" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="never" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="trial"/>
  </Flow>
</PsychoPy2experiment>
