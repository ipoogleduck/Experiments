<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="3.1.5">
  <Settings>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/Logs/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': ''}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="False" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[2560, 1440]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[1.000,1.000,1.000]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="PACOExample" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="test">
      <MouseComponent name="mouse1">
        <Param name="clickable" updates="constant" val="" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="never" valType="str"/>
        <Param name="name" updates="None" val="mouse1" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="False" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="never" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="DragCode">
        <Param name="Begin Experiment" updates="constant" val="#To prevent user from clicking inside the color wheel and selecting a color, noClickShape surrounds entire image, set opacity to one to see for yourself ;)&amp;#10;noClickShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,0,1], pos=(0,0), size=(0.25,0.25), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 0)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="isDragging = False #Lets other parts of experiment know that the user is dragging the stimuli&amp;#10;didFinishDrag = False #Lets some aspects of the experiment only do something once after a drag has finished&amp;#10;hasDragged = False #For preventing the user from going on until dragged&amp;#10;place = (0,0) #Place of object (Image)&amp;#10;Image.setPos(place) #Sets image to (0,0)&amp;#10;noClickShape.setPos(place) #Sets noClickShape to (0,0), see Begin Experiment for more about noClickShape&amp;#10;mousePlace = (0,0) #Place of mouse when clicked&amp;#10;mousex = 0.0 #Offset of mouse x&amp;#10;mousey = 0.0 #Offset of mouse y&amp;#10;firstDrag = True #For updating positions of mousex and mousey" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="#This whole complicated thing makes sure that the stimuli always stays on the mouse if they click on the stimuli first&amp;#10;if mouse1.isPressedIn(screenRect) and didFinishDrag == False:#ScreenRect is used to detect if mouse is pressed anywhere on screen&amp;#10;    if mouse1.isPressedIn(noClickShape): #Checks when mouse is pressed down, see Begin Experiment for more about noClickShape&amp;#10;        if isOnColor == False: #Makes sure it didn't start on the color wheel&amp;#10;            #This calculates offset of mouse from center of object (Not needed but looks better in experiment)&amp;#10;            mousePlace = mouse1.getPos()&amp;#10;            if firstDrag == True: #Only updates offset once when starting the drag&amp;#10;                mousex = mousePlace[0] - place[0] #Gets the difference between the Image place and the mouse place for x&amp;#10;                mousey = mousePlace[1] - place[1] #Gets the difference between the Image place and the mouse place for y&amp;#10;                firstDrag = False #Disables first drag&amp;#10;            place = mousePlace[0] - mousex, mousePlace[1] - mousey #Adds this onto the place of the image for more intuitive dragging&amp;#10;            Image.setPos(place) #Sets position of the image equal to the position of the mouse&amp;#10;            noClickShape.setPos(place) #Set position&amp;#10;            isDragging = True #Sets is dragging to true when the mouse starts on the object (noClickShape in this case)&amp;#10;            hasDragged = True #For preventing the user from going on until dragged&amp;#10;            win.mouseVisible = False #Hide mouse when dragging&amp;#10;    elif isDragging == True: #If the mouse started on noClickShape but isnt there right now (and still pressed down) it will update position anyway&amp;#10;        #This calculates offset of mouse from center of object (Not needed but looks better in experiment)&amp;#10;        mousePlace = mouse1.getPos()&amp;#10;        if firstDrag == True: #Only updates offset once when starting the drag&amp;#10;                mousex = mousePlace[0] - place[0] #Gets the difference between the Image place and the mouse place for x&amp;#10;                mousey = mousePlace[1] - place[1] #Gets the difference between the Image place and the mouse place for y&amp;#10;                firstDrag = False #Disables first drag&amp;#10;        place = mousePlace[0] - mousex, mousePlace[1] - mousey #Adds this onto the place of the image for more intuitive dragging&amp;#10;        Image.setPos(place) #Sets position of the image equal to the position of the mouse&amp;#10;        noClickShape.setPos(place) #Set position&amp;#10;elif didFinishDrag == True and isDragging == True: #Disables didFinishDrag for good&amp;#10;    didFinishDrag = False&amp;#10;elif isDragging == True: #This is an elif statement so will only play if others above are false&amp;#10;    didFinishDrag = True #Makes var true so it only is true for one frame&amp;#10;    isDragging = False #It is no longer dragging&amp;#10;    win.mouseVisible = True #Show mouse once your done dragging&amp;#10;    firstDrag = True #re-enables first drag again so when the first if statement plays it will update position of offset&amp;#10;else:&amp;#10;    didFinishDrag = False #Disables didFinishDrag for good&amp;#10;&amp;#10;noClickShape.draw() #Draws no click shape" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="DragCode" valType="code"/>
      </CodeComponent>
      <CodeComponent name="ColorCode">
        <Param name="Begin Experiment" updates="constant" val="from psychopy import misc #needed for color wheel&amp;#10;&amp;#10;#Creates color wheel object&amp;#10;textureRes = 64&amp;#10;&amp;#10;hsv = np.ones([textureRes,textureRes,3], dtype=float)&amp;#10;hsv[:,:,0] = np.linspace(0,360,textureRes, endpoint=False)&amp;#10;hsv[:,:,1] = 1&amp;#10;hsv[:,:,2] = 1&amp;#10;rgb = misc.hsv2rgb(hsv)&amp;#10;&amp;#10;#mask gives the fraction of the that is visible&amp;#10;mask = np.zeros([100,1])&amp;#10;mask[-10:] = 1  # 10% of the radius is 1 (visible)&amp;#10;# annoyingly with interpolate=True the mask outer edge can &amp;#10;# get blended with innermost pixel&amp;#10;&amp;#10;#texture defines colors, mask makes it have a hole in the center, angular cycles defines how many times each color will be shown, interpolate makes the colors blend together&amp;#10;stim = visual.RadialStim(win, tex=rgb, mask = mask, angularRes=256, angularCycles=1, interpolate=True, size=(.3,.3))" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="isOnColor = False #If the mouse is currently on a color&amp;#10;hasColored = False #For hiding the selectShape until you start coloring&amp;#10;stim.setPos(place)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if didFinishDrag == True: #Only updates position once after you finish dragging, otherwise experiment will lag a lot&amp;#10;    stim.setPos(place)&amp;#10;    stim.draw()&amp;#10;elif isDragging == False: #If your not dragging it won't redifine the position&amp;#10;    stim.draw()&amp;#10;&amp;#10;if mouse1.isPressedIn(screenRect):#ScreenRect is used to detect if mouse is pressed anywhere on screen&amp;#10;    if mouse1.isPressedIn(stim) and not mouse1.isPressedIn(noClickShape):#Has to be initially pressed on wheel to set to true&amp;#10;        if isDragging == False: #Also cannot be dragging&amp;#10;            hasColored = True #For hiding the selectShape until you start coloring&amp;#10;            isOnColor = True #Then will set is on color to true&amp;#10;else:&amp;#10;    isOnColor = False #If mouse is not pressed down it is not on color" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="ColorCode" valType="code"/>
      </CodeComponent>
      <CodeComponent name="SegmentCode">
        <Param name="Begin Experiment" updates="constant" val="#This creates each segment of the circle that can be used and clicked on later in the experiment&amp;#10;opac = 0 #changes opacity of segments, 0 is invisible, 1 is visible, change to 0.5? to debug&amp;#10;orimult = 3.6 #origin value is multiplied by this amount&amp;#10;visWed = (0.0, 4) #visible portion of the wedge&amp;#10;segpos = (0,0) #Position of segments&amp;#10;segSize = (4,4) #size of segments, goes along with color wheel size&amp;#10;degrees = 0 #Degrees the selectshape should be, don't change this var&amp;#10;#If you change the amount of possible segments make sure to update randomization amount in the header file as well&amp;#10;&amp;#10;#Visual wedge is set to 4 but in reality it only covers about 3.6&amp;#10;#So the origin of each segment are multiples of 3.6, 360/3.6 is 100 segments" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="segpos = (0,0) #resets position of segments&amp;#10;&amp;#10;#Defines each segment&amp;#10;rad0 = visual.RadialStim( win=win, name='rad0', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*0, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad1 = visual.RadialStim( win=win, name='rad1', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*1, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad2 = visual.RadialStim( win=win, name='rad2', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*2, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad3 = visual.RadialStim( win=win, name='rad3', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*3, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad4 = visual.RadialStim( win=win, name='rad4', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*4, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad5 = visual.RadialStim( win=win, name='rad5', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*5, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad6 = visual.RadialStim( win=win, name='rad6', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*6, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad7 = visual.RadialStim( win=win, name='rad7', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*7, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad8 = visual.RadialStim( win=win, name='rad8', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*8, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad9 = visual.RadialStim( win=win, name='rad9', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*9, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad10 = visual.RadialStim( win=win, name='rad10', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*10, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad11 = visual.RadialStim( win=win, name='rad11', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*11, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad12 = visual.RadialStim( win=win, name='rad12', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*12, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad13 = visual.RadialStim( win=win, name='rad13', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*13, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad14 = visual.RadialStim( win=win, name='rad14', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*14, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad15 = visual.RadialStim( win=win, name='rad15', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*15, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad16 = visual.RadialStim( win=win, name='rad16', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*16, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad17 = visual.RadialStim( win=win, name='rad17', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*17, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad18 = visual.RadialStim( win=win, name='rad18', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*18, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad19 = visual.RadialStim( win=win, name='rad19', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*19, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad20 = visual.RadialStim( win=win, name='rad20', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*20, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad21 = visual.RadialStim( win=win, name='rad21', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*21, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad22 = visual.RadialStim( win=win, name='rad22', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*22, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad23 = visual.RadialStim( win=win, name='rad23', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*23, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad24 = visual.RadialStim( win=win, name='rad24', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*24, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad25 = visual.RadialStim( win=win, name='rad25', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*25, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad26 = visual.RadialStim( win=win, name='rad26', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*26, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad27 = visual.RadialStim( win=win, name='rad27', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*27, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad28 = visual.RadialStim( win=win, name='rad28', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*28, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad29 = visual.RadialStim( win=win, name='rad29', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*29, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad30 = visual.RadialStim( win=win, name='rad30', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*30, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad31 = visual.RadialStim( win=win, name='rad31', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*31, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad32 = visual.RadialStim( win=win, name='rad32', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*32, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad33 = visual.RadialStim( win=win, name='rad33', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*33, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad34 = visual.RadialStim( win=win, name='rad34', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*34, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad35 = visual.RadialStim( win=win, name='rad35', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*35, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad36 = visual.RadialStim( win=win, name='rad36', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*36, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad37 = visual.RadialStim( win=win, name='rad37', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*37, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad38 = visual.RadialStim( win=win, name='rad38', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*38, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad39 = visual.RadialStim( win=win, name='rad39', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*39, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad40 = visual.RadialStim( win=win, name='rad40', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*40, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad41 = visual.RadialStim( win=win, name='rad41', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*41, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad42 = visual.RadialStim( win=win, name='rad42', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*42, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad43 = visual.RadialStim( win=win, name='rad43', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*43, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad44 = visual.RadialStim( win=win, name='rad44', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*44, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad45 = visual.RadialStim( win=win, name='rad45', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*45, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad46 = visual.RadialStim( win=win, name='rad46', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*46, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad47 = visual.RadialStim( win=win, name='rad47', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*47, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad48 = visual.RadialStim( win=win, name='rad48', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*48, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad49 = visual.RadialStim( win=win, name='rad49', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*49, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad50 = visual.RadialStim( win=win, name='rad50', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*50, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad51 = visual.RadialStim( win=win, name='rad51', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*51, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad52 = visual.RadialStim( win=win, name='rad52', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*52, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad53 = visual.RadialStim( win=win, name='rad53', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*53, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad54 = visual.RadialStim( win=win, name='rad54', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*54, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad55 = visual.RadialStim( win=win, name='rad55', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*55, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad56 = visual.RadialStim( win=win, name='rad56', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*56, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad57 = visual.RadialStim( win=win, name='rad57', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*57, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad58 = visual.RadialStim( win=win, name='rad58', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*58, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad59 = visual.RadialStim( win=win, name='rad59', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*59, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad60 = visual.RadialStim( win=win, name='rad60', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*60, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad61 = visual.RadialStim( win=win, name='rad61', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*61, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad62 = visual.RadialStim( win=win, name='rad62', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*62, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad63 = visual.RadialStim( win=win, name='rad63', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*63, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad64 = visual.RadialStim( win=win, name='rad64', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*64, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad65 = visual.RadialStim( win=win, name='rad65', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*65, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad66 = visual.RadialStim( win=win, name='rad66', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*66, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad67 = visual.RadialStim( win=win, name='rad67', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*67, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad68 = visual.RadialStim( win=win, name='rad68', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*68, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad69 = visual.RadialStim( win=win, name='rad69', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*69, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad70 = visual.RadialStim( win=win, name='rad70', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*70, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad71 = visual.RadialStim( win=win, name='rad71', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*71, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad72 = visual.RadialStim( win=win, name='rad72', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*72, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad73 = visual.RadialStim( win=win, name='rad73', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*73, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad74 = visual.RadialStim( win=win, name='rad74', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*74, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad75 = visual.RadialStim( win=win, name='rad75', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*75, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad76 = visual.RadialStim( win=win, name='rad76', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*76, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad77 = visual.RadialStim( win=win, name='rad77', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*77, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad78 = visual.RadialStim( win=win, name='rad78', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*78, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad79 = visual.RadialStim( win=win, name='rad79', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*79, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad80 = visual.RadialStim( win=win, name='rad80', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*80, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad81 = visual.RadialStim( win=win, name='rad81', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*81, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad82 = visual.RadialStim( win=win, name='rad82', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*82, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad83 = visual.RadialStim( win=win, name='rad83', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*83, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad84 = visual.RadialStim( win=win, name='rad84', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*84, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad85 = visual.RadialStim( win=win, name='rad85', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*85, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad86 = visual.RadialStim( win=win, name='rad86', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*86, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad87 = visual.RadialStim( win=win, name='rad87', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*87, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad88 = visual.RadialStim( win=win, name='rad88', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*88, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad89 = visual.RadialStim( win=win, name='rad89', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*89, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad90 = visual.RadialStim( win=win, name='rad90', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*90, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad91 = visual.RadialStim( win=win, name='rad91', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*91, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad92 = visual.RadialStim( win=win, name='rad92', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*92, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad93 = visual.RadialStim( win=win, name='rad93', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*93, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad94 = visual.RadialStim( win=win, name='rad94', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*94, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad95 = visual.RadialStim( win=win, name='rad95', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*95, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad96 = visual.RadialStim( win=win, name='rad96', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*96, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad97 = visual.RadialStim( win=win, name='rad97', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*97, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad98 = visual.RadialStim( win=win, name='rad98', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*98, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad99 = visual.RadialStim( win=win, name='rad99', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*99, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="#MARK: Detect Mouse Press On Segment&amp;#10;#Takes the multiplier (How many segments) and multiplies it by rad number&amp;#10;#Then adds half of the multiplier (to make color average)&amp;#10;if isDragging == False and isOnColor == True: #If its on a segment it will update the color of the image&amp;#10;    if mouse1.isPressedIn(rad0): #Will not set color if dragging image&amp;#10;        degrees = (orimult*0)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad1):&amp;#10;        degrees = (orimult*1)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad2):&amp;#10;        degrees = (orimult*2)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad3):&amp;#10;        degrees = (orimult*3)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad4):&amp;#10;        degrees = (orimult*4)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad5):&amp;#10;        degrees = (orimult*5)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad6):&amp;#10;        degrees = (orimult*6)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad7):&amp;#10;        degrees = (orimult*7)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad8):&amp;#10;        degrees = (orimult*8)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad9):&amp;#10;        degrees = (orimult*9)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad10):&amp;#10;        degrees = (orimult*10)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad11):&amp;#10;        degrees = (orimult*11)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad12):&amp;#10;        degrees = (orimult*12)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad13):&amp;#10;        degrees = (orimult*13)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad14):&amp;#10;        degrees = (orimult*14)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad15):&amp;#10;        degrees = (orimult*15)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad16):&amp;#10;        degrees = (orimult*16)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad17):&amp;#10;        degrees = (orimult*17)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad18):&amp;#10;        degrees = (orimult*18)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad19):&amp;#10;        degrees = (orimult*19)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad20):&amp;#10;        degrees = (orimult*20)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad21):&amp;#10;        degrees = (orimult*21)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad22):&amp;#10;        degrees = (orimult*22)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad23):&amp;#10;        degrees = (orimult*23)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad24):&amp;#10;        degrees = (orimult*24)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad25):&amp;#10;        degrees = (orimult*25)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad26):&amp;#10;        degrees = (orimult*26)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad27):&amp;#10;        degrees = (orimult*27)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad28):&amp;#10;        degrees = (orimult*28)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad29):&amp;#10;        degrees = (orimult*29)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad30):&amp;#10;        degrees = (orimult*30)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad31):&amp;#10;        degrees = (orimult*31)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad32):&amp;#10;        degrees = (orimult*32)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad33):&amp;#10;        degrees = (orimult*33)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad34):&amp;#10;        degrees = (orimult*34)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad35):&amp;#10;        degrees = (orimult*35)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad36):&amp;#10;        degrees = (orimult*36)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad37):&amp;#10;        degrees = (orimult*37)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad38):&amp;#10;        degrees = (orimult*38)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad39):&amp;#10;        degrees = (orimult*39)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad40):&amp;#10;        degrees = (orimult*40)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad41):&amp;#10;        degrees = (orimult*41)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad42):&amp;#10;        degrees = (orimult*42)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad43):&amp;#10;        degrees = (orimult*43)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad44):&amp;#10;        degrees = (orimult*44)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad45):&amp;#10;        degrees = (orimult*45)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad46):&amp;#10;        degrees = (orimult*46)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad47):&amp;#10;        degrees = (orimult*47)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad48):&amp;#10;        degrees = (orimult*48)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad49):&amp;#10;        degrees = (orimult*49)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad50):&amp;#10;        degrees = (orimult*50)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad51):&amp;#10;        degrees = (orimult*51)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad52):&amp;#10;        degrees = (orimult*52)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad53):&amp;#10;        degrees = (orimult*53)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad54):&amp;#10;        degrees = (orimult*54)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad55):&amp;#10;        degrees = (orimult*55)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad56):&amp;#10;        degrees = (orimult*56)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad57):&amp;#10;        degrees = (orimult*57)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad58):&amp;#10;        degrees = (orimult*58)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad59):&amp;#10;        degrees = (orimult*59)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad60):&amp;#10;        degrees = (orimult*60)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad61):&amp;#10;        degrees = (orimult*61)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad62):&amp;#10;        degrees = (orimult*62)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad63):&amp;#10;        degrees = (orimult*63)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad64):&amp;#10;        degrees = (orimult*64)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad65):&amp;#10;        degrees = (orimult*65)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad66):&amp;#10;        degrees = (orimult*66)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad67):&amp;#10;        degrees = (orimult*67)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad68):&amp;#10;        degrees = (orimult*68)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad69):&amp;#10;        degrees = (orimult*69)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad70):&amp;#10;        degrees = (orimult*70)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad71):&amp;#10;        degrees = (orimult*71)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad72):&amp;#10;        degrees = (orimult*72)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad73):&amp;#10;        degrees = (orimult*73)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad74):&amp;#10;        degrees = (orimult*74)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad75):&amp;#10;        degrees = (orimult*75)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad76):&amp;#10;        degrees = (orimult*76)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad77):&amp;#10;        degrees = (orimult*77)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad78):&amp;#10;        degrees = (orimult*78)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad79):&amp;#10;        degrees = (orimult*79)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad80):&amp;#10;        degrees = (orimult*80)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad81):&amp;#10;        degrees = (orimult*81)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad82):&amp;#10;        degrees = (orimult*82)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad83):&amp;#10;        degrees = (orimult*83)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad84):&amp;#10;        degrees = (orimult*84)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad85):&amp;#10;        degrees = (orimult*85)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad86):&amp;#10;        degrees = (orimult*86)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad87):&amp;#10;        degrees = (orimult*87)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad88):&amp;#10;        degrees = (orimult*88)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad89):&amp;#10;        degrees = (orimult*89)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad90):&amp;#10;        degrees = (orimult*90)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad91):&amp;#10;        degrees = (orimult*91)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad92):&amp;#10;        degrees = (orimult*92)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad93):&amp;#10;        degrees = (orimult*93)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad94):&amp;#10;        degrees = (orimult*94)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad95):&amp;#10;        degrees = (orimult*95)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad96):&amp;#10;        degrees = (orimult*96)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad97):&amp;#10;        degrees = (orimult*97)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad98):&amp;#10;        degrees = (orimult*98)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;    elif mouse1.isPressedIn(rad99):&amp;#10;        degrees = (orimult*99)+(orimult/2)&amp;#10;        Image.setColor([degrees,1,1])#sets Image hsv color&amp;#10;&amp;#10;#MARK: Update Segment Positions And Draw Them&amp;#10;if didFinishDrag == True: #This is to prevent slowness when picking up ubject to drag&amp;#10;    segpos = (place)#When it appears sets the pos equal to the current place of the object&amp;#10;    #Sets each segment position&amp;#10;    rad0.setPos(segpos)&amp;#10;    rad1.setPos(segpos)&amp;#10;    rad2.setPos(segpos)&amp;#10;    rad3.setPos(segpos)&amp;#10;    rad4.setPos(segpos)&amp;#10;    rad5.setPos(segpos)&amp;#10;    rad6.setPos(segpos)&amp;#10;    rad7.setPos(segpos)&amp;#10;    rad8.setPos(segpos)&amp;#10;    rad9.setPos(segpos)&amp;#10;    rad10.setPos(segpos)&amp;#10;    rad11.setPos(segpos)&amp;#10;    rad12.setPos(segpos)&amp;#10;    rad13.setPos(segpos)&amp;#10;    rad14.setPos(segpos)&amp;#10;    rad15.setPos(segpos)&amp;#10;    rad16.setPos(segpos)&amp;#10;    rad17.setPos(segpos)&amp;#10;    rad18.setPos(segpos)&amp;#10;    rad19.setPos(segpos)&amp;#10;    rad20.setPos(segpos)&amp;#10;    rad21.setPos(segpos)&amp;#10;    rad22.setPos(segpos)&amp;#10;    rad23.setPos(segpos)&amp;#10;    rad24.setPos(segpos)&amp;#10;    rad25.setPos(segpos)&amp;#10;    rad26.setPos(segpos)&amp;#10;    rad27.setPos(segpos)&amp;#10;    rad28.setPos(segpos)&amp;#10;    rad29.setPos(segpos)&amp;#10;    rad30.setPos(segpos)&amp;#10;    rad31.setPos(segpos)&amp;#10;    rad32.setPos(segpos)&amp;#10;    rad33.setPos(segpos)&amp;#10;    rad34.setPos(segpos)&amp;#10;    rad35.setPos(segpos)&amp;#10;    rad36.setPos(segpos)&amp;#10;    rad37.setPos(segpos)&amp;#10;    rad38.setPos(segpos)&amp;#10;    rad39.setPos(segpos)&amp;#10;    rad40.setPos(segpos)&amp;#10;    rad41.setPos(segpos)&amp;#10;    rad42.setPos(segpos)&amp;#10;    rad43.setPos(segpos)&amp;#10;    rad44.setPos(segpos)&amp;#10;    rad45.setPos(segpos)&amp;#10;    rad46.setPos(segpos)&amp;#10;    rad47.setPos(segpos)&amp;#10;    rad48.setPos(segpos)&amp;#10;    rad49.setPos(segpos)&amp;#10;    rad50.setPos(segpos)&amp;#10;    rad51.setPos(segpos)&amp;#10;    rad52.setPos(segpos)&amp;#10;    rad53.setPos(segpos)&amp;#10;    rad54.setPos(segpos)&amp;#10;    rad55.setPos(segpos)&amp;#10;    rad56.setPos(segpos)&amp;#10;    rad57.setPos(segpos)&amp;#10;    rad58.setPos(segpos)&amp;#10;    rad59.setPos(segpos)&amp;#10;    rad60.setPos(segpos)&amp;#10;    rad61.setPos(segpos)&amp;#10;    rad62.setPos(segpos)&amp;#10;    rad63.setPos(segpos)&amp;#10;    rad64.setPos(segpos)&amp;#10;    rad65.setPos(segpos)&amp;#10;    rad66.setPos(segpos)&amp;#10;    rad67.setPos(segpos)&amp;#10;    rad68.setPos(segpos)&amp;#10;    rad69.setPos(segpos)&amp;#10;    rad70.setPos(segpos)&amp;#10;    rad71.setPos(segpos)&amp;#10;    rad72.setPos(segpos)&amp;#10;    rad73.setPos(segpos)&amp;#10;    rad74.setPos(segpos)&amp;#10;    rad75.setPos(segpos)&amp;#10;    rad76.setPos(segpos)&amp;#10;    rad77.setPos(segpos)&amp;#10;    rad78.setPos(segpos)&amp;#10;    rad79.setPos(segpos)&amp;#10;    rad80.setPos(segpos)&amp;#10;    rad81.setPos(segpos)&amp;#10;    rad82.setPos(segpos)&amp;#10;    rad83.setPos(segpos)&amp;#10;    rad84.setPos(segpos)&amp;#10;    rad85.setPos(segpos)&amp;#10;    rad86.setPos(segpos)&amp;#10;    rad87.setPos(segpos)&amp;#10;    rad88.setPos(segpos)&amp;#10;    rad89.setPos(segpos)&amp;#10;    rad90.setPos(segpos)&amp;#10;    rad91.setPos(segpos)&amp;#10;    rad92.setPos(segpos)&amp;#10;    rad93.setPos(segpos)&amp;#10;    rad94.setPos(segpos)&amp;#10;    rad95.setPos(segpos)&amp;#10;    rad96.setPos(segpos)&amp;#10;    rad97.setPos(segpos)&amp;#10;    rad98.setPos(segpos)&amp;#10;    rad99.setPos(segpos)&amp;#10;elif isDragging == False and isOnColor == True: #When dragging it will dispear&amp;#10;    #Draws each segment&amp;#10;    rad0.draw()&amp;#10;    rad1.draw()&amp;#10;    rad2.draw()&amp;#10;    rad3.draw()&amp;#10;    rad4.draw()&amp;#10;    rad5.draw()&amp;#10;    rad6.draw()&amp;#10;    rad7.draw()&amp;#10;    rad8.draw()&amp;#10;    rad9.draw()&amp;#10;    rad10.draw()&amp;#10;    rad11.draw()&amp;#10;    rad12.draw()&amp;#10;    rad13.draw()&amp;#10;    rad14.draw()&amp;#10;    rad15.draw()&amp;#10;    rad16.draw()&amp;#10;    rad17.draw()&amp;#10;    rad18.draw()&amp;#10;    rad19.draw()&amp;#10;    rad20.draw()&amp;#10;    rad21.draw()&amp;#10;    rad22.draw()&amp;#10;    rad23.draw()&amp;#10;    rad24.draw()&amp;#10;    rad25.draw()&amp;#10;    rad26.draw()&amp;#10;    rad27.draw()&amp;#10;    rad28.draw()&amp;#10;    rad29.draw()&amp;#10;    rad30.draw()&amp;#10;    rad31.draw()&amp;#10;    rad32.draw()&amp;#10;    rad33.draw()&amp;#10;    rad34.draw()&amp;#10;    rad35.draw()&amp;#10;    rad36.draw()&amp;#10;    rad37.draw()&amp;#10;    rad38.draw()&amp;#10;    rad39.draw()&amp;#10;    rad40.draw()&amp;#10;    rad41.draw()&amp;#10;    rad42.draw()&amp;#10;    rad43.draw()&amp;#10;    rad44.draw()&amp;#10;    rad45.draw()&amp;#10;    rad46.draw()&amp;#10;    rad47.draw()&amp;#10;    rad48.draw()&amp;#10;    rad49.draw()&amp;#10;    rad50.draw()&amp;#10;    rad51.draw()&amp;#10;    rad52.draw()&amp;#10;    rad53.draw()&amp;#10;    rad54.draw()&amp;#10;    rad55.draw()&amp;#10;    rad56.draw()&amp;#10;    rad57.draw()&amp;#10;    rad58.draw()&amp;#10;    rad59.draw()&amp;#10;    rad60.draw()&amp;#10;    rad61.draw()&amp;#10;    rad62.draw()&amp;#10;    rad63.draw()&amp;#10;    rad64.draw()&amp;#10;    rad65.draw()&amp;#10;    rad66.draw()&amp;#10;    rad67.draw()&amp;#10;    rad68.draw()&amp;#10;    rad69.draw()&amp;#10;    rad70.draw()&amp;#10;    rad71.draw()&amp;#10;    rad72.draw()&amp;#10;    rad73.draw()&amp;#10;    rad74.draw()&amp;#10;    rad75.draw()&amp;#10;    rad76.draw()&amp;#10;    rad77.draw()&amp;#10;    rad78.draw()&amp;#10;    rad79.draw()&amp;#10;    rad80.draw()&amp;#10;    rad81.draw()&amp;#10;    rad82.draw()&amp;#10;    rad83.draw()&amp;#10;    rad84.draw()&amp;#10;    rad85.draw()&amp;#10;    rad86.draw()&amp;#10;    rad87.draw()&amp;#10;    rad88.draw()&amp;#10;    rad89.draw()&amp;#10;    rad90.draw()&amp;#10;    rad91.draw()&amp;#10;    rad92.draw()&amp;#10;    rad93.draw()&amp;#10;    rad94.draw()&amp;#10;    rad95.draw()&amp;#10;    rad96.draw()&amp;#10;    rad97.draw()&amp;#10;    rad98.draw()&amp;#10;    rad99.draw()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="SegmentCode" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="screenRect">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[-0.851,1.000,-1.000]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="screenRect" valType="code"/>
        <Param name="opacity" updates="constant" val="0" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(2, 2)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <CodeComponent name="SelectShape">
        <Param name="Begin Experiment" updates="constant" val="import math #Needed for cos and sin" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#Select shape is the selector circle that is white and behind the colored one&amp;#10;selectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,1,1], pos=(0,0), size=(0.1,0.1), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 0)&amp;#10;#Inner select shape is on top of select shape and updates it's color to the color of the part of the color wheel it is on&amp;#10;innerSelectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,1,1], pos=(0,0), size=(0.1,0.1), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 0)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if isDragging == False and hasColored == True: #Hides until you actually start selecting a color, this is separate from colorHelp in ExitCode so no interference ever occors&amp;#10;    #Explanation: Color is just hsv set to white, position on circle is calculated by, X:= origin of stimuli x position + cos of the angle in radians (cos funtion only takes radians) * the radius (circumference/2) and then subtracting a fourth of the radius of the color picker circle to make it in the middle of the color wheel&amp;#10;    selectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,0,1], pos=(place[0]+(math.cos(math.radians(-degrees+90))*(.15-(0.03/4))), place[1]+(math.sin(math.radians(-degrees+90))*(.15-(0.03/4)))), size=(0.03,0.03), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 1)&amp;#10;    #Explanation: Same as above except the color is set to the color wheel segment, and to get it centered I devided by 3.4 because for some reason 4 didn't center it correctly, but 3.4 centers it fine so just leaving it like that is ok&amp;#10;    innerSelectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[degrees,1,1], pos=(place[0]+(math.cos(math.radians(-degrees+90))*(.15-(0.025/3.4))), place[1]+(math.sin(math.radians(-degrees+90))*(.15-(0.025/3.4)))), size=(0.025,0.025), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 1)&amp;#10;    #Draws both shapes&amp;#10;    selectShape.draw()&amp;#10;    innerSelectShape.draw()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="SelectShape" valType="code"/>
      </CodeComponent>
      <CodeComponent name="SaveCode">
        <Param name="Begin Experiment" updates="constant" val="import datetime #For saving raction times&amp;#10;&amp;#10;currentTest = 0&amp;#10;testrad = 0 #Requires it to be defined at the beginning for some reason&amp;#10;&amp;#10;testOnset = -1&amp;#10;&amp;#10;def aproxColor(num): #1 = red, 2 = orange, 3 = yellow, 4 = green, 5 = aqua, 6 = blue, 7 = purple, and 8 = pink. 2 diget numbers are a combo of both&amp;#10;    word = []&amp;#10;    if num &gt;= 93 or num &lt;= 5:&amp;#10;        word.append('Red')&amp;#10;    if num &gt;= 98 or num &lt;= 8:&amp;#10;        word.append('Orange')&amp;#10;    if num &gt;= 6 and num &lt;= 20:&amp;#10;        word.append('Yellow')&amp;#10;    if num &gt;= 16 and num &lt;= 45:&amp;#10;        word.append('Green')&amp;#10;    if num &gt;= 37 and num &lt;= 62:&amp;#10;        word.append('Aqua')&amp;#10;    if num &gt;= 50 and num &lt;= 74:&amp;#10;        word.append('Blue')&amp;#10;    if num &gt;= 72 and num &lt;= 81:&amp;#10;        word.append('Purple')&amp;#10;    if num &gt;= 77 and num &lt;= 96:&amp;#10;        word.append('Pink')&amp;#10;    return word" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="then = datetime.datetime.now() #Saves time they begun the section&amp;#10;nowtime = datetime.datetime.now().time() #Saves time they begun the section&amp;#10;&amp;#10;degrees = 0 #Resests degrees so that if it saves with an exit the degrees will be 0 and not some random number&amp;#10;Image.setColor([0,0,1])#sets Image hsv color&amp;#10;&amp;#10;&amp;#10;&amp;#10;#Live stuff reset to N/A in case there is no correct location/color&amp;#10;livetestx = 'N/A'&amp;#10;livetesty = 'N/A'&amp;#10;livetestrad = 'N/A'&amp;#10;&amp;#10;testPath = 'N/A'&amp;#10;testx = &quot;N/A&quot;&amp;#10;testy = &quot;N/A&quot;&amp;#10;testrad = 0&amp;#10;testPath = stimuli[0][test_order[currentTest]] #Gets path of the study image&amp;#10;testoldornew = stimuli[4][test_order[currentTest]] #Gets color of the study image&amp;#10;livetestPath = testPath #For live file&amp;#10;livetestoldornew = testoldornew #For live file&amp;#10;if testoldornew == &quot;Old&quot;:&amp;#10;    testx = stimuli[1][test_order[currentTest]] #Gets x cord of the study image&amp;#10;    testy = stimuli[2][test_order[currentTest]] #Gets y cord of the study image&amp;#10;    testrad = stimuli[3][test_order[currentTest]] #Gets color of the study image&amp;#10;    livetestx = str(testx) #For live file&amp;#10;    livetesty = str(testy) #For live file&amp;#10;    livetestrad = str(testrad) #For live file" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="#NOTE: Some save code is in oldornew section of the experiment&amp;#10;&amp;#10;#Saves Stimuli name&amp;#10;thisExp2.addData('StimuliName', stimuli[7][test_order[currentTest]])&amp;#10;&amp;#10;#Saves order of test, oldornew, and study, starting with 0&amp;#10;thisExp2.addData('TestOrder', currentTest)&amp;#10;#Very complicated function to find order&amp;#10;testingNum = 0&amp;#10;while oldornew_order[testingNum] != test_order[currentTest]:&amp;#10;    testingNum += 1&amp;#10;thisExp2.addData('OldOrNewOrder', testingNum)&amp;#10;testingNum = 0&amp;#10;while study_order[testingNum] != test_order[currentTest]:&amp;#10;    testingNum += 1&amp;#10;thisExp2.addData('StudyOrder', testingNum)&amp;#10;&amp;#10;#Saves user old or new&amp;#10;thisExp2.addData('User_OldOrNew', stimuli[5][test_order[currentTest]])&amp;#10;&amp;#10;#MARK: User Save&amp;#10;#save position (place var)&amp;#10;x, y = place&amp;#10;#Save user's position of the image&amp;#10;thisExp2.addData('User_Image_x', round(x,5))&amp;#10;thisExp2.addData('User_Image_y', round(y,5))&amp;#10;liveuserx = str(round(x,5)) #For live data&amp;#10;liveusery = str(round(y,5)) #For live data&amp;#10;#Save color and rad #&amp;#10;degrees = round(degrees, 1) #Round because it should only go to one place w/ mult of 3.6&amp;#10;thisExp2.addData('User_Color', degrees)&amp;#10;#degrees = (orimult*0)+(orimult/2) original eq&amp;#10;radNum = (degrees-(orimult/2))/orimult #Changes degrees back into rad #s&amp;#10;radNum = round(radNum) #Round to prevent errors&amp;#10;thisExp2.addData('User_Rad#', radNum)&amp;#10;liveuserrad = str(radNum) #For live data&amp;#10;#Save approx color name&amp;#10;thisExp2.addData('User_AproxColor', aproxColor(radNum)) #AproxColor func is in Begin Experiment&amp;#10;&amp;#10;#MARK: Correct Save&amp;#10;#Save Correct oldornew&amp;#10;if not skipOldOrNew:&amp;#10;    thisExp2.addData('Correct_OldOrNew', testoldornew)&amp;#10;else:&amp;#10;    thisExp2.addData('Correct_OldOrNew', 'N/A')&amp;#10;&amp;#10;#Save correct position of the image&amp;#10;thisExp2.addData('Correct_Image_x', testx)&amp;#10;thisExp2.addData('Correct_Image_y', testy)&amp;#10;#Save color and rad #&amp;#10;degrees = (orimult*testrad)+(orimult/2)&amp;#10;degrees = round(degrees, 1) #Round because it should only go to one place w/ mult of 3.6&amp;#10;thisExp2.addData('Correct_Color', degrees)&amp;#10;thisExp2.addData('Correct_Rad#', testrad)&amp;#10;#Save approx color name&amp;#10;thisExp2.addData('Correct_AproxColor', aproxColor(testrad)) #AproxColor func is in Begin Experiment&amp;#10;&amp;#10;#MARK: Get distance from correct location/color&amp;#10;#Location&amp;#10;distx = abs(x-testx) #find the distance in x between correct and user&amp;#10;disty = abs(y-testy) #find the distance in y between correct and user&amp;#10;pythDist = math.sqrt((distx*distx)+(disty*disty)) #Uses pythagorean theorem to find distance&amp;#10;pythDist = round(pythDist,5) #Round to prevent errors&amp;#10;thisExp2.addData('locationDist', pythDist) #saves distance&amp;#10;#Color&amp;#10;if abs(testrad-radNum) &gt; amountofsegments/2:&amp;#10;    if testrad&gt;radNum:&amp;#10;        colorDist = amountofsegments-testrad+radNum&amp;#10;    else:&amp;#10;        colorDist = amountofsegments-radNum+testrad&amp;#10;else:&amp;#10;    colorDist = abs(testrad-radNum)&amp;#10;round(colorDist)&amp;#10;thisExp2.addData('radColorDist', colorDist) #saves color distance&amp;#10;&amp;#10;#MARK: Gets reaction time &amp;#10;thisExp2.addData('OldOrNew_RT', stimuli[6][test_order[currentTest]]) #saves time from oldornew section&amp;#10;now = datetime.datetime.now() #Gets time now&amp;#10;diff = now-then #Gets the difference&amp;#10;testrt = round(diff.total_seconds(),2) #Puts it in testrt and rounds to 2 decimal places&amp;#10;thisExp2.addData('Test_RT', testrt) #adds data&amp;#10;livetestrt = str(testrt) #Live file data&amp;#10;&amp;#10;thisExp2.addData('StudyStartTime', stimuli[8][test_order[currentTest]]) #adds data&amp;#10;thisExp2.addData('OldOrNewStartTime', stimuli[9][test_order[currentTest]]) #adds data&amp;#10;thisExp2.addData('TestStartTime', nowtime) #adds start time of stimulis on screen&amp;#10;&amp;#10;thisExp2.addData('StudyOnset', stimuli[10][test_order[currentTest]]) #adds data&amp;#10;thisExp2.addData('OldOrNewOnset', stimuli[11][test_order[currentTest]]) #adds data&amp;#10;thisExp2.addData('TestOnset', round((then-testOnset).total_seconds(),2)) #adds start time of stimulis on screen&amp;#10;&amp;#10;currentTest += 1 #Goes to next test stimuli&amp;#10;&amp;#10;#Next Entry of experiment&amp;#10;thisExp2.nextEntry()" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="SaveCode" valType="code"/>
      </CodeComponent>
      <CodeComponent name="ExitCode">
        <Param name="Begin Experiment" updates="constant" val="#Max degrees and speed for color help&amp;#10;colorMaxDeg = 270 #1 to any real number, must be at least twice as much as speed for smooth animation&amp;#10;colorSpeed = 50 #1 to any real number, do not recomend setting this above 50&amp;#10;&amp;#10;#Color text setup&amp;#10;ColorText = visual.TextStim(win=win, name='ColorText',&amp;#10;    text='Please select a color from the color wheel',&amp;#10;    font='Arial',&amp;#10;    pos=(0, -0.4), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='white', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;&amp;#10;#Drag text setup&amp;#10;DragText = visual.TextStim(win=win, name='DragText',&amp;#10;    text='Please Drag and Drop the object to a location on the screen',&amp;#10;    font='Arial',&amp;#10;    pos=(0, -0.4), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='white', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;&amp;#10;#Define images&amp;#10;arrowUp = visual.ImageStim(&amp;#10;    win=win, name='arrowUp',&amp;#10;    image='sin', mask=None,&amp;#10;    ori=0, pos=(0, .2), size=(0.03, 0.03),&amp;#10;    color=[1,0,1], colorSpace='hsv', opacity=1,&amp;#10;    flipHoriz=False, flipVert=False,&amp;#10;    texRes=128, interpolate=True, depth=0.0)&amp;#10;&amp;#10;arrowDown = visual.ImageStim(&amp;#10;    win=win, name='arrowDown',&amp;#10;    image='sin', mask=None,&amp;#10;    ori=0, pos=(0, -.2), size=(0.03, 0.03),&amp;#10;    color=[1,0,1], colorSpace='hsv', opacity=1,&amp;#10;    flipHoriz=False, flipVert=True,&amp;#10;    texRes=128, interpolate=True, depth=0.0)&amp;#10;&amp;#10;arrowRight = visual.ImageStim(&amp;#10;    win=win, name='arrowRight',&amp;#10;    image='sin', mask=None,&amp;#10;    ori=0, pos=(.2, 0), size=(0.03, 0.03),&amp;#10;    color=[1,0,1], colorSpace='hsv', opacity=1,&amp;#10;    flipHoriz=False, flipVert=False,&amp;#10;    texRes=128, interpolate=True, depth=0.0)&amp;#10;&amp;#10;arrowLeft = visual.ImageStim(&amp;#10;    win=win, name='arrowLeft',&amp;#10;    image='sin', mask=None,&amp;#10;    ori=0, pos=(-.2, 0), size=(0.03, 0.03),&amp;#10;    color=[1,0,1], colorSpace='hsv', opacity=1,&amp;#10;    flipHoriz=True, flipVert=False,&amp;#10;    texRes=128, interpolate=True, depth=0.0)&amp;#10;&amp;#10;#Set images&amp;#10;arrowUp.setImage(thisdir + '/LOCO/arrowUp.png')&amp;#10;arrowDown.setImage(thisdir + '/LOCO/arrowUp.png')&amp;#10;arrowRight.setImage(thisdir + '/LOCO/arrowRight.png')&amp;#10;arrowLeft.setImage(thisdir + '/LOCO/arrowRight.png')&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="mouse1.setPos(newPos=(0, 0.005)) #resets position of mouse, has to be offset slightly or else it will select a color for some reason&amp;#10;win.mouseVisible = True #Show mouse only if it is supposed to continue routine&amp;#10;&amp;#10;#These two vars give the person help with knowing how to drag/color live&amp;#10;helpDrag = False&amp;#10;helpColor = False&amp;#10;&amp;#10;opacOfArrows = 0.0 #Opacity of the arrows&amp;#10;opacUp = True #If Opacity is rising or falling&amp;#10;&amp;#10;colorDeg = 0 #Degrees of slider for colorHelp&amp;#10;colorDegUp = True #Degrees of the slider going up or down&amp;#10;colorOpac = 0 #Opacity of the slider" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if theseKeys == 'space':  #if space is pressed&amp;#10;    #a response ends the routine&amp;#10;    helpDrag = True #If they have not dragged yet and try to end routine&amp;#10;    helpColor = True #If they have not colored yet and try to end routine&amp;#10;    if hasColored == True and hasDragged == True: #Stops routine if they have colored and moved the stimuli&amp;#10;        continueRoutine = False&amp;#10;&amp;#10;#Help animations&amp;#10;if helpColor == True and hasColored == False and isDragging == False: #If they need help coloring and they are not currently dragging the image&amp;#10;    helpDrag = False #Disables other option&amp;#10;    if colorOpac &lt; 1.0:&amp;#10;        colorOpac += 0.01 #How fast opacity of slider increases&amp;#10;    if colorDeg &lt; 1 and colorDegUp == True and colorOpac &gt;= 0.75: #The last var is at what opacity to start sliding&amp;#10;        colorDeg += 0.1&amp;#10;    elif colorDeg &lt; colorSpeed and colorDegUp == True and colorOpac &gt;= 0.75:&amp;#10;        colorDeg += 0.1*colorDeg&amp;#10;    elif colorDeg &lt; colorMaxDeg-colorSpeed and colorDegUp == True and colorOpac &gt;= 0.75:&amp;#10;        colorDeg += colorSpeed/10 #Speed devided by 0.1 which is how much it increases by&amp;#10;    elif colorDeg &lt; colorMaxDeg-1 and colorDegUp == True and colorOpac &gt;= 0.75:&amp;#10;        colorDeg += 0.1*((-colorDeg)+colorMaxDeg)&amp;#10;    elif colorDeg &lt; colorMaxDeg and colorDegUp == True and colorOpac &gt;= 0.75:&amp;#10;        colorDegUp = False #Changes direction&amp;#10;    elif colorDeg &gt; colorMaxDeg-colorSpeed and colorDegUp == False: #Starts going back down degrees here&amp;#10;        colorDeg -= 0.1*((-colorDeg)+colorMaxDeg)&amp;#10;    elif colorDeg &gt; colorSpeed and colorDegUp == False:&amp;#10;        colorDeg -= colorSpeed/10&amp;#10;    elif colorDeg &gt; 1 and colorDegUp == False:&amp;#10;        colorDeg -= 0.1*colorDeg&amp;#10;    elif colorDeg &gt; 0 and colorDegUp == False:&amp;#10;        colorDeg -= 0.05&amp;#10;    elif colorOpac &gt;= 0.75:&amp;#10;        colorDegUp = True #Resets the direction so degrees are going back up again&amp;#10;        colorDeg += 0.05&amp;#10;    #Sets postion of selct shapes&amp;#10;    selectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,0,1], pos=(place[0]+(math.cos(math.radians(-colorDeg+90))*(.15-(0.03/4))), place[1]+(math.sin(math.radians(-colorDeg+90))*(.15-(0.03/4)))), size=(0.03,0.03), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = colorOpac)&amp;#10;    innerSelectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[colorDeg,1,1], pos=(place[0]+(math.cos(math.radians(-colorDeg+90))*(.15-(0.025/3.4))), place[1]+(math.sin(math.radians(-colorDeg+90))*(.15-(0.025/3.4)))), size=(0.025,0.025), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = colorOpac)&amp;#10;    #Draws each object&amp;#10;    selectShape.draw()&amp;#10;    innerSelectShape.draw()&amp;#10;    ColorText.draw()&amp;#10;elif helpDrag == True and hasDragged == False:&amp;#10;    helpColor = False #Disables other option&amp;#10;    #Makes a nice animation&amp;#10;    if opacOfArrows &gt;= 1.0: #changes direction of opacity&amp;#10;        opacUp = False&amp;#10;    elif opacOfArrows &lt;= 0.0:&amp;#10;        opacUp = True&amp;#10;    if opacUp == True:&amp;#10;        opacOfArrows += 0.01 #Changes opacity, change this var to make animation faster or slower&amp;#10;    else:&amp;#10;        opacOfArrows -= 0.01&amp;#10;    #Draws aroows and text&amp;#10;    arrowUp.opacity = opacOfArrows&amp;#10;    arrowDown.opacity = opacOfArrows&amp;#10;    arrowRight.opacity = opacOfArrows&amp;#10;    arrowLeft.opacity = opacOfArrows&amp;#10;    arrowUp.draw()&amp;#10;    arrowDown.draw()&amp;#10;    arrowRight.draw()&amp;#10;    arrowLeft.draw()&amp;#10;    DragText.draw() #Tells user what to do" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="win.mouseVisible = False #Hide mouse" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="ExitCode" valType="code"/>
      </CodeComponent>
      <ImageComponent name="Image">
        <Param name="color" updates="constant" val="$[1,-1.000,1.000]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="hsv" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$testPath" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.19, 0.19)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="liveCode15">
        <Param name="Begin Experiment" updates="constant" val="#Each variable for the live is separate from the actual data saving variables and they are all in string form&amp;#10;&amp;#10;livetestPath = 'N/A'&amp;#10;livetestoldornew = 'N/A'&amp;#10;livetestx = 'N/A'&amp;#10;livetesty = 'N/A'&amp;#10;livetestrad = 'N/A'&amp;#10;&amp;#10;liveuseroldornew = 'N/A'&amp;#10;liveuserx = 'N/A'&amp;#10;liveusery = 'N/A'&amp;#10;liveuserrad = 'N/A'&amp;#10;&amp;#10;liveoldornewrt = 'N/A'&amp;#10;livetestrt = 'N/A'" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="currentTime = datetime.datetime.now()&amp;#10;liveFile = open(liveFileName+str(liveNum)+'.csv', 'w')&amp;#10;liveFile.write('Test,Stimuli,' + str(currentTest+1) + ',' + str(num_study) + ',' + str(currentTest+2) + ',' + str(num_study+1) + ',' + str(currentTime.hour) + ',' + str(currentTime.minute) + ',' + str(currentTime.second) + ',' + stimuli[7][test_order[currentTest]] + ',' + livetestx + ',' + livetesty + ',' + livetestrad + ',' + stimuli[5][test_order[currentTest]] + ',' + liveuserx + ',' + liveusery + ',' + liveuserrad + ',' + str(stimuli[6][test_order[currentTest]]) + ',' + livetestrt)&amp;#10;liveFile.close()&amp;#10;liveNum += 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;for key in keys:&amp;#10;    if 'command' in key:&amp;#10;        command = True&amp;#10;    if 'esc' in key and command:&amp;#10;        liveliveFile = open(liveFileName+'live.csv', 'w')&amp;#10;        liveliveFile.write('Abort,Abort,1,1,1,1,')&amp;#10;        liveliveFile.close()&amp;#10;        core.quit()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="liveCode15" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="header">
      <CodeComponent name="saveCode">
        <Param name="Begin Experiment" updates="constant" val="import random, xlrd #For randomization of stimuli&amp;#10;command = False #For exiting experiment&amp;#10;&amp;#10;thisdir = os.path.abspath(os.path.join(os.path.dirname(_thisDir),'.'))&amp;#10;&amp;#10;imageName = '22' #Name of image to use&amp;#10;color = 22 #Out of 360" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="saveCode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="reset">
      <TextComponent name="resettext">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="resettext" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_12">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_12" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="win.mouseVisible = False #Show mouse at start" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="oldornew">
      <TextComponent name="oldornewText">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="oldornewText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.45)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="1 - Old        2 - New" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="oldornewImage">
        <Param name="color" updates="constant" val="$[-1,-1,-1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$thisdir + '/Stimuli/' + imageName + '.png'" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="oldornewImage" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.19, 0.19)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_13">
        <Param name="allowedKeys" updates="constant" val="'space', '1', '2'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_13" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="study">
      <ImageComponent name="studyImage">
        <Param name="color" updates="set every frame" val="$[color,1,0]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="hsv" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every frame" val="$thisdir + '/Stimuli/' + imageName + '.png'" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="studyImage" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="(0,0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.19, 0.19)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_14">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_14" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="text_6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="text_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.45)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Stimuli: " valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="text_7">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="text_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Color: " valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_3">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="setColor = False&amp;#10;setImage = False&amp;#10;win.mouseVisible = True #Show mouse at start" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if mouse0.isPressedIn(text_6):&amp;#10;    setImage = True&amp;#10;    setColor = False&amp;#10;    tempimageName = ''&amp;#10;    tempcolor = -1&amp;#10;elif mouse0.isPressedIn(text_7):&amp;#10;    setColor = True&amp;#10;    setImage = False&amp;#10;    tempimageName = ''&amp;#10;    tempcolor = -1&amp;#10;&amp;#10;keys = event.getKeys()&amp;#10;for key in keys:&amp;#10;    if key == '0' or key == '1' or key == '2' or key == '3' or key == '4' or key == '5' or key == '6' or key == '7' or key == '8' or key == '9':&amp;#10;        if setImage:&amp;#10;            if tempimageName != '':&amp;#10;                if int(tempimageName) &lt; 243:&amp;#10;                    tempimageName = tempimageName + key&amp;#10;            else:&amp;#10;                tempimageName = key&amp;#10;            imageName = tempimageName&amp;#10;        elif setColor:&amp;#10;            if tempcolor == -1:&amp;#10;                tempcolor = int(key)&amp;#10;            else:&amp;#10;                tempcolor = int(str(tempcolor) + key)&amp;#10;            color = tempcolor&amp;#10;&amp;#10;text_6.setText('Image: ' + imageName)&amp;#10;text_7.setText('Color: ' + str(color))" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
      </CodeComponent>
      <MouseComponent name="mouse0">
        <Param name="clickable" updates="constant" val="" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="never" valType="str"/>
        <Param name="name" updates="None" val="mouse0" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="False" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="never" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
    </Routine>
    <Routine name="studyInstr">
      <CodeComponent name="onsetCode2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="studyOnset = 0" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="onsetCode2" valType="code"/>
      </CodeComponent>
      <TextComponent name="studyText">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="studyText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Now for the actual experiment&amp;#10;You will now study a larger number of images. For each image, try to remember the shape, location and color. &amp;#10;&amp;#10;&amp;#10;Press Space To Start" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_3">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="liveCode6">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="currentTime = datetime.datetime.now()&amp;#10;liveFile = open(liveFileName+str(liveNum)+'.csv', 'w')&amp;#10;skipPractStr = ''&amp;#10;if skipPractice:&amp;#10;    skipPractStr = ',' + str(num_study) + ',' + str(num_test) + ',' + str(skipOldOrNew)&amp;#10;liveFile.write('Study,Instruction,1,1,1,' + str(num_study+1) + ',' + str(currentTime.hour) + ',' + str(currentTime.minute) + ',' + str(currentTime.second) + skipPractStr)&amp;#10;liveFile.close()&amp;#10;liveNum += 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;for key in keys:&amp;#10;    if 'command' in key:&amp;#10;        command = True&amp;#10;    if 'esc' in key and command:&amp;#10;        liveliveFile = open(liveFileName+'live.csv', 'w')&amp;#10;        liveliveFile.write('Abort,Abort,1,1,1,1,')&amp;#10;        liveliveFile.close()&amp;#10;        core.quit()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="liveCode6" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="allInstr">
      <TextComponent name="text_4">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="text_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You will now be presented with different images.&amp;#10;Each image will have a particular shape, color and location on the screen.&amp;#10;Try to remember each image.&amp;#10;&amp;#10;Press Space To Continue" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_6">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_6" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="liveCode">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="currentTime = datetime.datetime.now()&amp;#10;liveFile = open(liveFileName+str(liveNum)+'.csv', 'w')&amp;#10;liveFile.write('Practice,Instruction,1,2,3,11,' + str(currentTime.hour) + ',' + str(currentTime.minute) + ',' + str(currentTime.second)) #Only done once to tell the programm the total amount&amp;#10;liveFile.close()&amp;#10;liveNum += 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if defaultKeyboard.getKeys(keyList=[&quot;escape&quot;]):&amp;#10;    liveliveFile = open(liveFileName+'live.csv', 'w')&amp;#10;    liveliveFile.write('Abort,Abort,1,1,1,1,')&amp;#10;    liveliveFile.close()&amp;#10;    endExpNow = True" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="liveCode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="End">
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="            You have finished&amp;#10;Thank you for your participation&amp;#10;    Please get the experimenter" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="StartEnd = False #Lets the screen update normally before quiting&amp;#10;&amp;#10;if not skipOldOrNew:&amp;#10;    currentStimuliTest = num_study&amp;#10;    testingNums = []&amp;#10;    for i in range(num_test-num_study):&amp;#10;        testingNum = 0&amp;#10;        while oldornew_order[testingNum] != currentStimuliTest:&amp;#10;            testingNum += 1&amp;#10;        testingNums.append(testingNum)&amp;#10;        currentStimuliTest += 1&amp;#10;&amp;#10;    print(testingNums)&amp;#10;&amp;#10;    currentStimuli = 0&amp;#10;    for i in range(num_test-num_study):&amp;#10;        while not currentStimuli in testingNums:&amp;#10;            currentStimuli += 1&amp;#10;        print(currentStimuli)&amp;#10;        thisExp2.addData('StimuliName', stimuli[7][oldornew_order[currentStimuli]])&amp;#10;        thisExp2.addData('TestOrder', 'N/A')&amp;#10;        &amp;#10;        thisExp2.addData('OldOrNewOrder', currentStimuli)&amp;#10;        thisExp2.addData('StudyOrder', 'N/A')&amp;#10;        &amp;#10;        thisExp2.addData('User_OldOrNew', stimuli[5][oldornew_order[currentStimuli]])&amp;#10;        &amp;#10;        thisExp2.addData('User_Image_x', 'N/A')&amp;#10;        thisExp2.addData('User_Image_y', 'N/A')&amp;#10;        thisExp2.addData('User_Color', 'N/A')&amp;#10;        thisExp2.addData('User_Rad#', 'N/A')&amp;#10;        thisExp2.addData('User_AproxColor', 'N/A')&amp;#10;        &amp;#10;        thisExp2.addData('Correct_OldOrNew', 'New')&amp;#10;        &amp;#10;        thisExp2.addData('Correct_Image_x', 'N/A')&amp;#10;        thisExp2.addData('Correct_Image_y', 'N/A')&amp;#10;        thisExp2.addData('Correct_Color', 'N/A')&amp;#10;        thisExp2.addData('Correct_Rad#', 'N/A')&amp;#10;        thisExp2.addData('Correct_AproxColor', 'N/A')&amp;#10;        &amp;#10;        thisExp2.addData('locationDist', 'N/A')&amp;#10;        thisExp2.addData('radColorDist', 'N/A')&amp;#10;        &amp;#10;        thisExp2.addData('OldOrNew_RT', stimuli[6][oldornew_order[currentStimuli]])&amp;#10;        thisExp2.addData('Test_RT', 'N/A') &amp;#10;        &amp;#10;        thisExp2.addData('StudyStartTime', 'N/A') #adds data&amp;#10;        thisExp2.addData('OldOrNewStartTime', stimuli[9][oldornew_order[currentStimuli]]) #adds data&amp;#10;        thisExp2.addData('TestStartTime', 'N/A') #adds start time of stimulis on screen&amp;#10;        &amp;#10;        thisExp2.addData('StudyOnset', 'N/A') #adds data&amp;#10;        thisExp2.addData('OldOrNewOnset', stimuli[11][oldornew_order[currentStimuli]]) #adds data&amp;#10;        thisExp2.addData('TestOnset', 'N/A') #adds start time of stimulis on screen&amp;#10;        &amp;#10;        thisExp2.nextEntry()&amp;#10;        currentStimuli += 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if StartEnd:&amp;#10;    win.flip()&amp;#10;    time.sleep(4) #Waits three seconds&amp;#10;    text.setText('Saving Data\n\nPlease Wait') #Changes text&amp;#10;    win.flip()&amp;#10;    core.quit()&amp;#10;StartEnd += 0.1 #For some reason it takes 11 frames/flips to update?" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <CodeComponent name="liveCode10">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="currentTime = datetime.datetime.now()&amp;#10;liveFile = open(liveFileName+str(liveNum)+'.csv', 'w')&amp;#10;liveFile.write('Done,Done,1,1,1,1,' + str(currentTime.hour) + ',' + str(currentTime.minute) + ',' + str(currentTime.second) + ',N/A,N/A,N/A,N/A,N/A,' + liveuseroldornew + ',' + liveuserx + ',' + liveusery + ',' + liveuserrad + ',N/A,' + livetestrt) #To get the last one the user did&amp;#10;liveFile.close()&amp;#10;liveNum += 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="liveCode10" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="practiceStudy">
      <CodeComponent name="ImageCode">
        <Param name="Begin Experiment" updates="constant" val="#This array defines the practice stimuli&amp;#10;practiceStim = np.array([[thisdir + &quot;/Stimuli/test7.png&quot;, thisdir + &quot;/Stimuli/test3.png&quot;, thisdir + &quot;/Stimuli/test4.png&quot;, thisdir + &quot;/Stimuli/test5.png&quot;], &amp;#10;    [-0.64514, .72917], &amp;#10;    [.012639, .33681], &amp;#10;    [13, 77]])&amp;#10;&amp;#10;#Current trial used to select stimuli&amp;#10;practicestudytrail = 0" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="practicestudyPath = practiceStim[0][practicestudytrail] #Gets path of the study image&amp;#10;practicestudyx = practiceStim[1][practicestudytrail] #Gets x cord of the study image&amp;#10;practicestudyy = practiceStim[2][practicestudytrail] #Gets y cord of the study image&amp;#10;practicestudyrad = practiceStim[3][practicestudytrail] #Gets color of the study image" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="practicestudytrail += 1 #Next trail" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="ImageCode" valType="code"/>
      </CodeComponent>
      <ImageComponent name="practicestudyimage">
        <Param name="color" updates="set every repeat" val="$[$(float(practicestudyrad)*orimult)+(orimult/2),1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="hsv" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$practicestudyPath" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="practicestudyimage" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="(practicestudyx, practicestudyy)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.19, 0.19)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="liveCode3">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="currentTime = datetime.datetime.now()&amp;#10;liveFile = open(liveFileName+str(liveNum)+'.csv', 'w')&amp;#10;liveFile.write('Practice,Study,' + str(practicestudytrail+1) + ',2,' + str(practicestudytrail+4) + ',' + str(numberofpractice + 8) + ',' + str(currentTime.hour) + ',' + str(currentTime.minute) + ',' + str(currentTime.second))&amp;#10;liveFile.close()&amp;#10;liveNum += 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;for key in keys:&amp;#10;    if 'command' in key:&amp;#10;        command = True&amp;#10;    if 'esc' in key and command:&amp;#10;        liveliveFile = open(liveFileName+'live.csv', 'w')&amp;#10;        liveliveFile.write('Abort,Abort,1,1,1,1,')&amp;#10;        liveliveFile.close()&amp;#10;        core.quit()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="liveCode3" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="practiceTestInstr">
      <CodeComponent name="skipCode6">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if skipPractice:&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="skipCode6" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_4">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="testText">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.028" valType="code"/>
        <Param name="name" updates="None" val="testText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You will now be tested on the color and location of the images you studied. &amp;#10;Use the mouse to select the color and drag the image to its original location.&amp;#10;During this practice, you will be given feedback on how close you are to the correct color and location&amp;#10;&amp;#10;Press Space To Start" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="liveCode4">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if not skipPractice:&amp;#10;    currentTime = datetime.datetime.now()&amp;#10;    liveFile = open(liveFileName+str(liveNum)+'.csv', 'w')&amp;#10;    liveFile.write('Practice,Instruction,1,1,' + str(numberofpractice + 6) + ',' + str(numberofpractice + 8) + ',' + str(currentTime.hour) + ',' + str(currentTime.minute) + ',' + str(currentTime.second))&amp;#10;    liveFile.close()&amp;#10;    liveNum += 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;for key in keys:&amp;#10;    if 'command' in key:&amp;#10;        command = True&amp;#10;    if 'esc' in key and command:&amp;#10;        liveliveFile = open(liveFileName+'live.csv', 'w')&amp;#10;        liveliveFile.write('Abort,Abort,1,1,1,1,')&amp;#10;        liveliveFile.close()&amp;#10;        core.quit()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="liveCode4" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="practiceTest">
      <MouseComponent name="mouse2">
        <Param name="clickable" updates="constant" val="" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="never" valType="str"/>
        <Param name="name" updates="None" val="mouse2" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="False" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="never" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
      <KeyboardComponent name="key_resp_8">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_8" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="dragCode">
        <Param name="Begin Experiment" updates="constant" val="#Looking for code in Begin Experiment?&amp;#10;#All code and var definitions for begin experiment are in the test section" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="isDragging = False #Lets other parts of experiment know that the user is dragging the stimuli&amp;#10;didFinishDrag = False #Lets some aspects of the experiment only do something once after a drag has finished&amp;#10;hasDragged = False #For preventing the user from going on until dragged&amp;#10;place = (0,0) #Place of object (Image)&amp;#10;Image2.setPos(place) #Sets image to (0,0)&amp;#10;noClickShape.setPos(place) #Sets noClickShape to (0,0), see Begin Experiment for more about noClickShape&amp;#10;mousePlace = (0,0) #Place of mouse when clicked&amp;#10;mousex = 0.0 #Offset of mouse x&amp;#10;mousey = 0.0 #Offset of mouse y&amp;#10;firstDrag = True #For updating positions of mousex and mousey" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="#This whole complicated thing makes sure that the stimuli always stays on the mouse if they click on the stimuli first&amp;#10;if mouse2.isPressedIn(screenRect2) and didFinishDrag == False:#ScreenRect is used to detect if mouse is pressed anywhere on screen&amp;#10;    if mouse2.isPressedIn(noClickShape): #Checks when mouse is pressed down, see Begin Experiment for more about noClickShape&amp;#10;        if isOnColor == False: #Makes sure it didn't start on the color wheel&amp;#10;            #This calculates offset of mouse from center of object (Not needed but looks better in experiment)&amp;#10;            mousePlace = mouse2.getPos()&amp;#10;            if firstDrag == True: #Only updates offset once when starting the drag&amp;#10;                mousex = mousePlace[0] - place[0] #Gets the difference between the Image place and the mouse place for x&amp;#10;                mousey = mousePlace[1] - place[1] #Gets the difference between the Image place and the mouse place for y&amp;#10;                firstDrag = False #Disables first drag&amp;#10;            place = mousePlace[0] - mousex, mousePlace[1] - mousey #Adds this onto the place of the image for more intuitive dragging&amp;#10;            Image2.setPos(place) #Sets position of the image equal to the position of the mouse&amp;#10;            noClickShape.setPos(place) #Set position&amp;#10;            isDragging = True #Sets is dragging to true when the mouse starts on the object (noClickShape in this case)&amp;#10;            hasDragged = True #For preventing the user from going on until dragged&amp;#10;            win.mouseVisible = False #Hide mouse when dragging&amp;#10;    elif isDragging == True: #If the mouse started on noClickShape but isnt there right now (and still pressed down) it will update position anyway&amp;#10;        #This calculates offset of mouse from center of object (Not needed but looks better in experiment)&amp;#10;        mousePlace = mouse2.getPos()&amp;#10;        if firstDrag == True: #Only updates offset once when starting the drag&amp;#10;                mousex = mousePlace[0] - place[0] #Gets the difference between the Image place and the mouse place for x&amp;#10;                mousey = mousePlace[1] - place[1] #Gets the difference between the Image place and the mouse place for y&amp;#10;                firstDrag = False #Disables first drag&amp;#10;        place = mousePlace[0] - mousex, mousePlace[1] - mousey #Adds this onto the place of the image for more intuitive dragging&amp;#10;        Image2.setPos(place) #Sets position of the image equal to the position of the mouse&amp;#10;        noClickShape.setPos(place) #Set position&amp;#10;elif didFinishDrag == True and isDragging == True: #Disables didFinishDrag for good&amp;#10;    didFinishDrag = False&amp;#10;elif isDragging == True: #This is an elif statement so will only play if others above are false&amp;#10;    didFinishDrag = True #Makes var true so it only is true for one frame&amp;#10;    isDragging = False #It is no longer dragging&amp;#10;    win.mouseVisible = True #Show mouse once your done dragging&amp;#10;    firstDrag = True #re-enables first drag again so when the first if statement plays it will update position of offset&amp;#10;else:&amp;#10;    didFinishDrag = False #Disables didFinishDrag for good&amp;#10;&amp;#10;noClickShape.draw() #Draws no click shape" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="dragCode" valType="code"/>
      </CodeComponent>
      <CodeComponent name="colorCode">
        <Param name="Begin Experiment" updates="constant" val="#Looking for code in Begin Experiment?&amp;#10;#All code and var definitions for begin experiment are in the test section" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="isOnColor = False #If the mouse is currently on a color&amp;#10;hasColored = False #For hiding the selectShape until you start coloring&amp;#10;stim.setPos(place)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if didFinishDrag == True: #Only updates position once after you finish dragging, otherwise experiment will lag a lot&amp;#10;    stim.setPos(place)&amp;#10;    stim.draw()&amp;#10;elif isDragging == False: #If your not dragging it won't redifine the position&amp;#10;    stim.draw()&amp;#10;&amp;#10;if mouse2.isPressedIn(screenRect2):#ScreenRect is used to detect if mouse is pressed anywhere on screen&amp;#10;    if mouse2.isPressedIn(stim) and not mouse2.isPressedIn(noClickShape):#Has to be initially pressed on wheel to set to true&amp;#10;        if isDragging == False: #Also cannot be dragging&amp;#10;            hasColored = True #For hiding the selectShape until you start coloring&amp;#10;            isOnColor = True #Then will set is on color to true&amp;#10;else:&amp;#10;    isOnColor = False #If mouse is not pressed down it is not on color" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="colorCode" valType="code"/>
      </CodeComponent>
      <CodeComponent name="segmentCode">
        <Param name="Begin Experiment" updates="constant" val="#Looking for code in Begin Experiment?&amp;#10;#All code and var definitions for begin experiment are in the test section" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="segpos = (0,0) #resets position of segments&amp;#10;&amp;#10;#Defines each segment&amp;#10;rad0 = visual.RadialStim( win=win, name='rad0', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*0, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad1 = visual.RadialStim( win=win, name='rad1', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*1, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad2 = visual.RadialStim( win=win, name='rad2', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*2, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad3 = visual.RadialStim( win=win, name='rad3', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*3, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad4 = visual.RadialStim( win=win, name='rad4', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*4, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad5 = visual.RadialStim( win=win, name='rad5', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*5, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad6 = visual.RadialStim( win=win, name='rad6', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*6, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad7 = visual.RadialStim( win=win, name='rad7', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*7, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad8 = visual.RadialStim( win=win, name='rad8', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*8, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad9 = visual.RadialStim( win=win, name='rad9', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*9, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad10 = visual.RadialStim( win=win, name='rad10', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*10, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad11 = visual.RadialStim( win=win, name='rad11', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*11, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad12 = visual.RadialStim( win=win, name='rad12', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*12, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad13 = visual.RadialStim( win=win, name='rad13', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*13, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad14 = visual.RadialStim( win=win, name='rad14', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*14, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad15 = visual.RadialStim( win=win, name='rad15', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*15, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad16 = visual.RadialStim( win=win, name='rad16', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*16, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad17 = visual.RadialStim( win=win, name='rad17', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*17, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad18 = visual.RadialStim( win=win, name='rad18', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*18, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad19 = visual.RadialStim( win=win, name='rad19', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*19, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad20 = visual.RadialStim( win=win, name='rad20', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*20, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad21 = visual.RadialStim( win=win, name='rad21', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*21, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad22 = visual.RadialStim( win=win, name='rad22', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*22, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad23 = visual.RadialStim( win=win, name='rad23', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*23, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad24 = visual.RadialStim( win=win, name='rad24', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*24, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad25 = visual.RadialStim( win=win, name='rad25', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*25, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad26 = visual.RadialStim( win=win, name='rad26', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*26, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad27 = visual.RadialStim( win=win, name='rad27', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*27, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad28 = visual.RadialStim( win=win, name='rad28', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*28, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad29 = visual.RadialStim( win=win, name='rad29', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*29, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad30 = visual.RadialStim( win=win, name='rad30', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*30, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad31 = visual.RadialStim( win=win, name='rad31', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*31, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad32 = visual.RadialStim( win=win, name='rad32', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*32, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad33 = visual.RadialStim( win=win, name='rad33', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*33, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad34 = visual.RadialStim( win=win, name='rad34', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*34, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad35 = visual.RadialStim( win=win, name='rad35', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*35, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad36 = visual.RadialStim( win=win, name='rad36', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*36, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad37 = visual.RadialStim( win=win, name='rad37', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*37, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad38 = visual.RadialStim( win=win, name='rad38', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*38, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad39 = visual.RadialStim( win=win, name='rad39', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*39, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad40 = visual.RadialStim( win=win, name='rad40', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*40, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad41 = visual.RadialStim( win=win, name='rad41', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*41, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad42 = visual.RadialStim( win=win, name='rad42', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*42, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad43 = visual.RadialStim( win=win, name='rad43', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*43, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad44 = visual.RadialStim( win=win, name='rad44', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*44, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad45 = visual.RadialStim( win=win, name='rad45', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*45, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad46 = visual.RadialStim( win=win, name='rad46', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*46, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad47 = visual.RadialStim( win=win, name='rad47', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*47, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad48 = visual.RadialStim( win=win, name='rad48', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*48, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad49 = visual.RadialStim( win=win, name='rad49', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*49, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad50 = visual.RadialStim( win=win, name='rad50', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*50, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad51 = visual.RadialStim( win=win, name='rad51', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*51, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad52 = visual.RadialStim( win=win, name='rad52', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*52, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad53 = visual.RadialStim( win=win, name='rad53', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*53, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad54 = visual.RadialStim( win=win, name='rad54', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*54, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad55 = visual.RadialStim( win=win, name='rad55', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*55, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad56 = visual.RadialStim( win=win, name='rad56', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*56, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad57 = visual.RadialStim( win=win, name='rad57', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*57, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad58 = visual.RadialStim( win=win, name='rad58', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*58, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad59 = visual.RadialStim( win=win, name='rad59', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*59, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad60 = visual.RadialStim( win=win, name='rad60', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*60, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad61 = visual.RadialStim( win=win, name='rad61', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*61, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad62 = visual.RadialStim( win=win, name='rad62', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*62, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad63 = visual.RadialStim( win=win, name='rad63', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*63, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad64 = visual.RadialStim( win=win, name='rad64', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*64, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad65 = visual.RadialStim( win=win, name='rad65', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*65, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad66 = visual.RadialStim( win=win, name='rad66', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*66, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad67 = visual.RadialStim( win=win, name='rad67', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*67, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad68 = visual.RadialStim( win=win, name='rad68', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*68, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad69 = visual.RadialStim( win=win, name='rad69', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*69, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad70 = visual.RadialStim( win=win, name='rad70', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*70, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad71 = visual.RadialStim( win=win, name='rad71', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*71, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad72 = visual.RadialStim( win=win, name='rad72', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*72, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad73 = visual.RadialStim( win=win, name='rad73', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*73, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad74 = visual.RadialStim( win=win, name='rad74', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*74, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad75 = visual.RadialStim( win=win, name='rad75', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*75, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad76 = visual.RadialStim( win=win, name='rad76', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*76, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad77 = visual.RadialStim( win=win, name='rad77', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*77, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad78 = visual.RadialStim( win=win, name='rad78', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*78, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad79 = visual.RadialStim( win=win, name='rad79', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*79, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad80 = visual.RadialStim( win=win, name='rad80', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*80, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad81 = visual.RadialStim( win=win, name='rad81', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*81, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad82 = visual.RadialStim( win=win, name='rad82', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*82, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad83 = visual.RadialStim( win=win, name='rad83', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*83, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad84 = visual.RadialStim( win=win, name='rad84', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*84, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad85 = visual.RadialStim( win=win, name='rad85', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*85, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad86 = visual.RadialStim( win=win, name='rad86', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*86, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad87 = visual.RadialStim( win=win, name='rad87', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*87, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad88 = visual.RadialStim( win=win, name='rad88', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*88, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad89 = visual.RadialStim( win=win, name='rad89', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*89, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad90 = visual.RadialStim( win=win, name='rad90', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*90, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad91 = visual.RadialStim( win=win, name='rad91', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*91, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad92 = visual.RadialStim( win=win, name='rad92', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*92, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad93 = visual.RadialStim( win=win, name='rad93', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*93, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad94 = visual.RadialStim( win=win, name='rad94', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*94, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad95 = visual.RadialStim( win=win, name='rad95', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*95, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad96 = visual.RadialStim( win=win, name='rad96', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*96, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad97 = visual.RadialStim( win=win, name='rad97', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*97, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad98 = visual.RadialStim( win=win, name='rad98', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*98, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad99 = visual.RadialStim( win=win, name='rad99', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*99, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="#MARK: Detect Mouse Press On Segment&amp;#10;#Takes the multiplier (How many segments) and multiplies it by rad number&amp;#10;#Then adds half of the multiplier (to make color average)&amp;#10;if isDragging == False and isOnColor == True: #If its on a segment it will update the color of the Image2&amp;#10;    if mouse2.isPressedIn(rad0): #Will not set color if dragging Image2&amp;#10;        degrees = (orimult*0)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad1):&amp;#10;        degrees = (orimult*1)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad2):&amp;#10;        degrees = (orimult*2)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad3):&amp;#10;        degrees = (orimult*3)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad4):&amp;#10;        degrees = (orimult*4)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad5):&amp;#10;        degrees = (orimult*5)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad6):&amp;#10;        degrees = (orimult*6)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad7):&amp;#10;        degrees = (orimult*7)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad8):&amp;#10;        degrees = (orimult*8)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad9):&amp;#10;        degrees = (orimult*9)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad10):&amp;#10;        degrees = (orimult*10)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad11):&amp;#10;        degrees = (orimult*11)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad12):&amp;#10;        degrees = (orimult*12)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad13):&amp;#10;        degrees = (orimult*13)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad14):&amp;#10;        degrees = (orimult*14)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad15):&amp;#10;        degrees = (orimult*15)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad16):&amp;#10;        degrees = (orimult*16)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad17):&amp;#10;        degrees = (orimult*17)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad18):&amp;#10;        degrees = (orimult*18)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad19):&amp;#10;        degrees = (orimult*19)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad20):&amp;#10;        degrees = (orimult*20)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad21):&amp;#10;        degrees = (orimult*21)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad22):&amp;#10;        degrees = (orimult*22)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad23):&amp;#10;        degrees = (orimult*23)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad24):&amp;#10;        degrees = (orimult*24)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad25):&amp;#10;        degrees = (orimult*25)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad26):&amp;#10;        degrees = (orimult*26)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad27):&amp;#10;        degrees = (orimult*27)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad28):&amp;#10;        degrees = (orimult*28)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad29):&amp;#10;        degrees = (orimult*29)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad30):&amp;#10;        degrees = (orimult*30)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad31):&amp;#10;        degrees = (orimult*31)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad32):&amp;#10;        degrees = (orimult*32)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad33):&amp;#10;        degrees = (orimult*33)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad34):&amp;#10;        degrees = (orimult*34)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad35):&amp;#10;        degrees = (orimult*35)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad36):&amp;#10;        degrees = (orimult*36)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad37):&amp;#10;        degrees = (orimult*37)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad38):&amp;#10;        degrees = (orimult*38)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad39):&amp;#10;        degrees = (orimult*39)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad40):&amp;#10;        degrees = (orimult*40)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad41):&amp;#10;        degrees = (orimult*41)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad42):&amp;#10;        degrees = (orimult*42)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad43):&amp;#10;        degrees = (orimult*43)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad44):&amp;#10;        degrees = (orimult*44)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad45):&amp;#10;        degrees = (orimult*45)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad46):&amp;#10;        degrees = (orimult*46)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad47):&amp;#10;        degrees = (orimult*47)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad48):&amp;#10;        degrees = (orimult*48)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad49):&amp;#10;        degrees = (orimult*49)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad50):&amp;#10;        degrees = (orimult*50)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad51):&amp;#10;        degrees = (orimult*51)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad52):&amp;#10;        degrees = (orimult*52)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad53):&amp;#10;        degrees = (orimult*53)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad54):&amp;#10;        degrees = (orimult*54)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad55):&amp;#10;        degrees = (orimult*55)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad56):&amp;#10;        degrees = (orimult*56)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad57):&amp;#10;        degrees = (orimult*57)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad58):&amp;#10;        degrees = (orimult*58)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad59):&amp;#10;        degrees = (orimult*59)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad60):&amp;#10;        degrees = (orimult*60)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad61):&amp;#10;        degrees = (orimult*61)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad62):&amp;#10;        degrees = (orimult*62)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad63):&amp;#10;        degrees = (orimult*63)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad64):&amp;#10;        degrees = (orimult*64)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad65):&amp;#10;        degrees = (orimult*65)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad66):&amp;#10;        degrees = (orimult*66)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad67):&amp;#10;        degrees = (orimult*67)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad68):&amp;#10;        degrees = (orimult*68)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad69):&amp;#10;        degrees = (orimult*69)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad70):&amp;#10;        degrees = (orimult*70)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad71):&amp;#10;        degrees = (orimult*71)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad72):&amp;#10;        degrees = (orimult*72)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad73):&amp;#10;        degrees = (orimult*73)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad74):&amp;#10;        degrees = (orimult*74)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad75):&amp;#10;        degrees = (orimult*75)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad76):&amp;#10;        degrees = (orimult*76)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad77):&amp;#10;        degrees = (orimult*77)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad78):&amp;#10;        degrees = (orimult*78)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad79):&amp;#10;        degrees = (orimult*79)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad80):&amp;#10;        degrees = (orimult*80)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad81):&amp;#10;        degrees = (orimult*81)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad82):&amp;#10;        degrees = (orimult*82)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad83):&amp;#10;        degrees = (orimult*83)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad84):&amp;#10;        degrees = (orimult*84)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad85):&amp;#10;        degrees = (orimult*85)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad86):&amp;#10;        degrees = (orimult*86)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad87):&amp;#10;        degrees = (orimult*87)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad88):&amp;#10;        degrees = (orimult*88)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad89):&amp;#10;        degrees = (orimult*89)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad90):&amp;#10;        degrees = (orimult*90)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad91):&amp;#10;        degrees = (orimult*91)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad92):&amp;#10;        degrees = (orimult*92)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad93):&amp;#10;        degrees = (orimult*93)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad94):&amp;#10;        degrees = (orimult*94)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad95):&amp;#10;        degrees = (orimult*95)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad96):&amp;#10;        degrees = (orimult*96)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad97):&amp;#10;        degrees = (orimult*97)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad98):&amp;#10;        degrees = (orimult*98)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;    elif mouse2.isPressedIn(rad99):&amp;#10;        degrees = (orimult*99)+(orimult/2)&amp;#10;        Image2.setColor([degrees,1,1])#sets Image2 hsv color&amp;#10;&amp;#10;#MARK: Update Segment Positions And Draw Them&amp;#10;if didFinishDrag == True: #This is to prevent slowness when picking up ubject to drag&amp;#10;    segpos = (place)#When it appears sets the pos equal to the current place of the object&amp;#10;    #Sets each segment position&amp;#10;    rad0.setPos(segpos)&amp;#10;    rad1.setPos(segpos)&amp;#10;    rad2.setPos(segpos)&amp;#10;    rad3.setPos(segpos)&amp;#10;    rad4.setPos(segpos)&amp;#10;    rad5.setPos(segpos)&amp;#10;    rad6.setPos(segpos)&amp;#10;    rad7.setPos(segpos)&amp;#10;    rad8.setPos(segpos)&amp;#10;    rad9.setPos(segpos)&amp;#10;    rad10.setPos(segpos)&amp;#10;    rad11.setPos(segpos)&amp;#10;    rad12.setPos(segpos)&amp;#10;    rad13.setPos(segpos)&amp;#10;    rad14.setPos(segpos)&amp;#10;    rad15.setPos(segpos)&amp;#10;    rad16.setPos(segpos)&amp;#10;    rad17.setPos(segpos)&amp;#10;    rad18.setPos(segpos)&amp;#10;    rad19.setPos(segpos)&amp;#10;    rad20.setPos(segpos)&amp;#10;    rad21.setPos(segpos)&amp;#10;    rad22.setPos(segpos)&amp;#10;    rad23.setPos(segpos)&amp;#10;    rad24.setPos(segpos)&amp;#10;    rad25.setPos(segpos)&amp;#10;    rad26.setPos(segpos)&amp;#10;    rad27.setPos(segpos)&amp;#10;    rad28.setPos(segpos)&amp;#10;    rad29.setPos(segpos)&amp;#10;    rad30.setPos(segpos)&amp;#10;    rad31.setPos(segpos)&amp;#10;    rad32.setPos(segpos)&amp;#10;    rad33.setPos(segpos)&amp;#10;    rad34.setPos(segpos)&amp;#10;    rad35.setPos(segpos)&amp;#10;    rad36.setPos(segpos)&amp;#10;    rad37.setPos(segpos)&amp;#10;    rad38.setPos(segpos)&amp;#10;    rad39.setPos(segpos)&amp;#10;    rad40.setPos(segpos)&amp;#10;    rad41.setPos(segpos)&amp;#10;    rad42.setPos(segpos)&amp;#10;    rad43.setPos(segpos)&amp;#10;    rad44.setPos(segpos)&amp;#10;    rad45.setPos(segpos)&amp;#10;    rad46.setPos(segpos)&amp;#10;    rad47.setPos(segpos)&amp;#10;    rad48.setPos(segpos)&amp;#10;    rad49.setPos(segpos)&amp;#10;    rad50.setPos(segpos)&amp;#10;    rad51.setPos(segpos)&amp;#10;    rad52.setPos(segpos)&amp;#10;    rad53.setPos(segpos)&amp;#10;    rad54.setPos(segpos)&amp;#10;    rad55.setPos(segpos)&amp;#10;    rad56.setPos(segpos)&amp;#10;    rad57.setPos(segpos)&amp;#10;    rad58.setPos(segpos)&amp;#10;    rad59.setPos(segpos)&amp;#10;    rad60.setPos(segpos)&amp;#10;    rad61.setPos(segpos)&amp;#10;    rad62.setPos(segpos)&amp;#10;    rad63.setPos(segpos)&amp;#10;    rad64.setPos(segpos)&amp;#10;    rad65.setPos(segpos)&amp;#10;    rad66.setPos(segpos)&amp;#10;    rad67.setPos(segpos)&amp;#10;    rad68.setPos(segpos)&amp;#10;    rad69.setPos(segpos)&amp;#10;    rad70.setPos(segpos)&amp;#10;    rad71.setPos(segpos)&amp;#10;    rad72.setPos(segpos)&amp;#10;    rad73.setPos(segpos)&amp;#10;    rad74.setPos(segpos)&amp;#10;    rad75.setPos(segpos)&amp;#10;    rad76.setPos(segpos)&amp;#10;    rad77.setPos(segpos)&amp;#10;    rad78.setPos(segpos)&amp;#10;    rad79.setPos(segpos)&amp;#10;    rad80.setPos(segpos)&amp;#10;    rad81.setPos(segpos)&amp;#10;    rad82.setPos(segpos)&amp;#10;    rad83.setPos(segpos)&amp;#10;    rad84.setPos(segpos)&amp;#10;    rad85.setPos(segpos)&amp;#10;    rad86.setPos(segpos)&amp;#10;    rad87.setPos(segpos)&amp;#10;    rad88.setPos(segpos)&amp;#10;    rad89.setPos(segpos)&amp;#10;    rad90.setPos(segpos)&amp;#10;    rad91.setPos(segpos)&amp;#10;    rad92.setPos(segpos)&amp;#10;    rad93.setPos(segpos)&amp;#10;    rad94.setPos(segpos)&amp;#10;    rad95.setPos(segpos)&amp;#10;    rad96.setPos(segpos)&amp;#10;    rad97.setPos(segpos)&amp;#10;    rad98.setPos(segpos)&amp;#10;    rad99.setPos(segpos)&amp;#10;elif isDragging == False and isOnColor == True: #When dragging it will dispear&amp;#10;    #Draws each segment&amp;#10;    rad0.draw()&amp;#10;    rad1.draw()&amp;#10;    rad2.draw()&amp;#10;    rad3.draw()&amp;#10;    rad4.draw()&amp;#10;    rad5.draw()&amp;#10;    rad6.draw()&amp;#10;    rad7.draw()&amp;#10;    rad8.draw()&amp;#10;    rad9.draw()&amp;#10;    rad10.draw()&amp;#10;    rad11.draw()&amp;#10;    rad12.draw()&amp;#10;    rad13.draw()&amp;#10;    rad14.draw()&amp;#10;    rad15.draw()&amp;#10;    rad16.draw()&amp;#10;    rad17.draw()&amp;#10;    rad18.draw()&amp;#10;    rad19.draw()&amp;#10;    rad20.draw()&amp;#10;    rad21.draw()&amp;#10;    rad22.draw()&amp;#10;    rad23.draw()&amp;#10;    rad24.draw()&amp;#10;    rad25.draw()&amp;#10;    rad26.draw()&amp;#10;    rad27.draw()&amp;#10;    rad28.draw()&amp;#10;    rad29.draw()&amp;#10;    rad30.draw()&amp;#10;    rad31.draw()&amp;#10;    rad32.draw()&amp;#10;    rad33.draw()&amp;#10;    rad34.draw()&amp;#10;    rad35.draw()&amp;#10;    rad36.draw()&amp;#10;    rad37.draw()&amp;#10;    rad38.draw()&amp;#10;    rad39.draw()&amp;#10;    rad40.draw()&amp;#10;    rad41.draw()&amp;#10;    rad42.draw()&amp;#10;    rad43.draw()&amp;#10;    rad44.draw()&amp;#10;    rad45.draw()&amp;#10;    rad46.draw()&amp;#10;    rad47.draw()&amp;#10;    rad48.draw()&amp;#10;    rad49.draw()&amp;#10;    rad50.draw()&amp;#10;    rad51.draw()&amp;#10;    rad52.draw()&amp;#10;    rad53.draw()&amp;#10;    rad54.draw()&amp;#10;    rad55.draw()&amp;#10;    rad56.draw()&amp;#10;    rad57.draw()&amp;#10;    rad58.draw()&amp;#10;    rad59.draw()&amp;#10;    rad60.draw()&amp;#10;    rad61.draw()&amp;#10;    rad62.draw()&amp;#10;    rad63.draw()&amp;#10;    rad64.draw()&amp;#10;    rad65.draw()&amp;#10;    rad66.draw()&amp;#10;    rad67.draw()&amp;#10;    rad68.draw()&amp;#10;    rad69.draw()&amp;#10;    rad70.draw()&amp;#10;    rad71.draw()&amp;#10;    rad72.draw()&amp;#10;    rad73.draw()&amp;#10;    rad74.draw()&amp;#10;    rad75.draw()&amp;#10;    rad76.draw()&amp;#10;    rad77.draw()&amp;#10;    rad78.draw()&amp;#10;    rad79.draw()&amp;#10;    rad80.draw()&amp;#10;    rad81.draw()&amp;#10;    rad82.draw()&amp;#10;    rad83.draw()&amp;#10;    rad84.draw()&amp;#10;    rad85.draw()&amp;#10;    rad86.draw()&amp;#10;    rad87.draw()&amp;#10;    rad88.draw()&amp;#10;    rad89.draw()&amp;#10;    rad90.draw()&amp;#10;    rad91.draw()&amp;#10;    rad92.draw()&amp;#10;    rad93.draw()&amp;#10;    rad94.draw()&amp;#10;    rad95.draw()&amp;#10;    rad96.draw()&amp;#10;    rad97.draw()&amp;#10;    rad98.draw()&amp;#10;    rad99.draw()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="segmentCode" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="screenRect2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[-1.000,-1.000,-1.000]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="screenRect2" valType="code"/>
        <Param name="opacity" updates="constant" val="0" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(2, 2)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <CodeComponent name="selectShape">
        <Param name="Begin Experiment" updates="constant" val="#Looking for code in Begin Experiment?&amp;#10;#All code and var definitions for begin experiment are in the test section" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#Select shape is the selector circle that is white and behind the colored one&amp;#10;selectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,1,1], pos=(0,0), size=(0.1,0.1), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 0)&amp;#10;#Inner select shape is on top of select shape and updates it's color to the color of the part of the color wheel it is on&amp;#10;innerSelectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,1,1], pos=(0,0), size=(0.1,0.1), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 0)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if isDragging == False and hasColored == True: #Hides until you actually start selecting a color, this is separate from colorHelp in ExitCode so no interference ever occors&amp;#10;    #Explanation: Color is just hsv set to white, position on circle is calculated by, X:= origin of stimuli x position + cos of the angle in radians (cos funtion only takes radians) * the radius (circumference/2) and then subtracting a fourth of the radius of the color picker circle to make it in the middle of the color wheel&amp;#10;    selectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,0,1], pos=(place[0]+(math.cos(math.radians(-degrees+90))*(.15-(0.03/4))), place[1]+(math.sin(math.radians(-degrees+90))*(.15-(0.03/4)))), size=(0.03,0.03), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 1)&amp;#10;    #Explanation: Same as above except the color is set to the color wheel segment, and to get it centered I devided by 3.4 because for some reason 4 didn't center it correctly, but 3.4 centers it fine so just leaving it like that is ok&amp;#10;    innerSelectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[degrees,1,1], pos=(place[0]+(math.cos(math.radians(-degrees+90))*(.15-(0.025/3.4))), place[1]+(math.sin(math.radians(-degrees+90))*(.15-(0.025/3.4)))), size=(0.025,0.025), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 1)&amp;#10;    #Draws both shapes&amp;#10;    selectShape.draw()&amp;#10;    innerSelectShape.draw()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="selectShape" valType="code"/>
      </CodeComponent>
      <CodeComponent name="feedbackCode">
        <Param name="Begin Experiment" updates="constant" val="#Feedback text setup, tells you how close you are&amp;#10;FeedbackText = visual.TextStim(win=win, name='FeedbackText',&amp;#10;    text='',&amp;#10;    font='Arial',&amp;#10;    pos=(0, 0.4), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='white', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;&amp;#10;#This text makes you select the correct color and location&amp;#10;ContinueText = visual.TextStim(win=win, name='ColorText',&amp;#10;    text='',&amp;#10;    font='Arial',&amp;#10;    pos=(0, -0.4), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='white', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="then = datetime.datetime.now() #Saves time they begun the section&amp;#10;colorText = ''&amp;#10;posText = ''&amp;#10;degrees = 0 #Resests degrees so that if it saves with an exit the degrees will be 0 and not some random number&amp;#10;Image2.setColor([0,0,1])#sets Image hsv color&amp;#10;FeedbackText.setText('')&amp;#10;ContinueText.setText('')&amp;#10;colorIsCorrect = False #If they are on the correct color&amp;#10;locationIsCorrect = False #If they are on the correct location" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if isOnColor: #When you are in the prosses of selecting a color&amp;#10;    #Updates text with how close you are to the correct color&amp;#10;    colorIsCorrect = False #resets color is correct bool&amp;#10;    segNum = (degrees-(orimult/2))/orimult #Changes degrees back into rad #s&amp;#10;    segNum = round(segNum) #Round to prevent errors&amp;#10;    if abs(practicetestrad-segNum) &gt; amountofsegments/2:&amp;#10;        if practicetestrad&gt;segNum:&amp;#10;            colorDist = amountofsegments-practicetestrad+segNum&amp;#10;        else:&amp;#10;            colorDist = amountofsegments-segNum+practicetestrad&amp;#10;    else:&amp;#10;        colorDist = abs(practicetestrad-segNum)&amp;#10;    round(colorDist)&amp;#10;    if colorDist &lt; 2:&amp;#10;        colorText = '        The color is perfect        '&amp;#10;        colorIsCorrect = True&amp;#10;    elif colorDist &lt; 4:&amp;#10;        colorText = '     The color is very close     '&amp;#10;    elif colorDist &lt; 8:&amp;#10;        colorText = '         The color is close         '&amp;#10;    else:&amp;#10;        colorText = '       The color is incorrect       '&amp;#10;    FeedbackText.setText(colorText + '\n' + posText)&amp;#10;if isDragging: #When you are dragging the image&amp;#10;    locationIsCorrect = False #resets location is correct bool&amp;#10;    xpos, ypos = place&amp;#10;    distx = abs(xpos-practicetestx) #find the distance in x between correct and user&amp;#10;    disty = abs(ypos-practicetesty) #find the distance in y between correct and user&amp;#10;    pythDist = math.sqrt((distx*distx)+(disty*disty)) #Uses pythagorean theorem to find distance&amp;#10;    pythDist = round(pythDist,5) #Round to prevent errors&amp;#10;    if pythDist &gt; 0.15:&amp;#10;        posText = '    The location is incorrect    '&amp;#10;    elif pythDist &gt; 0.05:&amp;#10;        posText = 'The location is nearly correct'&amp;#10;    elif pythDist &lt; 0.05:&amp;#10;        posText = '     The location is spot on!     '&amp;#10;        locationIsCorrect = True&amp;#10;    FeedbackText.setText(colorText + '\n' + posText)&amp;#10;FeedbackText.draw()&amp;#10;if isOnColor or isDragging:&amp;#10;    if colorIsCorrect and not locationIsCorrect: #If you try to continue it will wave a finger at you a say no oh, choose a correct location&amp;#10;        ContinueText.setText('Please select a valid loaction')&amp;#10;    elif locationIsCorrect and not colorIsCorrect: #Same as above but for color&amp;#10;        ContinueText.setText('Please select a valid color')&amp;#10;    elif not locationIsCorrect and not colorIsCorrect: #Same as above except both together&amp;#10;        ContinueText.setText('Please select a valid color and location')&amp;#10;if not mouse2.isPressedIn(screenRect2) and locationIsCorrect and colorIsCorrect:&amp;#10;    ContinueText.setText('Press Space To Continue') #When they finally are correct tell them you can press the space bar to continue&amp;#10;    ContinueText.autoDraw = True #Draw the text&amp;#10;elif locationIsCorrect and colorIsCorrect: #This will only call if they are dragging&amp;#10;    ContinueText.setText('') #Sets the text to nothing" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="ContinueText.autoDraw = False #Stop drawing the text" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="feedbackCode" valType="code"/>
      </CodeComponent>
      <CodeComponent name="exitCode">
        <Param name="Begin Experiment" updates="constant" val="practicetesttrail = 0 #Current trail user is on&amp;#10;practiceTestOrder = [0, 1] #order of the practice test, different then study order&amp;#10;practicetestPath = 'None'" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="mouse2.setPos(newPos=(0, 0.001)) #resets position of mouse, has to be offset slightly or else it will select a color for some reason&amp;#10;win.mouseVisible = True #Show mouse only if it is supposed to continue routine&amp;#10;&amp;#10;#These two vars give the person help with knowing how to drag/color live&amp;#10;helpDrag = False&amp;#10;helpColor = False&amp;#10;&amp;#10;opacOfArrows = 0.0 #Opacity of the arrows&amp;#10;opacUp = True #If Opacity is rising or falling&amp;#10;&amp;#10;colorDeg = 0 #Degrees of slider for colorHelp&amp;#10;colorDegUp = True #Degrees of the slider going up or down&amp;#10;colorOpac = 0 #Opacity of the slider&amp;#10;&amp;#10;practicetestPath = practiceStim[0][practiceTestOrder[practicetesttrail]] #Gets path of the study image&amp;#10;practicetestx = practiceStim[1][practiceTestOrder[practicetesttrail]] #Gets x cord of the study image&amp;#10;practicetesty = practiceStim[2][practiceTestOrder[practicetesttrail]] #Gets y cord of the study image&amp;#10;practicetestrad = practiceStim[3][practiceTestOrder[practicetesttrail]] #Gets color of the study image" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if theseKeys == 'space':  # if space is pressed&amp;#10;    #a response ends the routine&amp;#10;    helpDrag = True #If they have not dragged yet and try to end routine&amp;#10;    helpColor = True #If they have not colored yet and try to end routine&amp;#10;    if hasColored and hasDragged: #Stops routine if they have colored and moved the stimuli&amp;#10;        if colorIsCorrect and locationIsCorrect:&amp;#10;            continueRoutine = False&amp;#10;        else:&amp;#10;            ContinueText.autoDraw = True&amp;#10;&amp;#10;#Help animations&amp;#10;if helpColor == True and hasColored == False and isDragging == False: #If they need help coloring and they are not currently dragging the image&amp;#10;    helpDrag = False #Disables other option&amp;#10;    if colorOpac &lt; 1.0:&amp;#10;        colorOpac += 0.01 #How fast opacity of slider increases&amp;#10;    if colorDeg &lt; 1 and colorDegUp == True and colorOpac &gt;= 0.75: #The last var is at what opacity to start sliding&amp;#10;        colorDeg += 0.1&amp;#10;    elif colorDeg &lt; colorSpeed and colorDegUp == True and colorOpac &gt;= 0.75:&amp;#10;        colorDeg += 0.1*colorDeg&amp;#10;    elif colorDeg &lt; colorMaxDeg-colorSpeed and colorDegUp == True and colorOpac &gt;= 0.75:&amp;#10;        colorDeg += colorSpeed/10 #Speed devided by 0.1 which is how much it increases by&amp;#10;    elif colorDeg &lt; colorMaxDeg-1 and colorDegUp == True and colorOpac &gt;= 0.75:&amp;#10;        colorDeg += 0.1*((-colorDeg)+colorMaxDeg)&amp;#10;    elif colorDeg &lt; colorMaxDeg and colorDegUp == True and colorOpac &gt;= 0.75:&amp;#10;        colorDegUp = False #Changes direction&amp;#10;    elif colorDeg &gt; colorMaxDeg-colorSpeed and colorDegUp == False: #Starts going back down degrees here&amp;#10;        colorDeg -= 0.1*((-colorDeg)+colorMaxDeg)&amp;#10;    elif colorDeg &gt; colorSpeed and colorDegUp == False:&amp;#10;        colorDeg -= colorSpeed/10&amp;#10;    elif colorDeg &gt; 1 and colorDegUp == False:&amp;#10;        colorDeg -= 0.1*colorDeg&amp;#10;    elif colorDeg &gt; 0 and colorDegUp == False:&amp;#10;        colorDeg -= 0.05&amp;#10;    elif colorOpac &gt;= 0.75:&amp;#10;        colorDegUp = True #Resets the direction so degrees are going back up again&amp;#10;        colorDeg += 0.05&amp;#10;    #Sets postion of select shapes&amp;#10;    selectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,0,1], pos=(place[0]+(math.cos(math.radians(-colorDeg+90))*(.15-(0.03/4))), place[1]+(math.sin(math.radians(-colorDeg+90))*(.15-(0.03/4)))), size=(0.03,0.03), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = colorOpac)&amp;#10;    innerSelectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[colorDeg,1,1], pos=(place[0]+(math.cos(math.radians(-colorDeg+90))*(.15-(0.025/3.4))), place[1]+(math.sin(math.radians(-colorDeg+90))*(.15-(0.025/3.4)))), size=(0.025,0.025), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = colorOpac)&amp;#10;    #Draws each object&amp;#10;    selectShape.draw()&amp;#10;    innerSelectShape.draw()&amp;#10;    ColorText.draw()&amp;#10;elif helpDrag == True and hasDragged == False:&amp;#10;    helpColor = False #Disables other option&amp;#10;    #Makes a nice animation&amp;#10;    if opacOfArrows &gt;= 1.0: #changes direction of opacity&amp;#10;        opacUp = False&amp;#10;    elif opacOfArrows &lt;= 0.0:&amp;#10;        opacUp = True&amp;#10;    if opacUp == True:&amp;#10;        opacOfArrows += 0.01 #Changes opacity, change this var to make animation faster or slower&amp;#10;    else:&amp;#10;        opacOfArrows -= 0.01&amp;#10;    #Draws aroows and text&amp;#10;    arrowUp.opacity = opacOfArrows&amp;#10;    arrowDown.opacity = opacOfArrows&amp;#10;    arrowRight.opacity = opacOfArrows&amp;#10;    arrowLeft.opacity = opacOfArrows&amp;#10;    arrowUp.draw()&amp;#10;    arrowDown.draw()&amp;#10;    arrowRight.draw()&amp;#10;    arrowLeft.draw()&amp;#10;    DragText.draw() #Tells user what to do" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="win.mouseVisible = False #Hide mouse&amp;#10;practicetesttrail += 1" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="exitCode" valType="code"/>
      </CodeComponent>
      <ImageComponent name="Image2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="hsv" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$practicetestPath" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Image2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.19, 0.19)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="liveCode14">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="currentTime = datetime.datetime.now()&amp;#10;liveFile = open(liveFileName+str(liveNum)+'.csv', 'w')&amp;#10;liveFile.write('Practice,Test,' + str(practicetesttrail+1) + ',2,' + str(numberofpractice + practicetesttrail + 7) +',' + str(numberofpractice + 8) +',' + str(currentTime.hour) + ',' + str(currentTime.minute) + ',' + str(currentTime.second))&amp;#10;liveFile.close()&amp;#10;liveNum += 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;for key in keys:&amp;#10;    if 'command' in key:&amp;#10;        command = True&amp;#10;    if 'esc' in key and command:&amp;#10;        liveliveFile = open(liveFileName+'live.csv', 'w')&amp;#10;        liveliveFile.write('Abort,Abort,1,1,1,1,')&amp;#10;        liveliveFile.close()&amp;#10;        core.quit()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="liveCode14" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="testInstr">
      <CodeComponent name="onsetCode3">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="testOnset = 0" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="onsetCode3" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_3">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="text_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You will now be tested on the color and location of the images you studied. &amp;#10;Use the mouse to select the color and drag the image to its original location.&amp;#10;&amp;#10;You will NOT be given feedback on how close you are.&amp;#10;&amp;#10;Press Space To Start" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_5">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_5" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="liveCode8">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="currentTime = datetime.datetime.now()&amp;#10;liveFile = open(liveFileName+str(liveNum)+'.csv', 'w')&amp;#10;liveFile.write('Test,Instruction,1,1,1,' + str(num_study+1) + ',' + str(currentTime.hour) + ',' + str(currentTime.minute) + ',' + str(currentTime.second) + ',' + liveoldornewrt + ',' + liveuseroldornew) #Gets stuff from last trail&amp;#10;liveFile.close()&amp;#10;liveNum += 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;for key in keys:&amp;#10;    if 'command' in key:&amp;#10;        command = True&amp;#10;    if 'esc' in key and command:&amp;#10;        liveliveFile = open(liveFileName+'live.csv', 'w')&amp;#10;        liveliveFile.write('Abort,Abort,1,1,1,1,')&amp;#10;        liveliveFile.close()&amp;#10;        core.quit()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="liveCode8" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="practiceStudyInstr">
      <CodeComponent name="SkipCode5">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if skipPractice:&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="SkipCode5" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_5">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="text_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Lets start with some practice.&amp;#10;&amp;#10;You will now be shown two objects. Memorize their shape, location and color.&amp;#10;Each object will stay on the screen for three seconds.&amp;#10;&amp;#10;Press Space To Continue" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_7">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_7" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="liveCode2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if not skipPractice:&amp;#10;    currentTime = datetime.datetime.now()&amp;#10;    liveFile = open(liveFileName+str(liveNum)+'.csv', 'w')&amp;#10;    liveFile.write('Practice,Instruction,1,1,3,' + str(numberofpractice + 8) + ',' + str(currentTime.hour) + ',' + str(currentTime.minute) + ',' + str(currentTime.second))&amp;#10;    liveFile.close()&amp;#10;    liveNum += 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;for key in keys:&amp;#10;    if 'command' in key:&amp;#10;        command = True&amp;#10;    if 'esc' in key and command:&amp;#10;        liveliveFile = open(liveFileName+'live.csv', 'w')&amp;#10;        liveliveFile.write('Abort,Abort,1,1,1,1,')&amp;#10;        liveliveFile.close()&amp;#10;        core.quit()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="liveCode2" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="practiceOldornew">
      <TextComponent name="oldornewText2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="oldornewText2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.45)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="1 - Old        2 - New" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="olornewCode2">
        <Param name="Begin Experiment" updates="constant" val="import time&amp;#10;practiceoldornewtrail = 0 #Current trail user is on&amp;#10;practiceOldornewOrder = [3, 1, 2, 0] #order of the practice test, different then study order" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="theseKeys = '' #Gets key press&amp;#10;win.mouseVisible = False #Hide mouse&amp;#10;ttime = 1 #Lets user respond immediatly&amp;#10;&amp;#10;practiceoldornewPath = ''&amp;#10;&amp;#10;practiceoldornewPath = practiceStim[0][practiceOldornewOrder[practiceoldornewtrail]] #Gets path of the study image&amp;#10;&amp;#10;ttime = 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;for key in keys:&amp;#10;    if key == '1' and ttime &gt;= 1: #if user selected old&amp;#10;        if practiceOldornewOrder[practiceoldornewtrail] == 0 or practiceOldornewOrder[practiceoldornewtrail] == 1:&amp;#10;            continueRoutine = False #If they are correct, go on to next routine&amp;#10;        else:&amp;#10;            oldornewText2.setText('Wrong, the image is new') #If they are not correct, tell them they are wrong&amp;#10;            #win.flip() #Updates screen&amp;#10;            #time.sleep(1) #Waits for one second&amp;#10;            ttime = 0&amp;#10;    elif key == '2' and ttime &gt;= 1: #If user selected new&amp;#10;        if practiceOldornewOrder[practiceoldornewtrail] == 2 or practiceOldornewOrder[practiceoldornewtrail] == 3:&amp;#10;            continueRoutine = False #If they are correct, go on to next routine&amp;#10;        else:&amp;#10;            oldornewText2.setText('Wrong, the image is old') #If they are not correct, tell them they are wrong&amp;#10;            #win.flip() #Updates screen&amp;#10;            #time.sleep(1) #Waits for one second&amp;#10;            ttime = 0&amp;#10;&amp;#10;if ttime &gt;= 1:&amp;#10;    oldornewText2.setText('1 - Old        2 - New') #Re-displays old text&amp;#10;else:&amp;#10;    ttime += 0.01" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="practiceoldornewtrail += 1" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="olornewCode2" valType="code"/>
      </CodeComponent>
      <ImageComponent name="oldornewImage2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$practiceoldornewPath" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="oldornewImage2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.19, 0.19)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="liveCode5">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="currentTime = datetime.datetime.now()&amp;#10;liveFile = open(liveFileName+str(liveNum)+'.csv', 'w')&amp;#10;liveFile.write('Practice,Old/New,' + str(practiceoldornewtrail+1) + ',4,' + str(practiceoldornewtrail+7) +',' + str(numberofpractice + 8) +',' + str(currentTime.hour) + ',' + str(currentTime.minute) + ',' + str(currentTime.second))&amp;#10;liveFile.close()&amp;#10;liveNum += 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="for key in keys:&amp;#10;    if 'command' in key:&amp;#10;        command = True&amp;#10;    if 'esc' in key and command:&amp;#10;        liveliveFile = open(liveFileName+'live.csv', 'w')&amp;#10;        liveliveFile.write('Abort,Abort,1,1,1,1,')&amp;#10;        liveliveFile.close()&amp;#10;        core.quit()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="liveCode5" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="practiceExampleInstr">
      <CodeComponent name="SkipCode3">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if skipPractice:&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="SkipCode3" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="In this experiment, you will be presented with different images.&amp;#10;Your task will be to remember each shape, its color and its location on the screen.&amp;#10;&amp;#10;To respond, you will need to use the mouse to drag an image to a place on the screen and choose a color.&amp;#10;&amp;#10;Press space to see an example and try it out" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="liveCode11">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if not skipPractice:&amp;#10;    currentTime = datetime.datetime.now()&amp;#10;    liveFile = open(liveFileName+str(liveNum)+'.csv', 'w')&amp;#10;    liveFile.write('Practice,Instruction,1,1,1,' + str(numberofpractice+8) + ',' + str(currentTime.hour) + ',' + str(currentTime.minute) + ',' + str(currentTime.second) + ',' + str(num_study) + ',' + str(num_test) + ',' + str(skipOldOrNew))&amp;#10;    liveFile.close()&amp;#10;    liveNum += 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;for key in keys:&amp;#10;    if 'command' in key:&amp;#10;        command = True&amp;#10;    if 'esc' in key and command:&amp;#10;        liveliveFile = open(liveFileName+'live.csv', 'w')&amp;#10;        liveliveFile.write('Abort,Abort,1,1,1,1,')&amp;#10;        liveliveFile.close()&amp;#10;        core.quit()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="liveCode11" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="practiceExample">
      <ImageComponent name="Image3">
        <Param name="color" updates="constant" val="$[0,1,0]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="hsv" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="$thisdir + '/Stimuli/' + imageName + '.png'" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Image3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.19, 0.19)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <MouseComponent name="mouse3">
        <Param name="clickable" updates="constant" val="" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="never" valType="str"/>
        <Param name="name" updates="None" val="mouse3" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="False" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="never" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
      <KeyboardComponent name="key_resp_9">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_9" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="DragCode3">
        <Param name="Begin Experiment" updates="constant" val="#To prevent user from clicking inside the color wheel and selecting a color, noClickShape surrounds entire image, set opacity to one to see for yourself ;)&amp;#10;noClickShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,0,1], pos=(0,0), size=(0.25,0.25), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 0)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="isDragging = False #Lets other parts of experiment know that the user is dragging the stimuli&amp;#10;didFinishDrag = False #Lets some aspects of the experiment only do something once after a drag has finished&amp;#10;hasDragged = False #For preventing the user from going on until dragged&amp;#10;place = (0,0) #Place of object (Image)&amp;#10;Image3.setPos(place) #Sets image to (0,0)&amp;#10;noClickShape.setPos(place) #Sets noClickShape to (0,0), see Begin Experiment for more about noClickShape&amp;#10;mousePlace = (0,0) #Place of mouse when clicked&amp;#10;mousex = 0.0 #Offset of mouse x&amp;#10;mousey = 0.0 #Offset of mouse y&amp;#10;firstDrag = True #For updating positions of mousex and mousey" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="#This whole complicated thing makes sure that the stimuli always stays on the mouse if they click on the stimuli first&amp;#10;if mouse3.isPressedIn(screenRect3) and didFinishDrag == False:#ScreenRect is used to detect if mouse is pressed anywhere on screen&amp;#10;    if mouse3.isPressedIn(noClickShape): #Checks when mouse is pressed down, see Begin Experiment for more about noClickShape&amp;#10;        if isOnColor == False: #Makes sure it didn't start on the color wheel&amp;#10;            #This calculates offset of mouse from center of object (Not needed but looks better in experiment)&amp;#10;            mousePlace = mouse3.getPos()&amp;#10;            if firstDrag == True: #Only updates offset once when starting the drag&amp;#10;                mousex = mousePlace[0] - place[0] #Gets the difference between the Image place and the mouse place for x&amp;#10;                mousey = mousePlace[1] - place[1] #Gets the difference between the Image place and the mouse place for y&amp;#10;                firstDrag = False #Disables first drag&amp;#10;            place = mousePlace[0] - mousex, mousePlace[1] - mousey #Adds this onto the place of the image for more intuitive dragging&amp;#10;            Image3.setPos(place) #Sets position of the image equal to the position of the mouse&amp;#10;            noClickShape.setPos(place) #Set position&amp;#10;            isDragging = True #Sets is dragging to true when the mouse starts on the object (noClickShape in this case)&amp;#10;            hasDragged = True #For preventing the user from going on until dragged&amp;#10;            win.mouseVisible = False #Hide mouse when dragging&amp;#10;    elif isDragging == True: #If the mouse started on noClickShape but isnt there right now (and still pressed down) it will update position anyway&amp;#10;        #This calculates offset of mouse from center of object (Not needed but looks better in experiment)&amp;#10;        mousePlace = mouse3.getPos()&amp;#10;        if firstDrag == True: #Only updates offset once when starting the drag&amp;#10;                mousex = mousePlace[0] - place[0] #Gets the difference between the Image place and the mouse place for x&amp;#10;                mousey = mousePlace[1] - place[1] #Gets the difference between the Image place and the mouse place for y&amp;#10;                firstDrag = False #Disables first drag&amp;#10;        place = mousePlace[0] - mousex, mousePlace[1] - mousey #Adds this onto the place of the image for more intuitive dragging&amp;#10;        Image3.setPos(place) #Sets position of the image equal to the position of the mouse&amp;#10;        noClickShape.setPos(place) #Set position&amp;#10;elif didFinishDrag == True and isDragging == True: #Disables didFinishDrag for good&amp;#10;    didFinishDrag = False&amp;#10;elif isDragging == True: #This is an elif statement so will only play if others above are false&amp;#10;    didFinishDrag = True #Makes var true so it only is true for one frame&amp;#10;    isDragging = False #It is no longer dragging&amp;#10;    win.mouseVisible = True #Show mouse once your done dragging&amp;#10;    firstDrag = True #re-enables first drag again so when the first if statement plays it will update position of offset&amp;#10;else:&amp;#10;    didFinishDrag = False #Disables didFinishDrag for good&amp;#10;&amp;#10;noClickShape.draw() #Draws no click shape" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="DragCode3" valType="code"/>
      </CodeComponent>
      <CodeComponent name="ColorCode3">
        <Param name="Begin Experiment" updates="constant" val="from psychopy import misc #needed for color wheel&amp;#10;&amp;#10;#Creates color wheel object&amp;#10;textureRes = 64&amp;#10;&amp;#10;hsv = np.ones([textureRes,textureRes,3], dtype=float)&amp;#10;hsv[:,:,0] = np.linspace(0,360,textureRes, endpoint=False)&amp;#10;hsv[:,:,1] = 1&amp;#10;hsv[:,:,2] = 1&amp;#10;rgb = misc.hsv2rgb(hsv)&amp;#10;&amp;#10;#mask gives the fraction of the that is visible&amp;#10;mask = np.zeros([100,1])&amp;#10;mask[-10:] = 1  # 10% of the radius is 1 (visible)&amp;#10;# annoyingly with interpolate=True the mask outer edge can &amp;#10;# get blended with innermost pixel&amp;#10;&amp;#10;#texture defines colors, mask makes it have a hole in the center, angular cycles defines how many times each color will be shown, interpolate makes the colors blend together&amp;#10;stim = visual.RadialStim(win, tex=rgb, mask = mask, angularRes=256, angularCycles=1, interpolate=True, size=(.3,.3))" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="isOnColor = False #If the mouse is currently on a color&amp;#10;hasColored = False #For hiding the selectShape until you start coloring&amp;#10;stim.setPos(place)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if didFinishDrag == True: #Only updates position once after you finish dragging, otherwise experiment will lag a lot&amp;#10;    stim.setPos(place)&amp;#10;    stim.draw()&amp;#10;elif isDragging == False: #If your not dragging it won't redifine the position&amp;#10;    stim.draw()&amp;#10;&amp;#10;if mouse3.isPressedIn(screenRect3):#ScreenRect is used to detect if mouse is pressed anywhere on screen&amp;#10;    if mouse3.isPressedIn(stim) and not mouse3.isPressedIn(noClickShape):#Has to be initially pressed on wheel to set to true&amp;#10;        if isDragging == False: #Also cannot be dragging&amp;#10;            hasColored = True #For hiding the selectShape until you start coloring&amp;#10;            isOnColor = True #Then will set is on color to true&amp;#10;else:&amp;#10;    isOnColor = False #If mouse is not pressed down it is not on color" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="ColorCode3" valType="code"/>
      </CodeComponent>
      <CodeComponent name="SegmentCode3">
        <Param name="Begin Experiment" updates="constant" val="#This creates each segment of the circle that can be used and clicked on later in the experiment&amp;#10;opac = 0 #changes opacity of segments, 0 is invisible, 1 is visible, change to 0.5? to debug&amp;#10;orimult = 3.6 #origin value is multiplied by this amount&amp;#10;visWed = (0.0, 4) #visible portion of the wedge&amp;#10;segpos = (0,0) #Position of segments&amp;#10;segSize = (4,4) #size of segments, goes along with color wheel size&amp;#10;degrees = 0 #Degrees the selectshape should be, don't change this var&amp;#10;#If you change the amount of possible segments make sure to update randomization amount in the header file as well&amp;#10;&amp;#10;#Visual wedge is set to 4 but in reality it only covers about 3.6&amp;#10;#So the origin of each segment are multiples of 3.6, 360/3.6 is 100 segments" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="segpos = (0,0) #resets position of segments&amp;#10;&amp;#10;#Defines each segment&amp;#10;rad0 = visual.RadialStim( win=win, name='rad0', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*0, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad1 = visual.RadialStim( win=win, name='rad1', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*1, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad2 = visual.RadialStim( win=win, name='rad2', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*2, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad3 = visual.RadialStim( win=win, name='rad3', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*3, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad4 = visual.RadialStim( win=win, name='rad4', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*4, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad5 = visual.RadialStim( win=win, name='rad5', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*5, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad6 = visual.RadialStim( win=win, name='rad6', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*6, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad7 = visual.RadialStim( win=win, name='rad7', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*7, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad8 = visual.RadialStim( win=win, name='rad8', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*8, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad9 = visual.RadialStim( win=win, name='rad9', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*9, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad10 = visual.RadialStim( win=win, name='rad10', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*10, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad11 = visual.RadialStim( win=win, name='rad11', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*11, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad12 = visual.RadialStim( win=win, name='rad12', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*12, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad13 = visual.RadialStim( win=win, name='rad13', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*13, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad14 = visual.RadialStim( win=win, name='rad14', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*14, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad15 = visual.RadialStim( win=win, name='rad15', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*15, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad16 = visual.RadialStim( win=win, name='rad16', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*16, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad17 = visual.RadialStim( win=win, name='rad17', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*17, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad18 = visual.RadialStim( win=win, name='rad18', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*18, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad19 = visual.RadialStim( win=win, name='rad19', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*19, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad20 = visual.RadialStim( win=win, name='rad20', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*20, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad21 = visual.RadialStim( win=win, name='rad21', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*21, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad22 = visual.RadialStim( win=win, name='rad22', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*22, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad23 = visual.RadialStim( win=win, name='rad23', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*23, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad24 = visual.RadialStim( win=win, name='rad24', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*24, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad25 = visual.RadialStim( win=win, name='rad25', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*25, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad26 = visual.RadialStim( win=win, name='rad26', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*26, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad27 = visual.RadialStim( win=win, name='rad27', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*27, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad28 = visual.RadialStim( win=win, name='rad28', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*28, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad29 = visual.RadialStim( win=win, name='rad29', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*29, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad30 = visual.RadialStim( win=win, name='rad30', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*30, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad31 = visual.RadialStim( win=win, name='rad31', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*31, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad32 = visual.RadialStim( win=win, name='rad32', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*32, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad33 = visual.RadialStim( win=win, name='rad33', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*33, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad34 = visual.RadialStim( win=win, name='rad34', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*34, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad35 = visual.RadialStim( win=win, name='rad35', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*35, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad36 = visual.RadialStim( win=win, name='rad36', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*36, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad37 = visual.RadialStim( win=win, name='rad37', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*37, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad38 = visual.RadialStim( win=win, name='rad38', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*38, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad39 = visual.RadialStim( win=win, name='rad39', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*39, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad40 = visual.RadialStim( win=win, name='rad40', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*40, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad41 = visual.RadialStim( win=win, name='rad41', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*41, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad42 = visual.RadialStim( win=win, name='rad42', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*42, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad43 = visual.RadialStim( win=win, name='rad43', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*43, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad44 = visual.RadialStim( win=win, name='rad44', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*44, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad45 = visual.RadialStim( win=win, name='rad45', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*45, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad46 = visual.RadialStim( win=win, name='rad46', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*46, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad47 = visual.RadialStim( win=win, name='rad47', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*47, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad48 = visual.RadialStim( win=win, name='rad48', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*48, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad49 = visual.RadialStim( win=win, name='rad49', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*49, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad50 = visual.RadialStim( win=win, name='rad50', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*50, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad51 = visual.RadialStim( win=win, name='rad51', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*51, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad52 = visual.RadialStim( win=win, name='rad52', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*52, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad53 = visual.RadialStim( win=win, name='rad53', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*53, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad54 = visual.RadialStim( win=win, name='rad54', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*54, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad55 = visual.RadialStim( win=win, name='rad55', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*55, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad56 = visual.RadialStim( win=win, name='rad56', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*56, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad57 = visual.RadialStim( win=win, name='rad57', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*57, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad58 = visual.RadialStim( win=win, name='rad58', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*58, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad59 = visual.RadialStim( win=win, name='rad59', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*59, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad60 = visual.RadialStim( win=win, name='rad60', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*60, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad61 = visual.RadialStim( win=win, name='rad61', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*61, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad62 = visual.RadialStim( win=win, name='rad62', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*62, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad63 = visual.RadialStim( win=win, name='rad63', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*63, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad64 = visual.RadialStim( win=win, name='rad64', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*64, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad65 = visual.RadialStim( win=win, name='rad65', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*65, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad66 = visual.RadialStim( win=win, name='rad66', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*66, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad67 = visual.RadialStim( win=win, name='rad67', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*67, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad68 = visual.RadialStim( win=win, name='rad68', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*68, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad69 = visual.RadialStim( win=win, name='rad69', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*69, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad70 = visual.RadialStim( win=win, name='rad70', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*70, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad71 = visual.RadialStim( win=win, name='rad71', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*71, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad72 = visual.RadialStim( win=win, name='rad72', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*72, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad73 = visual.RadialStim( win=win, name='rad73', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*73, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad74 = visual.RadialStim( win=win, name='rad74', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*74, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad75 = visual.RadialStim( win=win, name='rad75', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*75, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad76 = visual.RadialStim( win=win, name='rad76', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*76, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad77 = visual.RadialStim( win=win, name='rad77', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*77, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad78 = visual.RadialStim( win=win, name='rad78', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*78, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad79 = visual.RadialStim( win=win, name='rad79', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*79, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad80 = visual.RadialStim( win=win, name='rad80', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*80, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad81 = visual.RadialStim( win=win, name='rad81', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*81, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad82 = visual.RadialStim( win=win, name='rad82', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*82, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad83 = visual.RadialStim( win=win, name='rad83', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*83, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad84 = visual.RadialStim( win=win, name='rad84', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*84, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad85 = visual.RadialStim( win=win, name='rad85', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*85, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad86 = visual.RadialStim( win=win, name='rad86', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*86, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad87 = visual.RadialStim( win=win, name='rad87', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*87, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad88 = visual.RadialStim( win=win, name='rad88', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*88, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad89 = visual.RadialStim( win=win, name='rad89', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*89, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad90 = visual.RadialStim( win=win, name='rad90', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*90, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad91 = visual.RadialStim( win=win, name='rad91', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*91, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad92 = visual.RadialStim( win=win, name='rad92', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*92, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad93 = visual.RadialStim( win=win, name='rad93', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*93, pos=segpos, size=segSize, visibleWedge=visWed, opacity = opac )&amp;#10;&amp;#10;rad94 = visual.RadialStim( win=win, name='rad94', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*94, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad95 = visual.RadialStim( win=win, name='rad95', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*95, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad96 = visual.RadialStim( win=win, name='rad96', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*96, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad97 = visual.RadialStim( win=win, name='rad97', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*97, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad98 = visual.RadialStim( win=win, name='rad98', color=[-1,1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*98, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )&amp;#10;&amp;#10;rad99 = visual.RadialStim( win=win, name='rad99', color=[1,-1,-1],&amp;#10;    angularCycles = 0, radialCycles = 0, radialPhase = 0.5, colorSpace = 'rgb', &amp;#10;    ori= orimult*99, pos=segpos, size=segSize, visibleWedge=visWed,  opacity = opac )" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="#MARK: Detect Mouse Press On Segment&amp;#10;#Takes the multiplier (How many segments) and multiplies it by rad number&amp;#10;#Then adds half of the multiplier (to make color average)&amp;#10;if isDragging == False and isOnColor == True: #If its on a segment it will update the color of the Image3&amp;#10;    if mouse3.isPressedIn(rad0): #Will not set color if dragging Image3&amp;#10;        degrees = (orimult*0)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad1):&amp;#10;        degrees = (orimult*1)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad2):&amp;#10;        degrees = (orimult*2)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad3):&amp;#10;        degrees = (orimult*3)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad4):&amp;#10;        degrees = (orimult*4)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad5):&amp;#10;        degrees = (orimult*5)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad6):&amp;#10;        degrees = (orimult*6)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad7):&amp;#10;        degrees = (orimult*7)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad8):&amp;#10;        degrees = (orimult*8)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad9):&amp;#10;        degrees = (orimult*9)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad10):&amp;#10;        degrees = (orimult*10)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad11):&amp;#10;        degrees = (orimult*11)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad12):&amp;#10;        degrees = (orimult*12)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad13):&amp;#10;        degrees = (orimult*13)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad14):&amp;#10;        degrees = (orimult*14)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad15):&amp;#10;        degrees = (orimult*15)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad16):&amp;#10;        degrees = (orimult*16)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad17):&amp;#10;        degrees = (orimult*17)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad18):&amp;#10;        degrees = (orimult*18)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad19):&amp;#10;        degrees = (orimult*19)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad20):&amp;#10;        degrees = (orimult*20)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad21):&amp;#10;        degrees = (orimult*21)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad22):&amp;#10;        degrees = (orimult*22)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad23):&amp;#10;        degrees = (orimult*23)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad24):&amp;#10;        degrees = (orimult*24)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad25):&amp;#10;        degrees = (orimult*25)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad26):&amp;#10;        degrees = (orimult*26)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad27):&amp;#10;        degrees = (orimult*27)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad28):&amp;#10;        degrees = (orimult*28)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad29):&amp;#10;        degrees = (orimult*29)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad30):&amp;#10;        degrees = (orimult*30)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad31):&amp;#10;        degrees = (orimult*31)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad32):&amp;#10;        degrees = (orimult*32)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad33):&amp;#10;        degrees = (orimult*33)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad34):&amp;#10;        degrees = (orimult*34)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad35):&amp;#10;        degrees = (orimult*35)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad36):&amp;#10;        degrees = (orimult*36)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad37):&amp;#10;        degrees = (orimult*37)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad38):&amp;#10;        degrees = (orimult*38)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad39):&amp;#10;        degrees = (orimult*39)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad40):&amp;#10;        degrees = (orimult*40)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad41):&amp;#10;        degrees = (orimult*41)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad42):&amp;#10;        degrees = (orimult*42)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad43):&amp;#10;        degrees = (orimult*43)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad44):&amp;#10;        degrees = (orimult*44)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad45):&amp;#10;        degrees = (orimult*45)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad46):&amp;#10;        degrees = (orimult*46)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad47):&amp;#10;        degrees = (orimult*47)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad48):&amp;#10;        degrees = (orimult*48)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad49):&amp;#10;        degrees = (orimult*49)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad50):&amp;#10;        degrees = (orimult*50)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad51):&amp;#10;        degrees = (orimult*51)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad52):&amp;#10;        degrees = (orimult*52)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad53):&amp;#10;        degrees = (orimult*53)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad54):&amp;#10;        degrees = (orimult*54)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad55):&amp;#10;        degrees = (orimult*55)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad56):&amp;#10;        degrees = (orimult*56)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad57):&amp;#10;        degrees = (orimult*57)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad58):&amp;#10;        degrees = (orimult*58)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad59):&amp;#10;        degrees = (orimult*59)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad60):&amp;#10;        degrees = (orimult*60)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad61):&amp;#10;        degrees = (orimult*61)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad62):&amp;#10;        degrees = (orimult*62)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad63):&amp;#10;        degrees = (orimult*63)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad64):&amp;#10;        degrees = (orimult*64)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad65):&amp;#10;        degrees = (orimult*65)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad66):&amp;#10;        degrees = (orimult*66)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad67):&amp;#10;        degrees = (orimult*67)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad68):&amp;#10;        degrees = (orimult*68)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad69):&amp;#10;        degrees = (orimult*69)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad70):&amp;#10;        degrees = (orimult*70)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad71):&amp;#10;        degrees = (orimult*71)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad72):&amp;#10;        degrees = (orimult*72)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad73):&amp;#10;        degrees = (orimult*73)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad74):&amp;#10;        degrees = (orimult*74)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad75):&amp;#10;        degrees = (orimult*75)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad76):&amp;#10;        degrees = (orimult*76)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad77):&amp;#10;        degrees = (orimult*77)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad78):&amp;#10;        degrees = (orimult*78)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad79):&amp;#10;        degrees = (orimult*79)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad80):&amp;#10;        degrees = (orimult*80)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad81):&amp;#10;        degrees = (orimult*81)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad82):&amp;#10;        degrees = (orimult*82)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad83):&amp;#10;        degrees = (orimult*83)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad84):&amp;#10;        degrees = (orimult*84)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad85):&amp;#10;        degrees = (orimult*85)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad86):&amp;#10;        degrees = (orimult*86)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad87):&amp;#10;        degrees = (orimult*87)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad88):&amp;#10;        degrees = (orimult*88)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad89):&amp;#10;        degrees = (orimult*89)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad90):&amp;#10;        degrees = (orimult*90)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad91):&amp;#10;        degrees = (orimult*91)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad92):&amp;#10;        degrees = (orimult*92)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad93):&amp;#10;        degrees = (orimult*93)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad94):&amp;#10;        degrees = (orimult*94)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad95):&amp;#10;        degrees = (orimult*95)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad96):&amp;#10;        degrees = (orimult*96)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad97):&amp;#10;        degrees = (orimult*97)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad98):&amp;#10;        degrees = (orimult*98)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;    elif mouse3.isPressedIn(rad99):&amp;#10;        degrees = (orimult*99)+(orimult/2)&amp;#10;        Image3.setColor([degrees,1,1])#sets Image3 hsv color&amp;#10;&amp;#10;#MARK: Update Segment Positions And Draw Them&amp;#10;if didFinishDrag == True: #This is to prevent slowness when picking up ubject to drag&amp;#10;    segpos = (place)#When it appears sets the pos equal to the current place of the object&amp;#10;    #Sets each segment position&amp;#10;    rad0.setPos(segpos)&amp;#10;    rad1.setPos(segpos)&amp;#10;    rad2.setPos(segpos)&amp;#10;    rad3.setPos(segpos)&amp;#10;    rad4.setPos(segpos)&amp;#10;    rad5.setPos(segpos)&amp;#10;    rad6.setPos(segpos)&amp;#10;    rad7.setPos(segpos)&amp;#10;    rad8.setPos(segpos)&amp;#10;    rad9.setPos(segpos)&amp;#10;    rad10.setPos(segpos)&amp;#10;    rad11.setPos(segpos)&amp;#10;    rad12.setPos(segpos)&amp;#10;    rad13.setPos(segpos)&amp;#10;    rad14.setPos(segpos)&amp;#10;    rad15.setPos(segpos)&amp;#10;    rad16.setPos(segpos)&amp;#10;    rad17.setPos(segpos)&amp;#10;    rad18.setPos(segpos)&amp;#10;    rad19.setPos(segpos)&amp;#10;    rad20.setPos(segpos)&amp;#10;    rad21.setPos(segpos)&amp;#10;    rad22.setPos(segpos)&amp;#10;    rad23.setPos(segpos)&amp;#10;    rad24.setPos(segpos)&amp;#10;    rad25.setPos(segpos)&amp;#10;    rad26.setPos(segpos)&amp;#10;    rad27.setPos(segpos)&amp;#10;    rad28.setPos(segpos)&amp;#10;    rad29.setPos(segpos)&amp;#10;    rad30.setPos(segpos)&amp;#10;    rad31.setPos(segpos)&amp;#10;    rad32.setPos(segpos)&amp;#10;    rad33.setPos(segpos)&amp;#10;    rad34.setPos(segpos)&amp;#10;    rad35.setPos(segpos)&amp;#10;    rad36.setPos(segpos)&amp;#10;    rad37.setPos(segpos)&amp;#10;    rad38.setPos(segpos)&amp;#10;    rad39.setPos(segpos)&amp;#10;    rad40.setPos(segpos)&amp;#10;    rad41.setPos(segpos)&amp;#10;    rad42.setPos(segpos)&amp;#10;    rad43.setPos(segpos)&amp;#10;    rad44.setPos(segpos)&amp;#10;    rad45.setPos(segpos)&amp;#10;    rad46.setPos(segpos)&amp;#10;    rad47.setPos(segpos)&amp;#10;    rad48.setPos(segpos)&amp;#10;    rad49.setPos(segpos)&amp;#10;    rad50.setPos(segpos)&amp;#10;    rad51.setPos(segpos)&amp;#10;    rad52.setPos(segpos)&amp;#10;    rad53.setPos(segpos)&amp;#10;    rad54.setPos(segpos)&amp;#10;    rad55.setPos(segpos)&amp;#10;    rad56.setPos(segpos)&amp;#10;    rad57.setPos(segpos)&amp;#10;    rad58.setPos(segpos)&amp;#10;    rad59.setPos(segpos)&amp;#10;    rad60.setPos(segpos)&amp;#10;    rad61.setPos(segpos)&amp;#10;    rad62.setPos(segpos)&amp;#10;    rad63.setPos(segpos)&amp;#10;    rad64.setPos(segpos)&amp;#10;    rad65.setPos(segpos)&amp;#10;    rad66.setPos(segpos)&amp;#10;    rad67.setPos(segpos)&amp;#10;    rad68.setPos(segpos)&amp;#10;    rad69.setPos(segpos)&amp;#10;    rad70.setPos(segpos)&amp;#10;    rad71.setPos(segpos)&amp;#10;    rad72.setPos(segpos)&amp;#10;    rad73.setPos(segpos)&amp;#10;    rad74.setPos(segpos)&amp;#10;    rad75.setPos(segpos)&amp;#10;    rad76.setPos(segpos)&amp;#10;    rad77.setPos(segpos)&amp;#10;    rad78.setPos(segpos)&amp;#10;    rad79.setPos(segpos)&amp;#10;    rad80.setPos(segpos)&amp;#10;    rad81.setPos(segpos)&amp;#10;    rad82.setPos(segpos)&amp;#10;    rad83.setPos(segpos)&amp;#10;    rad84.setPos(segpos)&amp;#10;    rad85.setPos(segpos)&amp;#10;    rad86.setPos(segpos)&amp;#10;    rad87.setPos(segpos)&amp;#10;    rad88.setPos(segpos)&amp;#10;    rad89.setPos(segpos)&amp;#10;    rad90.setPos(segpos)&amp;#10;    rad91.setPos(segpos)&amp;#10;    rad92.setPos(segpos)&amp;#10;    rad93.setPos(segpos)&amp;#10;    rad94.setPos(segpos)&amp;#10;    rad95.setPos(segpos)&amp;#10;    rad96.setPos(segpos)&amp;#10;    rad97.setPos(segpos)&amp;#10;    rad98.setPos(segpos)&amp;#10;    rad99.setPos(segpos)&amp;#10;elif isDragging == False and isOnColor == True: #When dragging it will dispear&amp;#10;    #Draws each segment&amp;#10;    rad0.draw()&amp;#10;    rad1.draw()&amp;#10;    rad2.draw()&amp;#10;    rad3.draw()&amp;#10;    rad4.draw()&amp;#10;    rad5.draw()&amp;#10;    rad6.draw()&amp;#10;    rad7.draw()&amp;#10;    rad8.draw()&amp;#10;    rad9.draw()&amp;#10;    rad10.draw()&amp;#10;    rad11.draw()&amp;#10;    rad12.draw()&amp;#10;    rad13.draw()&amp;#10;    rad14.draw()&amp;#10;    rad15.draw()&amp;#10;    rad16.draw()&amp;#10;    rad17.draw()&amp;#10;    rad18.draw()&amp;#10;    rad19.draw()&amp;#10;    rad20.draw()&amp;#10;    rad21.draw()&amp;#10;    rad22.draw()&amp;#10;    rad23.draw()&amp;#10;    rad24.draw()&amp;#10;    rad25.draw()&amp;#10;    rad26.draw()&amp;#10;    rad27.draw()&amp;#10;    rad28.draw()&amp;#10;    rad29.draw()&amp;#10;    rad30.draw()&amp;#10;    rad31.draw()&amp;#10;    rad32.draw()&amp;#10;    rad33.draw()&amp;#10;    rad34.draw()&amp;#10;    rad35.draw()&amp;#10;    rad36.draw()&amp;#10;    rad37.draw()&amp;#10;    rad38.draw()&amp;#10;    rad39.draw()&amp;#10;    rad40.draw()&amp;#10;    rad41.draw()&amp;#10;    rad42.draw()&amp;#10;    rad43.draw()&amp;#10;    rad44.draw()&amp;#10;    rad45.draw()&amp;#10;    rad46.draw()&amp;#10;    rad47.draw()&amp;#10;    rad48.draw()&amp;#10;    rad49.draw()&amp;#10;    rad50.draw()&amp;#10;    rad51.draw()&amp;#10;    rad52.draw()&amp;#10;    rad53.draw()&amp;#10;    rad54.draw()&amp;#10;    rad55.draw()&amp;#10;    rad56.draw()&amp;#10;    rad57.draw()&amp;#10;    rad58.draw()&amp;#10;    rad59.draw()&amp;#10;    rad60.draw()&amp;#10;    rad61.draw()&amp;#10;    rad62.draw()&amp;#10;    rad63.draw()&amp;#10;    rad64.draw()&amp;#10;    rad65.draw()&amp;#10;    rad66.draw()&amp;#10;    rad67.draw()&amp;#10;    rad68.draw()&amp;#10;    rad69.draw()&amp;#10;    rad70.draw()&amp;#10;    rad71.draw()&amp;#10;    rad72.draw()&amp;#10;    rad73.draw()&amp;#10;    rad74.draw()&amp;#10;    rad75.draw()&amp;#10;    rad76.draw()&amp;#10;    rad77.draw()&amp;#10;    rad78.draw()&amp;#10;    rad79.draw()&amp;#10;    rad80.draw()&amp;#10;    rad81.draw()&amp;#10;    rad82.draw()&amp;#10;    rad83.draw()&amp;#10;    rad84.draw()&amp;#10;    rad85.draw()&amp;#10;    rad86.draw()&amp;#10;    rad87.draw()&amp;#10;    rad88.draw()&amp;#10;    rad89.draw()&amp;#10;    rad90.draw()&amp;#10;    rad91.draw()&amp;#10;    rad92.draw()&amp;#10;    rad93.draw()&amp;#10;    rad94.draw()&amp;#10;    rad95.draw()&amp;#10;    rad96.draw()&amp;#10;    rad97.draw()&amp;#10;    rad98.draw()&amp;#10;    rad99.draw()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="SegmentCode3" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="screenRect3">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="screenRect3" valType="code"/>
        <Param name="opacity" updates="constant" val="0" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(2, 2)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <CodeComponent name="SelectShape3">
        <Param name="Begin Experiment" updates="constant" val="import math #Needed for cos and sin" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#Select shape is the selector circle that is white and behind the colored one&amp;#10;selectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,1,1], pos=(0,0), size=(0.1,0.1), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 0)&amp;#10;#Inner select shape is on top of select shape and updates it's color to the color of the part of the color wheel it is on&amp;#10;innerSelectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,1,1], pos=(0,0), size=(0.1,0.1), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 0)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if isDragging == False and hasColored == True: #Hides until you actually start selecting a color, this is separate from colorHelp in ExitCode so no interference ever occors&amp;#10;    #Explanation: Color is just hsv set to white, position on circle is calculated by, X:= origin of stimuli x position + cos of the angle in radians (cos funtion only takes radians) * the radius (circumference/2) and then subtracting a fourth of the radius of the color picker circle to make it in the middle of the color wheel&amp;#10;    selectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,1,0], pos=(place[0]+(math.cos(math.radians(-degrees+90))*(.15-(0.03/4))), place[1]+(math.sin(math.radians(-degrees+90))*(.15-(0.03/4)))), size=(0.03,0.03), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 1)&amp;#10;    #Explanation: Same as above except the color is set to the color wheel segment, and to get it centered I devided by 3.4 because for some reason 4 didn't center it correctly, but 3.4 centers it fine so just leaving it like that is ok&amp;#10;    innerSelectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[degrees,1,1], pos=(place[0]+(math.cos(math.radians(-degrees+90))*(.15-(0.025/3.4))), place[1]+(math.sin(math.radians(-degrees+90))*(.15-(0.025/3.4)))), size=(0.025,0.025), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = 1)&amp;#10;    #Draws both shapes&amp;#10;    selectShape.draw()&amp;#10;    innerSelectShape.draw()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="SelectShape3" valType="code"/>
      </CodeComponent>
      <CodeComponent name="AnimationCode">
        <Param name="Begin Experiment" updates="constant" val="#Max degrees and speed for color help&amp;#10;colorMaxDeg = 270 #1 to any real number, must be at least twice as much as speed for smooth animation&amp;#10;colorSpeed = 50 #1 to any real number, do not recomend setting this above 50&amp;#10;&amp;#10;#Color text setup&amp;#10;ColorText = visual.TextStim(win=win, name='ColorText',&amp;#10;    text='Please select a color from the color wheel',&amp;#10;    font='Arial',&amp;#10;    pos=(0, -0.4), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='white', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;&amp;#10;#Drag text setup&amp;#10;DragText = visual.TextStim(win=win, name='DragText',&amp;#10;    text='Please Drag and Drop the object to a location on the screen',&amp;#10;    font='Arial',&amp;#10;    pos=(0, -0.4), height=0.03, wrapWidth=None, ori=0, &amp;#10;    color='white', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;&amp;#10;#Define images&amp;#10;arrowUp = visual.ImageStim(&amp;#10;    win=win, name='arrowUp',&amp;#10;    image='sin', mask=None,&amp;#10;    ori=0, pos=(0, .2), size=(0.03, 0.03),&amp;#10;    color=[1,1,0], colorSpace='hsv', opacity=1,&amp;#10;    flipHoriz=False, flipVert=False,&amp;#10;    texRes=128, interpolate=True, depth=0.0)&amp;#10;&amp;#10;arrowDown = visual.ImageStim(&amp;#10;    win=win, name='arrowDown',&amp;#10;    image='sin', mask=None,&amp;#10;    ori=0, pos=(0, -.2), size=(0.03, 0.03),&amp;#10;    color=[1,1,0], colorSpace='hsv', opacity=1,&amp;#10;    flipHoriz=False, flipVert=True,&amp;#10;    texRes=128, interpolate=True, depth=0.0)&amp;#10;&amp;#10;arrowRight = visual.ImageStim(&amp;#10;    win=win, name='arrowRight',&amp;#10;    image='sin', mask=None,&amp;#10;    ori=0, pos=(.2, 0), size=(0.03, 0.03),&amp;#10;    color=[1,1,0], colorSpace='hsv', opacity=1,&amp;#10;    flipHoriz=False, flipVert=False,&amp;#10;    texRes=128, interpolate=True, depth=0.0)&amp;#10;&amp;#10;arrowLeft = visual.ImageStim(&amp;#10;    win=win, name='arrowLeft',&amp;#10;    image='sin', mask=None,&amp;#10;    ori=0, pos=(-.2, 0), size=(0.03, 0.03),&amp;#10;    color=[1,1,0], colorSpace='hsv', opacity=1,&amp;#10;    flipHoriz=True, flipVert=False,&amp;#10;    texRes=128, interpolate=True, depth=0.0)&amp;#10;&amp;#10;#Set images&amp;#10;arrowUp.setImage(thisdir + '/LOCO/arrowUp.png')&amp;#10;arrowDown.setImage(thisdir + '/LOCO/arrowUp.png')&amp;#10;arrowRight.setImage(thisdir + '/LOCO/arrowRight.png')&amp;#10;arrowLeft.setImage(thisdir + '/LOCO/arrowRight.png')" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="win.mouseVisible = True #Show mouse at start&amp;#10;mouse3.setPos(newPos=(0, 0.001)) #resets position of mouse, has to be offset slightly or else it will select a color for some reason&amp;#10;&amp;#10;#These two vars give the person help with knowing how to drag/color live&amp;#10;helpDrag = False&amp;#10;helpColor = False&amp;#10;&amp;#10;opacOfArrows = 0.0 #Opacity of the arrows&amp;#10;opacUp = True #If Opacity is rising or falling&amp;#10;&amp;#10;colorDeg = 0 #Degrees of slider for colorHelp&amp;#10;colorDegUp = True #Degrees of the slider going up or down&amp;#10;colorOpac = 0 #Opacity of the slider" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if theseKeys == 'space':  # if space is pressed&amp;#10;    #a response ends the routine&amp;#10;    if hasColored and hasDragged: #Stops routine if they have colored and moved the stimuli&amp;#10;        continueRoutine = False&amp;#10;    elif not hasColored:&amp;#10;        helpColor = True&amp;#10;    elif not hasDragged:&amp;#10;        helpDrag = True&amp;#10;&amp;#10;#Help animations&amp;#10;if helpColor == True and hasColored == False and isDragging == False: #If they need help coloring and they are not currently dragging the image&amp;#10;    helpDrag = False #Disables other option&amp;#10;    if colorOpac &lt; 1.0:&amp;#10;        colorOpac += 0.01 #How fast opacity of slider increases&amp;#10;    if colorDeg &lt; 1 and colorDegUp == True and colorOpac &gt;= 0.75: #The last var is at what opacity to start sliding&amp;#10;        colorDeg += 0.1&amp;#10;    elif colorDeg &lt; colorSpeed and colorDegUp == True and colorOpac &gt;= 0.75:&amp;#10;        colorDeg += 0.1*colorDeg&amp;#10;    elif colorDeg &lt; colorMaxDeg-colorSpeed and colorDegUp == True and colorOpac &gt;= 0.75:&amp;#10;        colorDeg += colorSpeed/10 #Speed devided by 0.1 which is how much it increases by&amp;#10;    elif colorDeg &lt; colorMaxDeg-1 and colorDegUp == True and colorOpac &gt;= 0.75:&amp;#10;        colorDeg += 0.1*((-colorDeg)+colorMaxDeg)&amp;#10;    elif colorDeg &lt; colorMaxDeg and colorDegUp == True and colorOpac &gt;= 0.75:&amp;#10;        colorDegUp = False #Changes direction&amp;#10;    elif colorDeg &gt; colorMaxDeg-colorSpeed and colorDegUp == False: #Starts going back down degrees here&amp;#10;        colorDeg -= 0.1*((-colorDeg)+colorMaxDeg)&amp;#10;    elif colorDeg &gt; colorSpeed and colorDegUp == False:&amp;#10;        colorDeg -= colorSpeed/10&amp;#10;    elif colorDeg &gt; 1 and colorDegUp == False:&amp;#10;        colorDeg -= 0.1*colorDeg&amp;#10;    elif colorDeg &gt; 0 and colorDegUp == False:&amp;#10;        colorDeg -= 0.05&amp;#10;    elif colorOpac &gt;= 0.75:&amp;#10;        colorDegUp = True #Resets the direction so degrees are going back up again&amp;#10;        colorDeg += 0.05&amp;#10;    #Sets postion of select shapes&amp;#10;    selectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[180,1,0], pos=(place[0]+(math.cos(math.radians(-colorDeg+90))*(.15-(0.03/4))), place[1]+(math.sin(math.radians(-colorDeg+90))*(.15-(0.03/4)))), size=(0.03,0.03), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = colorOpac)&amp;#10;    innerSelectShape = visual.RadialStim(win, colorSpace = 'hsv', color=[colorDeg,1,1], pos=(place[0]+(math.cos(math.radians(-colorDeg+90))*(.15-(0.025/3.4))), place[1]+(math.sin(math.radians(-colorDeg+90))*(.15-(0.025/3.4)))), size=(0.025,0.025), angularCycles = 0, radialCycles = 0, radialPhase = 0.5, opacity = colorOpac)&amp;#10;    #Draws each object&amp;#10;    selectShape.draw()&amp;#10;    innerSelectShape.draw()&amp;#10;    #ColorText.draw()&amp;#10;elif helpDrag == True and hasDragged == False:&amp;#10;    helpColor = False #Disables other option&amp;#10;    #Makes a nice animation&amp;#10;    if opacOfArrows &gt;= 1.0: #changes direction of opacity&amp;#10;        opacUp = False&amp;#10;    elif opacOfArrows &lt;= 0.0:&amp;#10;        opacUp = True&amp;#10;    if opacUp == True:&amp;#10;        opacOfArrows += 0.01 #Changes opacity, change this var to make animation faster or slower&amp;#10;    else:&amp;#10;        opacOfArrows -= 0.01&amp;#10;    #Draws aroows and text&amp;#10;    arrowUp.opacity = opacOfArrows&amp;#10;    arrowDown.opacity = opacOfArrows&amp;#10;    arrowRight.opacity = opacOfArrows&amp;#10;    arrowLeft.opacity = opacOfArrows&amp;#10;    arrowUp.draw()&amp;#10;    arrowDown.draw()&amp;#10;    arrowRight.draw()&amp;#10;    arrowLeft.draw()&amp;#10;    #DragText.draw() #Tells user what to do" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="win.mouseVisible = False #Hide mouse at end" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="AnimationCode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="oldornewInstr">
      <CodeComponent name="SkipCode">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if skipOldOrNew:&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="oldornewOnset = 0" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="SkipCode" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_11">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_11" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="liveCode17">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if not skipOldOrNew:&amp;#10;    currentTime = datetime.datetime.now()&amp;#10;    liveFile = open(liveFileName+str(liveNum)+'.csv', 'w')&amp;#10;    liveFile.write('Old/New,Instruction,1,1,1,' + str(num_test + 1) + ',' + str(currentTime.hour) + ',' + str(currentTime.minute) + ',' + str(currentTime.second))&amp;#10;    liveFile.close()&amp;#10;    liveNum += 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;for key in keys:&amp;#10;    if 'command' in key:&amp;#10;        command = True&amp;#10;    if 'esc' in key and command:&amp;#10;        liveliveFile = open(liveFileName+'live.csv', 'w')&amp;#10;        liveliveFile.write('Abort,Abort,1,1,1,1,')&amp;#10;        liveliveFile.close()&amp;#10;        core.quit()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="liveCode17" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_11">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="text_11" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="We will now test you on how well you remember the shapes you just saw.&amp;#10;Just like in the practice, decide if you have seen each shape during the study, irrespective of its color or location.&amp;#10;If you have seen it during the study, press 1 for OLD. If you have not seen it, press 2 for NEW.&amp;#10;You will not be given feedback." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="practiceOldornewInstr">
      <CodeComponent name="SkipCode2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if skipOldOrNew or skipPractice:&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="SkipCode2" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_10">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_10" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="liveCode16">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if not skipPractice and not skipOldOrNew:&amp;#10;    currentTime = datetime.datetime.now()&amp;#10;    liveFile = open(liveFileName+str(liveNum)+'.csv', 'w')&amp;#10;    liveFile.write('Practice,Instruction,1,1,6,' + str(numberofpractice + 8) + ',' + str(currentTime.hour) + ',' + str(currentTime.minute) + ',' + str(currentTime.second))&amp;#10;    liveFile.close()&amp;#10;    liveNum += 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;for key in keys:&amp;#10;    if 'command' in key:&amp;#10;        command = True&amp;#10;    if 'esc' in key and command:&amp;#10;        liveliveFile = open(liveFileName+'live.csv', 'w')&amp;#10;        liveliveFile.write('Abort,Abort,1,1,1,1,')&amp;#10;        liveliveFile.close()&amp;#10;        core.quit()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="liveCode16" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_10">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="text_10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You'll now be shown multiple shapes.&amp;#10;For each shape, decide if you have seen the shape during the study, irrespective of its color or location.&amp;#10;If you have seen it during study, press 1 for OLD. If you have not seen it, press 2 for NEW." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="header"/>
    <Routine name="reset"/>
    <Routine name="study"/>
    <Routine name="reset"/>
    <Routine name="oldornew"/>
    <Routine name="reset"/>
    <Routine name="practiceExample"/>
  </Flow>
</PsychoPy2experiment>
